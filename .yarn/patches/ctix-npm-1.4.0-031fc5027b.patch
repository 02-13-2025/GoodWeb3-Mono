diff --git a/dist/cjs/ctix.js b/dist/cjs/ctix.js
index 17ae9b3fc3c7dca4a600867f425233cebde00f55..aa2eae4f9c3537037d7ef9d95bfb00d91f34ff64 100644
--- a/dist/cjs/ctix.js
+++ b/dist/cjs/ctix.js
@@ -319,41 +319,45 @@ function getExportedName(exportedDeclarationNode) {
     throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
 }
 
-function getIsIsolatedModules(exportedDeclarationNode) {
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ClassDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.VariableDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrowFunction))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.FunctionDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.InterfaceDeclaration))) {
-        return true;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.TypeAliasDeclaration))) {
-        return true;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.EnumDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ModuleDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrayLiteralExpression))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ObjectLiteralExpression))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.BindingElement))) {
-        return false;
-    }
-    throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
+function getIsIsolatedModules(...exportedDeclarationNodes) {
+    return exportedDeclarationNodes
+        .map((exportedDeclarationNode) => {
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ClassDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.VariableDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrowFunction))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.FunctionDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.InterfaceDeclaration))) {
+            return true;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.TypeAliasDeclaration))) {
+            return true;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.EnumDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ModuleDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrayLiteralExpression))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ObjectLiteralExpression))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.BindingElement))) {
+            return false;
+        }
+        throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
+    })
+        .some(Boolean);
 }
 
 function getRefineIgnorePath(filePath) {
@@ -450,7 +454,7 @@ async function getExportInfo(sourceFile, option, ignores) {
         return {
             identifier: getExportedName(exportedDeclaration),
             node: exportedDeclaration,
-            isIsolatedModules: getIsIsolatedModules(exportedDeclaration),
+            isIsolatedModules: getIsIsolatedModules(...exportedDeclarations),
         };
     });
     const relativeFilePath = path__default["default"].relative(myNodeFp.getDirnameSync(option.project), filePath);
diff --git a/dist/cjs/ctix.js.map b/dist/cjs/ctix.js.map
index 87c4ab80737da92b619fe58ed92f2dd111593e4f..abafc6b7dd8e2c2c273aa9aef5706bec58077e33 100644
--- a/dist/cjs/ctix.js.map
+++ b/dist/cjs/ctix.js.map
@@ -1 +1 @@
-{"version":3,"file":"ctix.js","sources":["../../src/cli/progress.ts","../../src/cli/reasoner.ts","../../src/cli/spinner.ts","../../src/tools/getRefinedFilename.ts","../../src/compilers/getExportedName.ts","../../src/compilers/getIsIsolatedModules.ts","../../src/ignores/getRefineIgnorePath.ts","../../src/ignores/getCtiIgnorePattern.ts","../../src/tools/getRelativeDepth.ts","../../src/compilers/getExportInfo.ts","../../src/ignores/isIgnored.ts","../../src/compilers/getExportInfos.ts","../../src/compilers/getTypeScriptProject.ts","../../src/configs/initialConfigLiteral.ts","../../src/tools/misc.ts","../../src/ignores/getCtiignoreFiles.ts","../../src/ignores/getGitignoreFiles.ts","../../src/ignores/getNpmignoreFiles.ts","../../src/ignores/getIgnoreConfigContents.ts","../../src/ignores/getIgnoreConfigFiles.ts","../../src/ignores/defaultIgnore.ts","../../src/modules/getDescendantExportInfo.ts","../../src/tools/appendDotDirPrefix.ts","../../src/tools/extensions.ts","../../src/tools/getExtname.ts","../../src/modules/getFilePathOnIndex.ts","../../src/modules/createDescendantIndex.ts","../../src/modules/createIndexInfo.ts","../../src/modules/getDirPaths.ts","../../src/modules/mergeCreateIndexInfo.ts","../../src/modules/createIndexInfos.ts","../../src/modules/getRemoveFiles.ts","../../src/writes/getOutputDir.ts","../../src/modules/singleIndexInfo.ts","../../src/modules/singleIndexInfos.ts","../../src/validations/validateExportDuplication.ts","../../src/validations/validateFileNameDuplication.ts","../../src/writes/prettierApply.ts","../../src/writes/indexFileWrite.ts","../../src/ctix.ts"],"sourcesContent":["import TStreamType from '@configs/interfaces/TStreamType';\nimport chalk from 'chalk';\nimport { SingleBar } from 'cli-progress';\n\nclass CtixProgress {\n  #bar: SingleBar;\n\n  #stream: TStreamType;\n\n  #isEnable: boolean;\n\n  constructor() {\n    this.#bar = new SingleBar({\n      format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n      barCompleteChar: '\\u25A0',\n      barIncompleteChar: ' ',\n      stopOnComplete: true,\n      barsize: 40,\n      stream: process.stdout,\n    });\n\n    this.#stream = 'stdout';\n\n    this.#isEnable = false;\n  }\n\n  set stream(value: TStreamType) {\n    if (value === 'stderr' && this.#stream === 'stdout') {\n      this.#bar.stop();\n\n      this.#bar = new SingleBar({\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n        barCompleteChar: '\\u25A0',\n        barIncompleteChar: ' ',\n        stopOnComplete: true,\n        barsize: 40,\n        stream: process.stderr,\n      });\n\n      this.#stream = 'stderr';\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\n      this.#bar.stop();\n\n      this.#bar = new SingleBar({\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n        barCompleteChar: '\\u25A0',\n        barIncompleteChar: ' ',\n        stopOnComplete: true,\n        barsize: 40,\n        stream: process.stdout,\n      });\n\n      this.#stream = 'stdout';\n    }\n  }\n\n  get isEnable() {\n    return this.#isEnable;\n  }\n\n  set isEnable(value) {\n    this.#isEnable = value;\n  }\n\n  start(max: number, initial: number) {\n    if (this.#isEnable) {\n      this.#bar.start(max, initial);\n    }\n  }\n\n  increment() {\n    if (this.#isEnable) {\n      this.#bar.increment();\n    }\n  }\n\n  update(current: number) {\n    if (this.#isEnable) {\n      this.#bar.update(current);\n    }\n  }\n\n  stop() {\n    this.#bar.stop();\n  }\n}\n\nconst progress = new CtixProgress();\n\nexport default progress;\n","/* eslint-disable no-console */\nimport IReason from '@cli/interfaces/IReason';\nimport TStreamType from '@configs/interfaces/TStreamType';\nimport chalk from 'chalk';\nimport { isEmpty, isFalse, sleep as sleepMs } from 'my-easy-fp';\nimport * as path from 'path';\n\nclass CtixReasoner {\n  #isEnable: boolean;\n\n  #stream: TStreamType;\n\n  #streamWrite: typeof console.log;\n\n  constructor() {\n    this.#isEnable = false;\n    this.#streamWrite = console.error;\n    this.#stream = 'stderr';\n  }\n\n  set stream(value: TStreamType) {\n    if (value === 'stderr' && this.#stream === 'stdout') {\n      this.#streamWrite = console.error;\n      this.#stream = 'stderr';\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\n      this.#streamWrite = console.log;\n      this.#stream = 'stdout';\n    }\n  }\n\n  get isEnable() {\n    return this.#isEnable;\n  }\n\n  set isEnable(value) {\n    this.#isEnable = value;\n  }\n\n  async sleep(ms: number): Promise<void> {\n    if (this.#isEnable) {\n      await sleepMs(ms);\n    }\n  }\n\n  space(): void {\n    if (isFalse(this.#isEnable)) {\n      return;\n    }\n\n    this.#streamWrite('');\n  }\n\n  start(reasons: IReason[]): void {\n    if (isFalse(this.#isEnable)) {\n      return;\n    }\n\n    this.#streamWrite('');\n\n    reasons.forEach((reason) => {\n      const typeMessage =\n        reason.type === 'error'\n          ? chalk.bgRed(`   ${reason.type.toUpperCase()}   `)\n          : chalk.bgYellow(`   ${reason.type.toUpperCase()}    `);\n\n      const { filePath } = reason;\n\n      const filename = isEmpty(reason.lineAndCharacter)\n        ? `${path.basename(filePath)}`\n        : `${path.basename(filePath)}:${reason.lineAndCharacter.line}:${\n            reason.lineAndCharacter.character\n          }`;\n\n      const chevronRight = reason.type === 'error' ? chalk.red('>') : chalk.yellow('>');\n\n      this.#streamWrite(typeMessage, filename);\n\n      if (isEmpty(reason.lineAndCharacter)) {\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(`${filePath}`)}`);\n      } else {\n        this.#streamWrite(\n          `   ${chevronRight} ${chalk.gray(\n            `${filePath}:${reason.lineAndCharacter.line}:${reason.lineAndCharacter.character}`,\n          )}`,\n        );\n      }\n      reason.message.split('\\n').forEach((splittedMessage) => {\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(splittedMessage.trim())}`);\n      });\n\n      this.#streamWrite('');\n    });\n  }\n}\n\nconst reasoner = new CtixReasoner();\n\nexport default reasoner;\n","import TStreamType from '@configs/interfaces/TStreamType';\nimport { isNotEmpty } from 'my-easy-fp';\nimport ora from 'ora';\n\nclass CtixSpinner {\n  #spinner: ora.Ora;\n\n  #stream: TStreamType;\n\n  #isEnable: boolean;\n\n  constructor() {\n    this.#spinner = ora({ text: '', stream: process.stdout });\n    this.#isEnable = false;\n    this.#stream = 'stdout';\n  }\n\n  set stream(value: TStreamType) {\n    if (value === 'stderr' && this.#stream === 'stdout') {\n      this.#spinner.stop();\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stderr });\n\n      this.#stream = 'stderr';\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\n      this.#spinner.stop();\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stdout });\n\n      this.#stream = 'stdout';\n    }\n  }\n\n  get isEnable() {\n    return this.#isEnable;\n  }\n\n  set isEnable(value) {\n    this.#isEnable = value;\n  }\n\n  start(message?: string) {\n    if (this.#isEnable && isNotEmpty(message)) {\n      this.#spinner.text = message;\n      this.#spinner.start();\n    } else if (this.#isEnable) {\n      this.#spinner.start();\n    }\n  }\n\n  update(message: string) {\n    if (this.#isEnable) {\n      this.#spinner.text = message;\n    }\n  }\n\n  stop() {\n    this.#spinner.stopAndPersist();\n  }\n}\n\nconst spinner = new CtixSpinner();\n\nexport default spinner;\n","import { camelCase } from 'change-case';\nimport path from 'path';\nimport { upperCaseFirst } from 'upper-case-first';\n\nexport default function getRefinedFilename(filename: string): string {\n  const basename = path.basename(filename, path.extname(filename));\n\n  if (/^([A-Z])(.+)/.test(basename)) {\n    return upperCaseFirst(camelCase(basename));\n  }\n\n  return camelCase(basename);\n}\n","import getRefinedFilename from '@tools/getRefinedFilename';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\n\nexport default function getExportedName(exportedDeclarationNode: tsm.ExportedDeclarations): string {\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\n    const classDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ClassDeclaration,\n    );\n\n    return classDeclarationNode.getNameOrThrow().toString();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\n    const variableDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.VariableDeclaration,\n    );\n    return variableDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\n    const arrowFunctionNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.ArrowFunction);\n    const name = arrowFunctionNode.getSymbolOrThrow().getEscapedName();\n\n    if (name === '__function') {\n      const sourceFile = arrowFunctionNode.getSourceFile();\n      const filename = sourceFile.getBaseName();\n      const basename = getRefinedFilename(filename);\n      return basename;\n    }\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\n    const functionDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.FunctionDeclaration,\n    );\n\n    const name = functionDeclarationNode.getName();\n\n    if (isEmpty(name)) {\n      const sourceFile = functionDeclarationNode.getSourceFile();\n      const filename = sourceFile.getBaseName();\n      const basename = getRefinedFilename(filename);\n      return basename;\n    }\n\n    return functionDeclarationNode.getNameOrThrow().toString();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\n    const interfaceDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.InterfaceDeclaration,\n    );\n    return interfaceDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\n    const typeAliasDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.TypeAliasDeclaration,\n    );\n    return typeAliasDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\n    const enumDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.EnumDeclaration,\n    );\n    return enumDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\n    const moduleDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ModuleDeclaration,\n    );\n    return moduleDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\n    const arrayLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ArrayLiteralExpression,\n    );\n\n    const sourceFile = arrayLiteralExpressionNode.getSourceFile();\n    const filename = sourceFile.getBaseName();\n    const basename = getRefinedFilename(filename);\n    return basename;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\n    const objectLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ObjectLiteralExpression,\n    );\n\n    const sourceFile = objectLiteralExpressionNode.getSourceFile();\n    const filename = sourceFile.getBaseName();\n    const basename = getRefinedFilename(filename);\n    return basename;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\n    const bindingElementNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.BindingElement);\n    return bindingElementNode.getName();\n  }\n\n  throw new Error(\n    `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\n  );\n}\n","import { isNotEmpty } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\n\nexport default function getIsIsolatedModules(\n  exportedDeclarationNode: tsm.ExportedDeclarations,\n): boolean {\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\n    return true;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\n    return true;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\n    return false;\n  }\n\n  throw new Error(\n    `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\n  );\n}\n","import os from 'os';\n\nexport default function getRefineIgnorePath(filePath: string): string {\n  if (os.platform() === 'win32') {\n    const matched = /^([a-zA-Z]:)(\\/|)(.+)$/.exec(filePath.trim());\n    if (matched === null || matched === undefined || matched.length < 4) {\n      return filePath.startsWith('/') ? filePath.substring(1) : filePath;\n    }\n    return matched[3];\n  }\n\n  return filePath.startsWith('/') ? filePath.substring(1) : filePath;\n}\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default function getCtiIgnorePattern(\n  ig: AsyncReturnType<typeof getIgnoreConfigContents>,\n  filePath: string,\n) {\n  // stage 00. refine filePath\n  const refinedFilePath = getRefineIgnorePath(filePath);\n\n  // stage 03. check ctiignore, if match partial return false\n  // ignores function cache match result, so full-match create cache that is enhance performance\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\n  if (ig.cti.ignores(refinedFilePath)) {\n    const detailIgnoreds = ig.data.cti.withValue\n      .map((withValue) => ({\n        ignored: withValue.ignore.ignores(refinedFilePath),\n        pattern: withValue.pattern,\n      }))\n      .filter((ignored) => ignored.ignored);\n\n    // detailIgnoreds가 1개 이상이라면 사실 ignore 파일 설계가 잘못된 것이라서 warning을 해주는게 필요하다\n    return detailIgnoreds.at(0)?.pattern;\n  }\n\n  return undefined;\n}\n","import { isEmpty } from 'my-easy-fp';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nexport default function getRelativeDepth(basePaths: string | string[], dirPath: string) {\n  const basePath = typeof basePaths === 'string' ? basePaths : basePaths.at(0);\n\n  if (isEmpty(basePath)) {\n    throw new Error('[getRelativeDepth] basePaths is empty array');\n  }\n\n  const relativePath = replaceSepToPosix(\n    path.relative(replaceSepToPosix(basePath), replaceSepToPosix(dirPath)),\n  );\n\n  if (relativePath === '') {\n    return 0;\n  }\n\n  if (relativePath === '.') {\n    return 0;\n  }\n\n  const depth = relativePath.split(path.posix.sep);\n  return depth.length;\n}\n","import getExportedName from '@compilers/getExportedName';\nimport getIsIsolatedModules from '@compilers/getIsIsolatedModules';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getCtiIgnorePattern from '@ignores/getCtiIgnorePattern';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\nimport { getDirname, getDirnameSync, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\nimport { AsyncReturnType } from 'type-fest';\n\nfunction getFirstExportName(exportedDeclarations: tsm.ExportedDeclarations[]): string {\n  const [exportedDeclaration] = exportedDeclarations;\n  const exportedName = getExportedName(exportedDeclaration);\n  return exportedName;\n}\n\nfunction isStarExport(ignoreInFile?: string | string[]) {\n  if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\n    return false;\n  }\n\n  if (Array.isArray(ignoreInFile) && ignoreInFile.length <= 0) {\n    return true;\n  }\n\n  return isEmpty(ignoreInFile);\n}\n\nexport default async function getExportInfo(\n  sourceFile: tsm.SourceFile,\n  option: TCreateOrSingleOption,\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n): Promise<IExportInfo> {\n  const filePath = sourceFile.getFilePath().toString();\n  const dirPath = replaceSepToPosix(path.resolve(await getDirname(filePath)));\n  const ignoreInFile = getCtiIgnorePattern(ignores, filePath);\n  const exportedDeclarationsMap = sourceFile.getExportedDeclarations();\n  const defaultExportedDeclarations = exportedDeclarationsMap.get('default')?.at(0);\n  const defaultExportedName = isNotEmpty(defaultExportedDeclarations)\n    ? {\n        identifier: getExportedName(defaultExportedDeclarations),\n        node: defaultExportedDeclarations,\n        isIsolatedModules: getIsIsolatedModules(defaultExportedDeclarations),\n      }\n    : undefined;\n\n  const namedExports = Array.from(exportedDeclarationsMap.entries())\n    .filter(([identifier]) => identifier !== 'default')\n    .filter((exportedDeclarationsWithKey) => {\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\n\n      if (typeof ignoreInFile === 'string') {\n        if (ignoreInFile === '*') {\n          return false;\n        }\n\n        const [firstNode] = exportedDeclarations;\n        const name = getExportedName(firstNode);\n        return ignoreInFile !== name;\n      }\n\n      if (\n        Array.isArray(ignoreInFile) &&\n        ignoreInFile.length > 0 &&\n        typeof ignoreInFile[0] === 'string'\n      ) {\n        const name = getFirstExportName(exportedDeclarations);\n        return isFalse(ignoreInFile.includes(name));\n      }\n\n      return isEmpty(ignoreInFile);\n    })\n    .map((exportedDeclarationsWithKey) => {\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\n      const [exportedDeclaration] = exportedDeclarations;\n      return {\n        identifier: getExportedName(exportedDeclaration),\n        node: exportedDeclaration,\n        isIsolatedModules: getIsIsolatedModules(exportedDeclaration),\n      };\n    });\n\n  const relativeFilePath = path.relative(getDirnameSync(option.project), filePath);\n  const defaultExport =\n    isNotEmpty(defaultExportedName) &&\n    isFalse((ignoreInFile ?? []).includes(defaultExportedName.identifier))\n      ? defaultExportedName\n      : undefined;\n\n  const exportInfo: IExportInfo = {\n    isEmpty: isEmpty(defaultExport) && namedExports.length <= 0,\n    resolvedFilePath: replaceSepToPosix(path.resolve(filePath)),\n    resolvedDirPath: dirPath,\n    relativeFilePath: replaceSepToPosix(relativeFilePath),\n    depth: getRelativeDepth(option.startAt, dirPath),\n    starExported: isStarExport(ignoreInFile),\n    defaultExport,\n    namedExports,\n  };\n\n  return exportInfo;\n}\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\nimport minimatch from 'minimatch';\nimport { isFalse } from 'my-easy-fp';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default function isIgnored(\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  filePath: string,\n) {\n  // stage 00. refine filePath\n  const refinedFilePath = getRefineIgnorePath(filePath);\n\n  // stage 01. check gitignore\n  if (ignores.git.ignores(refinedFilePath)) {\n    return true;\n  }\n\n  // stage 02. check npmignore\n  if (ignores.npm.map((pattern) => minimatch(filePath, pattern)).some((match) => match)) {\n    return true;\n  }\n\n  // stage 03. check ctiignore, if match partial return false\n  // ignores function cache match result, so full-match create cache that is enhance performance\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\n  if (ignores.cti.ignores(refinedFilePath)) {\n    const detailIgnoreds = ignores.data.cti.withValue\n      .map((withValue) => ({\n        ignored: withValue.ignore.ignores(refinedFilePath),\n        pattern: withValue.pattern,\n      }))\n      .filter((ignored) => ignored.ignored);\n\n    return isFalse(detailIgnoreds.some((ignored) => ignored.pattern !== '*'));\n  }\n\n  return false;\n}\n","import getExportInfo from '@compilers/getExportInfo';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport isIgnored from '@ignores/isIgnored';\nimport { isEmpty, isFalse } from 'my-easy-fp';\nimport { isDescendant } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function getExportInfos(\n  project: tsm.Project,\n  option: TCreateOrSingleOption,\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n) {\n  const sourceFiles = project\n    .getSourceFiles()\n    .filter((sourceFile) =>\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\n    )\n    .filter(\n      (sourceFile) => path.basename(sourceFile.getFilePath().toString()) !== option.exportFilename,\n    )\n    .filter((sourceFile) => isFalse(isIgnored(ignores, sourceFile.getFilePath().toString())));\n\n  const exportInfos = (\n    await Promise.all(sourceFiles.map((sourceFile) => getExportInfo(sourceFile, option, ignores)))\n  ).filter((exportInfo) => isFalse(exportInfo.isEmpty));\n\n  const exportRecord = exportInfos.reduce<Record<string, IExportInfo>>(\n    (aggregation, exportInfo) => {\n      if (isEmpty(aggregation[exportInfo.resolvedFilePath])) {\n        return { ...aggregation, [exportInfo.resolvedFilePath]: exportInfo };\n      }\n\n      return aggregation;\n    },\n    {},\n  );\n\n  return Object.values(exportRecord);\n}\n","import * as tsm from 'ts-morph';\n\n/**\n * @param param.tsconfig\n * @param param.ignore\n * @returns\n */\nexport default function getTypeScriptProject(projectPath: string): tsm.Project {\n  // Exclude exclude file in .ctiignore file: more exclude progress\n  const project = new tsm.Project({ tsConfigFilePath: projectPath });\n  return project;\n}\n","const initialConfigLiteral = `{\n  // common configuration\n  // tsconfig.json path: you must pass path with filename, like this \"./tsconfig.json\"\n  \"project\": \"\",\n  \n  // Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"\n  \"exportFilename\": \"index.ts\",\n\n\n  // create, single command configuration\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\n  \"useSemicolon\": true,\n\n  // timestamp write on ctix comment right-side, only works in useComment option set true\n  \"useTimestamp\": false,\n  \n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\n  \"useComment\": false,\n\n  // quote mark \" or '\n  \"quote\": \"'\",\n  // overwrite index.ts file also index.ts file already exist that create backup file\n  \"overwrite\": false,\n  // keep file extension in export statement path\n  \"keepFileExt\": false,\n\n  \n  // only create command configuration\n  // If set true this option, skip empty directory\n  \"skipEmptyDir\": true,\n\n\n  // only single command configuration\n  // Output directory. It works only single mode.\n  \"output\": \"\",\n  // Use rootDir or rootDirs configuration in tsconfig.json.\n  \"useRootDir\": true,\n\n  // only remove command configuration\n  // remove with backup file\n  \"includeBackup\": true\n}`;\n\nexport default initialConfigLiteral;\n","import fastGlob from 'fast-glob';\nimport fastSafeStringify from 'fast-safe-stringify';\nimport { isNotEmpty } from 'my-easy-fp';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport * as path from 'path';\nimport * as tsm from 'ts-morph';\n\nexport function posixJoin(...args: string[]): string {\n  return replaceSepToPosix(path.join(...args));\n}\n\nexport async function fastGlobWrap(\n  pattern: string | string[],\n  options: Parameters<typeof fastGlob>[1],\n  sep?: string,\n) {\n  const patterns = Array.isArray(pattern) ? pattern : [pattern];\n  const unixifyPatterns = patterns.map((nonUnixifyPattern) => replaceSepToPosix(nonUnixifyPattern));\n  const unixifyFiles = await fastGlob(unixifyPatterns, options);\n  const files = isNotEmpty(sep)\n    ? unixifyFiles.map((file) => file.replace(/\\//g, sep))\n    : unixifyFiles;\n  return files;\n}\n\nexport function getTestValue<T>(testData: T) {\n  const stringifiedString = fastSafeStringify(\n    testData,\n    (_key, value) => {\n      if (value === '[Circular]') {\n        return undefined;\n      }\n\n      if (value instanceof tsm.Node) {\n        return undefined;\n      }\n\n      return value;\n    },\n    2,\n  );\n\n  return JSON.parse(stringifiedString);\n}\n","import getRefineIgnorePath from '@ignores/getRefineIgnorePath';\nimport IGetIgnoredConfigContents from '@ignores/interfaces/IGetIgnoredConfigContents';\nimport { posixJoin } from '@tools/misc';\nimport fs from 'fs';\nimport ignore, { Ignore } from 'ignore';\nimport { parse } from 'jsonc-parser';\nimport { isFalse } from 'my-easy-fp';\nimport { exists } from 'my-node-fp';\nimport path from 'path';\n\ntype TWithValue = Array<{ filePath: string; ignore: Ignore; pattern: string | string[] }>;\n\ninterface IGetCtiignoreFilesReturn {\n  origin: IGetIgnoredConfigContents;\n  ignore: Ignore;\n  withValue: TWithValue;\n}\n\nexport default async function getCtiignoreFiles(\n  cwd: string,\n  filePath: string,\n): Promise<IGetCtiignoreFilesReturn> {\n  try {\n    if (isFalse(await exists(filePath))) {\n      throw new Error(`invalid ignore filePath: ${filePath}`);\n    }\n\n    const fileBuf = await fs.promises.readFile(filePath);\n    const ignoreFiles: IGetIgnoredConfigContents = parse(fileBuf.toString());\n    const ig: IGetCtiignoreFilesReturn = { origin: ignoreFiles, ignore: ignore(), withValue: [] };\n\n    ig.ignore.add(\n      Object.keys(ignoreFiles)\n        .map((ignoreFile) =>\n          path.isAbsolute(ignoreFile) ? ignoreFile : posixJoin(cwd, ignoreFile),\n        )\n        .map((pattern) => getRefineIgnorePath(pattern)),\n    );\n\n    ig.withValue = Object.entries(ignoreFiles).map((ignoreFile) => {\n      const [ignoreFilePathKey, pattern] = ignoreFile;\n      const subIgnore = ignore().add(\n        [ignoreFilePathKey]\n          .map((filePathKey) =>\n            path.isAbsolute(filePathKey) ? filePathKey : posixJoin(cwd, filePathKey),\n          )\n          .map((filePathKey) => getRefineIgnorePath(filePathKey)),\n      );\n\n      return { ignore: subIgnore, filePath: ignoreFilePathKey, pattern };\n    });\n\n    return ig;\n  } catch {\n    return { origin: {}, ignore: ignore(), withValue: [] };\n  }\n}\n","import { posixJoin } from '@tools/misc';\nimport fs from 'fs';\nimport ignore, { Ignore } from 'ignore';\nimport { isFalse } from 'my-easy-fp';\nimport { exists, getDirname } from 'my-node-fp';\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\nimport getRefineIgnorePath from './getRefineIgnorePath';\n\nexport default async function getGitignoreFiles(\n  filePath: string,\n): Promise<{ patterns: string[]; state?: gitignore.State; ignore: Ignore }> {\n  try {\n    if (isFalse(await exists(filePath))) {\n      throw new Error('invalid .gitignore filepath');\n    }\n\n    const fileBuf = await fs.promises.readFile(filePath);\n    const dirPath = await getDirname(filePath);\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\n    const ig: { patterns: string[]; parsed: gitignore.State; ignore: Ignore } = {\n      parsed: parsedIgnoreFile,\n      patterns: parsedIgnoreFile.patterns,\n      ignore: ignore(),\n    };\n\n    ig.ignore.add(\n      parsedIgnoreFile.patterns\n        .map((pattern) => posixJoin(dirPath, pattern))\n        .map((pattern) => getRefineIgnorePath(pattern)),\n    );\n\n    return ig;\n  } catch {\n    return { patterns: [], state: undefined, ignore: ignore() };\n  }\n}\n","import { posixJoin } from '@tools/misc';\nimport fs from 'fs';\nimport { isFalse } from 'my-easy-fp';\nimport { exists, getDirname } from 'my-node-fp';\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\nimport path from 'path';\n\nexport default async function getNpmignoreFiles(\n  filePath: string,\n): Promise<{ patterns: string[]; origin: string[]; state?: gitignore.State }> {\n  try {\n    if (isFalse(await exists(filePath))) {\n      return { patterns: [], origin: [], state: undefined };\n    }\n\n    const fileBuf = await fs.promises.readFile(filePath);\n    const dirPath = await getDirname(filePath);\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\n    const patterns = parsedIgnoreFile.patterns.map((pattern) =>\n      path.isAbsolute(pattern) ? pattern : posixJoin(dirPath, pattern),\n    );\n\n    return { patterns, origin: parsedIgnoreFile.patterns, state: parsedIgnoreFile };\n  } catch {\n    return { patterns: [], origin: [], state: undefined };\n  }\n}\n","import getCtiignoreFiles from '@ignores/getCtiignoreFiles';\nimport getGitignoreFiles from '@ignores/getGitignoreFiles';\nimport type { IGetIgnoreConfigFiles } from '@ignores/getIgnoreConfigFiles';\nimport getNpmignoreFiles from '@ignores/getNpmignoreFiles';\nimport { Ignore } from 'ignore';\nimport { AsyncReturnType } from 'type-fest';\n\ninterface IGetIgnoreConfigContentsReturn {\n  git: Ignore;\n  cti: Ignore;\n  npm: string[];\n\n  data: {\n    git: AsyncReturnType<typeof getGitignoreFiles>;\n    npm: AsyncReturnType<typeof getNpmignoreFiles>;\n    cti: AsyncReturnType<typeof getCtiignoreFiles>;\n  };\n}\n\nexport default async function getIgnoreConfigContents({\n  git,\n  npm,\n  cti,\n  cwd,\n}: IGetIgnoreConfigFiles & { cwd: string }): Promise<IGetIgnoreConfigContentsReturn> {\n  const gitignoreRecord = await getGitignoreFiles(git);\n  const npmignoreRecord = await getNpmignoreFiles(npm);\n  const ctiignoreRecord = await getCtiignoreFiles(cwd, cti);\n\n  return {\n    git: gitignoreRecord.ignore,\n    cti: ctiignoreRecord.ignore,\n    npm: npmignoreRecord.patterns,\n\n    data: {\n      git: gitignoreRecord,\n      cti: ctiignoreRecord,\n      npm: npmignoreRecord,\n    },\n  };\n}\n","import { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nexport interface IGetIgnoreConfigFiles {\n  git: string;\n  cti: string;\n  npm: string;\n}\n\n/**\n * extract create-ts-index ignore file by glob pattern in cwd(current working directory)\n *\n * @param cwd current working directory\n * @returns return value is eithered. string array or error class.\n */\nexport default async function getIgnoreConfigFiles(\n  cwd: string,\n  ignoreFilePath: string,\n): Promise<IGetIgnoreConfigFiles> {\n  const resolvedCWD = path.resolve(cwd); // absolute path\n\n  // create gitignore glob pattern\n  const gitignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.gitignore'));\n\n  // create npmignore glob pattern\n  const npmignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.npmignore'));\n\n  // create ctiignore glob pattern\n  const ctiignorePattern = ignoreFilePath;\n\n  // ctiignore file have dot charactor at file first so set true dot flag\n  const ignoreFiles = {\n    git: gitignorePattern,\n    cti: ctiignorePattern,\n    npm: npmignorePattern,\n  };\n\n  return ignoreFiles;\n}\n","const defaultIgnore = ['**/node_modules', '**/flow-typed', '**/coverage', '**/.git'];\n\nexport default defaultIgnore;\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport defaultIgnore from '@ignores/defaultIgnore';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport isIgnored from '@ignores/isIgnored';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\nimport { posixJoin } from '@tools/misc';\nimport fastGlob from 'fast-glob';\nimport fs from 'fs';\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\nimport { getDirname, isEmptyDir, replaceSepToPosix } from 'my-node-fp';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function getDescendantExportInfo(\n  parentFilePath: string,\n  option: TCreateOrSingleOption,\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n): Promise<IDescendantExportInfo[]> {\n  const filePath = replaceSepToPosix(parentFilePath);\n  const globPattern = replaceSepToPosix(posixJoin(await getDirname(filePath), '**', '*'));\n\n  const unIgnoredDirPaths = await fastGlob(globPattern, {\n    ignore: defaultIgnore,\n    dot: true,\n    onlyDirectories: true,\n  });\n\n  const dirPaths = unIgnoredDirPaths.filter((dirPath) => isFalse(isIgnored(ignores, dirPath)));\n\n  const parentExportInfo = exportInfos.filter(\n    (exportInfo) => exportInfo.resolvedDirPath === filePath,\n  );\n  const descendants = await Promise.all(\n    dirPaths.map(async (globDirPath) => {\n      const includeExportInfos = exportInfos\n        .filter((exportInfo) => exportInfo.resolvedDirPath === globDirPath)\n        .filter((exportInfo) => {\n          const ignoreInFile = ignores[exportInfo.resolvedFilePath];\n          const namedExportIdentifiers = exportInfo.namedExports.map(\n            (namedExport) => namedExport.identifier,\n          );\n\n          if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\n            return false;\n          }\n\n          if (\n            typeof ignoreInFile === 'string' &&\n            ignoreInFile === exportInfo.defaultExport?.identifier &&\n            namedExportIdentifiers.length <= 0\n          ) {\n            return false;\n          }\n\n          if (\n            isNotEmpty(exportInfo.defaultExport?.identifier) &&\n            ignoreInFile !== exportInfo.defaultExport?.identifier\n          ) {\n            return true;\n          }\n\n          if (namedExportIdentifiers.length > 0) {\n            return true;\n          }\n\n          return isEmpty(ignoreInFile);\n        });\n\n      const includeDirFilePaths = await fs.promises.readdir(globDirPath, { withFileTypes: true });\n\n      return {\n        dirPath: globDirPath,\n        isTerminal: isFalse(\n          includeDirFilePaths.some((includeDirFilePath) => includeDirFilePath.isDirectory()),\n        ),\n        depth: getRelativeDepth(option.startAt, globDirPath),\n        exportInfos: includeExportInfos,\n      };\n    }),\n  );\n\n  const sortedDescendents = [\n    {\n      dirPath: filePath,\n      isTerminal: await isEmptyDir(filePath),\n      depth: getRelativeDepth(option.startAt, filePath),\n      exportInfos: parentExportInfo,\n    },\n    ...descendants,\n  ].sort((l, r) => {\n    const depthDiff = l.depth - r.depth;\n\n    if (depthDiff !== 0) {\n      return depthDiff;\n    }\n\n    return l.dirPath.localeCompare(r.dirPath);\n  });\n\n  return sortedDescendents;\n}\n","import path from 'path';\n\nexport default function appendDotDirPrefix(filePath: string, sep?: string): string {\n  const pathSep = sep ?? path.sep;\n\n  if (filePath.startsWith('.')) {\n    return filePath;\n  }\n\n  if (filePath === '') {\n    return `.${pathSep}`;\n  }\n\n  return `.${pathSep}${filePath}`;\n}\n","/*\n// valid ext\n// '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\n\n  from checker.js\n  src/compiler/checker.ts:\n  src/compiler/checker.ts:            [\".mts\", \".mjs\"],\n\n  tests/baselines/reference/declarationEmitInvalidReferenceAllowJs.errors.txt:\n  tests/cases/compiler/declarationEmitInvalidReferenceAllowJs.ts(1,22): \n  error TS6231: Could not resolve the path 'tests/cases/compiler/invalid' with the extensions: \n  '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\n */\n\nconst extensions = ['.ts', '.tsx', '.d.ts', '.cts', '.d.cts', '.mts', '.d.mts'];\n\nexport default extensions;\n","import extensions from '@tools/extensions';\nimport { isFalse } from 'my-easy-fp';\nimport path from 'path';\n\nexport default function getExtname(filePath: string): string {\n  if (extensions.every((extension) => isFalse(filePath.endsWith(extension)))) {\n    return path.extname(filePath);\n  }\n\n  if (filePath.endsWith('.d.ts')) {\n    return '.d.ts';\n  }\n\n  if (filePath.endsWith('.d.cts')) {\n    return '.d.cts';\n  }\n\n  if (filePath.endsWith('.d.mts')) {\n    return '.d.mts';\n  }\n\n  return path.extname(filePath);\n}\n","import { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\nimport extensions from '@tools/extensions';\nimport getExtname from '@tools/getExtname';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nfunction isKeepExt({\n  relativePath,\n  declareExtensions,\n  extname,\n  isIndex,\n}: {\n  relativePath?: string;\n  declareExtensions: string[];\n  extname: string;\n  isIndex: boolean;\n}) {\n  if (isNotEmpty(relativePath) && declareExtensions.includes(extname)) {\n    return true;\n  }\n\n  if (isNotEmpty(relativePath) && isIndex && extname === '.tsx') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getRelativePath(filePath: string, option: TCreateOrSingleOption, relativePath?: string) {\n  const declareExtensions = extensions.filter((ext) => ext.startsWith('.d'));\n  const extname = getExtname(filePath);\n  const basename = path.basename(filePath, extname);\n  const isIndex = basename.endsWith('index');\n\n  if (isKeepExt({ relativePath, declareExtensions, extname, isIndex })) {\n    if (isEmpty(relativePath)) {\n      throw new Error(`empty path: ${relativePath}`);\n    }\n\n    const relativeDirPath = replaceSepToPosix(\n      path.posix.relative(relativePath, path.dirname(filePath)),\n    );\n    const exportPath = `${basename}${extname}`;\n    const relativeDirPathWithDot = appendDotDirPrefix(\n      path.posix.join(relativeDirPath, exportPath),\n      path.posix.sep,\n    );\n\n    return relativeDirPathWithDot;\n  }\n\n  if (isNotEmpty(relativePath) && option.keepFileExt) {\n    const relativeDirPath = replaceSepToPosix(\n      path.posix.relative(relativePath, path.dirname(filePath)),\n    );\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\n    const relativeDirPathWithDot = appendDotDirPrefix(\n      path.posix.join(relativeDirPath, exportPath),\n      path.posix.sep,\n    );\n\n    return relativeDirPathWithDot;\n  }\n\n  if (isNotEmpty(relativePath)) {\n    const relativeDirPath = replaceSepToPosix(\n      path.posix.relative(relativePath, path.dirname(filePath)),\n    );\n    const exportPath = isIndex ? '' : `${basename}`;\n    const relativeDirPathWithDot = appendDotDirPrefix(\n      path.posix.join(relativeDirPath, exportPath),\n      path.posix.sep,\n    );\n\n    return relativeDirPathWithDot;\n  }\n\n  if (option.keepFileExt || declareExtensions.includes(extname)) {\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\n    const basenameWithDot = appendDotDirPrefix(exportPath, path.posix.sep);\n    return basenameWithDot;\n  }\n\n  const basenameWithDot = appendDotDirPrefix(basename, path.posix.sep);\n  return basenameWithDot;\n}\n\nexport default function getFilePathOnIndex(\n  filePath: string,\n  option: TCreateOrSingleOption,\n  relativePath?: string,\n) {\n  const semicolon = option.useSemicolon ? ';' : '';\n  const relativeDirPath = getRelativePath(filePath, option, relativePath);\n  return `${option.quote}${relativeDirPath}${option.quote}${semicolon}`;\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getDescendantExportInfo from '@modules/getDescendantExportInfo';\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\nimport { isDescendant, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport { AsyncReturnType } from 'type-fest';\n\n/*\n\nb, c는 비어 있다. 그래서 a에 index.ts를 만들 때는 d, e를 바로 링크해야 한다\nb, c는 만들면 안됨\n\na/\n>> a/index.ts\n\na/b/\na/b/c/\n\na/b/c/case01.ts\n>> a/b/c/index.ts\n\na/b/c/d/e/case02.ts\na/b/c/d/e/case03.ts\n>> a/b/c/index.ts 에 들어간다\n\na/b/c/f/g/case04.ts\n>> a/b/c/index.ts 에 들어간다\n */\n\n/**\n *\n * @param dirPath base directory for extract descendant directory\n * @param exportInfos every exportInfos\n * @param option ctix option\n * @returns descendant directory index info\n */\nexport default async function createDescendantIndex(\n  dirPath: string,\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TCreateOrSingleOption,\n): Promise<ICreateIndexInfo[]> {\n  const currentDepth = getRelativeDepth(option.startAt, dirPath);\n  const everyDescendants = await getDescendantExportInfo(dirPath, option, exportInfos, ignores);\n  const sortedEveryDescendants = everyDescendants.sort((l, r) => {\n    const depthDiff = l.depth - r.depth;\n    return depthDiff !== 0 ? depthDiff : r.dirPath.localeCompare(l.dirPath);\n  });\n\n  if (option.mode === 'create' && option.skipEmptyDir) {\n    const currentDirExportInfos = exportInfos.filter(\n      (exportInfo) => exportInfo.resolvedDirPath === dirPath,\n    );\n\n    // 내가 비어있으면 스킵\n    // top level 이라면, 비어 있더라도 index를 빌드해야 한다\n    // self directory is empty that will be skip\n    // If currentDepth is top level of depth that have to build index\n    if (currentDirExportInfos.length <= 0 && currentDepth !== 0) {\n      return [];\n    }\n\n    const indexNeedExportInfos = sortedEveryDescendants\n      .filter((descendent) => descendent.dirPath !== dirPath)\n      .reduce<Record<string, IDescendantExportInfo>>((aggregation, sortedEveryDescendant) => {\n        const alreadyRegisteredDirPaths = Object.keys(aggregation);\n\n        if (\n          alreadyRegisteredDirPaths.some((alreadyRegisteredDirPath) =>\n            isDescendant(alreadyRegisteredDirPath, sortedEveryDescendant.dirPath, path.posix.sep),\n          )\n        ) {\n          return aggregation;\n        }\n\n        if (sortedEveryDescendant.exportInfos.length <= 0) {\n          return aggregation;\n        }\n\n        return { ...aggregation, [sortedEveryDescendant.dirPath]: sortedEveryDescendant };\n      }, {});\n\n    const descendantIndexInfos = Object.values(indexNeedExportInfos).map((indexNeedExportInfo) => {\n      const filePath = getFilePathOnIndex(indexNeedExportInfo.dirPath, option, dirPath);\n\n      return {\n        depth: currentDepth,\n        resolvedDirPath: dirPath,\n        resolvedFilePath: undefined,\n        exportStatement: `export * from ${filePath}`,\n      };\n    }, {});\n\n    return descendantIndexInfos;\n  }\n\n  const descendantIndexInfos = everyDescendants\n    .filter((everyDescendant) => everyDescendant.depth === currentDepth + 1)\n    .map((exportedDescendant) => {\n      const filePath = getFilePathOnIndex(exportedDescendant.dirPath, option, dirPath);\n\n      return {\n        depth: currentDepth,\n        resolvedDirPath: replaceSepToPosix(dirPath),\n        resolvedFilePath: undefined,\n        exportStatement: `export * from ${filePath}`,\n      };\n    });\n\n  return descendantIndexInfos;\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport { getDirnameSync } from 'my-node-fp';\n\nexport default function createIndexInfo(\n  exportInfo: IExportInfo,\n  option: TCreateOrSingleOption,\n): ICreateIndexInfo[] {\n  if (\n    exportInfo.starExported &&\n    isNotEmpty(exportInfo.defaultExport) &&\n    exportInfo.namedExports.length > 0\n  ) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export * from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export * from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  return [];\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport defaultIgnore from '@ignores/defaultIgnore';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport isIgnored from '@ignores/isIgnored';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport { posixJoin } from '@tools/misc';\nimport fastGlob from 'fast-glob';\nimport { isFalse } from 'my-easy-fp';\nimport { startSepRemove } from 'my-node-fp';\nimport path from 'path';\nimport { AsyncReturnType } from 'type-fest';\n\n/**\n *\n * @param exportInfos\n * @param ignores\n * @param option\n * @returns\n */\nexport default async function getDirPaths(\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TCreateOrSingleOption,\n): Promise<{ depths: Record<string, number>; dirPaths: Record<string, IExportInfo[]> }> {\n  const dirPathsFromExportInfos = await fastGlob(posixJoin(option.startAt, '**', '*'), {\n    onlyDirectories: true,\n    ignore: defaultIgnore,\n    cwd: option.startAt,\n  });\n\n  const filePaths = [option.startAt, ...dirPathsFromExportInfos].filter((dirPath) =>\n    isFalse(isIgnored(ignores, dirPath)),\n  );\n\n  const depths = filePaths.reduce<Record<string, number>>((aggregation, filePath) => {\n    return { ...aggregation, [filePath]: getRelativeDepth(option.startAt, filePath) };\n  }, {});\n\n  const dirPaths = filePaths.reduce<Record<string, IExportInfo[]>>((aggregation, filePath) => {\n    const files = exportInfos.filter((exportInfo) => {\n      return (\n        exportInfo.resolvedFilePath.indexOf(filePath) >= 0 &&\n        startSepRemove(exportInfo.resolvedFilePath.replace(filePath, ''), path.posix.sep).split(\n          path.posix.sep,\n        ).length <= 1\n      );\n    });\n\n    return { ...aggregation, [filePath]: files };\n  }, {});\n\n  return { depths, dirPaths };\n}\n","import ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport { isNotEmpty, settify } from 'my-easy-fp';\n\nexport default function mergeCreateIndexInfo(\n  origin: ICreateIndexInfos,\n  target: ICreateIndexInfos | ICreateIndexInfo,\n) {\n  const merged: ICreateIndexInfos = { ...origin };\n\n  merged.depth = target.depth;\n  merged.resolvedDirPath = target.resolvedDirPath;\n\n  if ('exportStatement' in target) {\n    merged.exportStatements = settify(\n      [...merged.exportStatements, target.exportStatement].filter(\n        (exportStatement): exportStatement is string => isNotEmpty(exportStatement),\n      ),\n    );\n\n    merged.resolvedFilePaths = settify(\n      [...(merged.resolvedFilePaths ?? []), target.resolvedFilePath].filter(\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\n      ),\n    );\n\n    merged.resolvedFilePaths =\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\n  } else {\n    merged.exportStatements = settify([\n      ...(merged.exportStatements ?? []),\n      ...target.exportStatements,\n    ]);\n\n    merged.resolvedFilePaths = settify(\n      [...(merged.resolvedFilePaths ?? []), ...(target.resolvedFilePaths ?? [])].filter(\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\n      ),\n    );\n    merged.resolvedFilePaths =\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\n  }\n\n  return merged;\n}\n","import progress from '@cli/progress';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport createDescendantIndex from '@modules/createDescendantIndex';\nimport createIndexInfo from '@modules/createIndexInfo';\nimport getDirPaths from '@modules/getDirPaths';\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport { isNotEmpty, settify } from 'my-easy-fp';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function createIndexInfos(\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TCreateOrSingleOption,\n): Promise<ICreateIndexInfos[]> {\n  try {\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\n\n    const depthPairs = Object.keys(dirPaths)\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\n      .sort((l, r) => r.depth - l.depth);\n\n    progress.start(depthPairs.length * 2, 0);\n\n    const statementInfos = depthPairs\n      .map((depthPair) => {\n        if (depthPair.exportInfos.length <= 0) {\n          return [];\n        }\n\n        const statements = depthPair.exportInfos\n          .map((exportInfo) => {\n            const indexInfo = createIndexInfo(exportInfo, option);\n            return indexInfo;\n          })\n          .flat();\n\n        progress.increment();\n\n        return statements;\n      })\n      .flat()\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\n          return {\n            ...aggregation,\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\n              aggregation[indexInfo.resolvedDirPath],\n              indexInfo,\n            ),\n          };\n        }\n\n        return {\n          ...aggregation,\n          [indexInfo.resolvedDirPath]: {\n            depth: indexInfo.depth,\n            resolvedDirPath: indexInfo.resolvedDirPath,\n            resolvedFilePaths: settify(\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\n                isNotEmpty(resolvedFilePath),\n              ),\n            ),\n            exportStatements: [indexInfo.exportStatement],\n          },\n        };\n      }, {});\n\n    const descendantExportInfos = (\n      await Promise.all(\n        depthPairs.map(async (depthPair) => {\n          const indexInfo = await createDescendantIndex(\n            depthPair.dirPath,\n            exportInfos,\n            ignores,\n            option,\n          );\n\n          progress.increment();\n\n          return indexInfo;\n        }),\n      )\n    )\n      .flat()\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\n          return {\n            ...aggregation,\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\n              aggregation[indexInfo.resolvedDirPath],\n              indexInfo,\n            ),\n          };\n        }\n\n        return {\n          ...aggregation,\n          [indexInfo.resolvedDirPath]: {\n            depth: indexInfo.depth,\n            resolvedDirPath: indexInfo.resolvedDirPath,\n            resolvedFilePaths: isNotEmpty(indexInfo.resolvedFilePath)\n              ? [indexInfo.resolvedFilePath]\n              : indexInfo.resolvedFilePath,\n            exportStatements: [indexInfo.exportStatement],\n          },\n        };\n      }, {});\n\n    const mergedIndexInfos = depthPairs.reduce<Record<string, ICreateIndexInfos>>(\n      (aggregation, depthPair) => {\n        const statementInfo = statementInfos[depthPair.dirPath];\n        const descendantExportInfo = descendantExportInfos[depthPair.dirPath];\n\n        if (isNotEmpty(statementInfo) && isNotEmpty(descendantExportInfo)) {\n          return {\n            ...aggregation,\n            [depthPair.dirPath]: mergeCreateIndexInfo(\n              mergeCreateIndexInfo(aggregation[depthPair.dirPath], statementInfo),\n              descendantExportInfo,\n            ),\n          };\n        }\n\n        if (isNotEmpty(statementInfo)) {\n          return {\n            ...aggregation,\n            [depthPair.dirPath]: mergeCreateIndexInfo(\n              aggregation[depthPair.dirPath],\n              statementInfo,\n            ),\n          };\n        }\n\n        if (isNotEmpty(descendantExportInfo)) {\n          return {\n            ...aggregation,\n            [depthPair.dirPath]: mergeCreateIndexInfo(\n              aggregation[depthPair.dirPath],\n              descendantExportInfo,\n            ),\n          };\n        }\n\n        return { ...aggregation };\n      },\n      {},\n    );\n\n    progress.update(depthPairs.length * 2);\n\n    return Object.values(mergedIndexInfos).map((mergedIndexInfo) => {\n      return {\n        ...mergedIndexInfo,\n        exportStatements: mergedIndexInfo.exportStatements.sort((l, r) => l.localeCompare(r)),\n      };\n    });\n  } finally {\n    progress.stop();\n  }\n}\n","import { TRemoveOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport { posixJoin } from '@tools/misc';\nimport fastGlob from 'fast-glob';\nimport { settify } from 'my-easy-fp';\nimport { getDirname, isDescendant, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\n\nexport default async function getRemoveFiles(\n  project: tsm.Project,\n  option: TRemoveOptionWithDirInfo,\n) {\n  const filePaths = project\n    .getSourceFiles()\n    .filter((sourceFile) =>\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\n    )\n    .map((sourceFile) => replaceSepToPosix(sourceFile.getFilePath()));\n\n  const dirPaths = (await Promise.all(filePaths.map((filePath) => getDirname(filePath)))).map(\n    (dirPath) => replaceSepToPosix(dirPath),\n  );\n\n  const globPatterns = option.includeBackup\n    ? settify([\n        posixJoin(option.startAt, option.exportFilename),\n        posixJoin(option.startAt, `${option.exportFilename}.bak`),\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', `${option.exportFilename}.bak`)),\n      ])\n    : settify([\n        posixJoin(option.startAt, option.exportFilename),\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\n      ]);\n\n  const files = await fastGlob(globPatterns, { dot: true, cwd: option.startAt });\n\n  return files;\n}\n","import { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport { isFalse } from 'my-easy-fp';\nimport { getDirnameSync, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\n\nfunction getTsconfigRootDir(compilerOptions: tsm.CompilerOptions): string | undefined {\n  // If set rootDir, use it\n  if (compilerOptions.rootDir !== undefined && compilerOptions.rootDir !== null) {\n    const rootDir = path.resolve(compilerOptions.rootDir);\n    return replaceSepToPosix(rootDir);\n  }\n\n  // If set rootDirs, use first element of array\n  if (compilerOptions.rootDirs !== undefined && compilerOptions.rootDirs !== null) {\n    const [head] = compilerOptions.rootDirs;\n    const rootDir = path.resolve(head);\n    return replaceSepToPosix(rootDir);\n  }\n\n  return undefined;\n}\n\nexport default function getOutputDir(\n  project: tsm.Project,\n  option: TSingleOptionWithDirInfo,\n): string {\n  if (isFalse(option.useRootDir ?? false)) {\n    return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\n  }\n\n  const compilerOptions = project.getCompilerOptions();\n  const rootDir = getTsconfigRootDir(compilerOptions);\n\n  if (rootDir !== undefined && rootDir !== null) {\n    const outputDirConfig = replaceSepToPosix(getDirnameSync(option.output));\n\n    if (path.relative(rootDir, outputDirConfig).startsWith('..')) {\n      return rootDir;\n    }\n\n    return replaceSepToPosix(path.resolve(outputDirConfig));\n  }\n\n  return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport getOutputDir from '@writes/getOutputDir';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\n\nexport default function singleIndexInfo(\n  exportInfo: IExportInfo,\n  option: TSingleOptionWithDirInfo,\n  project: tsm.Project,\n): ICreateIndexInfo[] {\n  const outputDir = getOutputDir(project, option);\n\n  if (\n    exportInfo.starExported &&\n    isNotEmpty(exportInfo.defaultExport) &&\n    exportInfo.namedExports.length > 0\n  ) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export * from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export * from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  return [];\n}\n","import progress from '@cli/progress';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getDirPaths from '@modules/getDirPaths';\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\nimport singleIndexInfo from '@modules/singleIndexInfo';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport { isNotEmpty, settify } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function singleIndexInfos(\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TSingleOptionWithDirInfo,\n  project: tsm.Project,\n): Promise<ICreateIndexInfos[]> {\n  try {\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\n\n    const depthPairs = Object.keys(dirPaths)\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\n      .sort((l, r) => r.depth - l.depth);\n\n    progress.start(depthPairs.length, 0);\n\n    const statementInfos = depthPairs\n      .map((depthPair) => {\n        if (depthPair.exportInfos.length <= 0) {\n          return [];\n        }\n\n        const statements = depthPair.exportInfos\n          .map((exportInfo) => singleIndexInfo(exportInfo, option, project))\n          .flatMap((nonFlatted) => nonFlatted);\n\n        progress.increment();\n\n        return statements;\n      })\n      .flatMap((nonFlatted) => nonFlatted)\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\n          return {\n            ...aggregation,\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\n              aggregation[indexInfo.resolvedDirPath],\n              indexInfo,\n            ),\n          };\n        }\n\n        return {\n          ...aggregation,\n          [indexInfo.resolvedDirPath]: {\n            depth: indexInfo.depth,\n            resolvedDirPath: indexInfo.resolvedDirPath,\n            resolvedFilePaths: settify(\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\n                isNotEmpty(resolvedFilePath),\n              ),\n            ),\n            exportStatements: [indexInfo.exportStatement],\n          },\n        };\n      }, {});\n\n    progress.update(depthPairs.length);\n\n    return Object.values(statementInfos);\n  } finally {\n    progress.stop();\n  }\n}\n","import IReason from '@cli/interfaces/IReason';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport IIdentifierWithNode from '@compilers/interfaces/IIdentifierWithNode';\nimport chalk from 'chalk';\nimport { isNotEmpty, settify } from 'my-easy-fp';\n\nfunction createReason(exportInfo: IExportInfo, identifier: string) {\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.defaultExport.identifier === identifier) {\n    const lineAndCharacter = exportInfo.defaultExport.node\n      .getSourceFile()\n      .getLineAndColumnAtPos(exportInfo.defaultExport.node.getStart(true));\n\n    const reason: IReason = {\n      type: 'error',\n      lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\n      nodes: [exportInfo.defaultExport.node],\n      source: exportInfo.defaultExport.node.getSourceFile(),\n      filePath: exportInfo.resolvedFilePath,\n      message: `detect same name of default export statement: \"${chalk.yellow(identifier)}\"`,\n    };\n\n    return [reason];\n  }\n\n  return exportInfo.namedExports\n    .filter((namedExport) => namedExport.identifier === identifier)\n    .map((namedExport) => {\n      const lineAndCharacter = namedExport.node\n        .getSourceFile()\n        .getLineAndColumnAtPos(namedExport.node.getStart(true));\n\n      const reason: IReason = {\n        type: 'error',\n        lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\n        nodes: [namedExport.node],\n        source: namedExport.node.getSourceFile(),\n        filePath: exportInfo.resolvedFilePath,\n        message: `detect same name of export statement: \"${chalk.yellow(identifier)}\"`,\n      };\n\n      return reason;\n    });\n}\n\n/**\n * Detect export duplication from every typescript source file.\n *\n * @param exportInfos export statements from every typescript source file\n * @returns\n */\nexport default function validateExportDuplication(exportInfos: IExportInfo[]) {\n  const exportInfoRecord = exportInfos.reduce<Record<string, IExportInfo[]>>(\n    (aggregation, exportInfo) => {\n      const next = { ...aggregation };\n      const exportedNames = [exportInfo.defaultExport, ...exportInfo.namedExports].filter(\n        (exportedName): exportedName is IIdentifierWithNode => isNotEmpty(exportedName),\n      );\n\n      exportedNames.forEach((exportedName) => {\n        next[exportedName.identifier] = [...(next[exportedName.identifier] ?? []), exportInfo];\n      });\n\n      return next;\n    },\n    {},\n  );\n\n  const duplicateRecord = Object.entries(exportInfoRecord)\n    .filter((exportPair) => {\n      const [, exportInfo] = exportPair;\n      return exportInfo.length > 1;\n    })\n    .reduce<Record<string, IExportInfo[]>>((aggregation, exportPair) => {\n      const [identifier, exportInfo] = exportPair;\n      return { ...aggregation, [identifier]: exportInfo };\n    }, {});\n\n  const reasons: IReason[] = Object.entries(duplicateRecord)\n    .map((exportPair) => {\n      const [identifier, duplicateExportInfos] = exportPair;\n      return duplicateExportInfos\n        .map((exportInfo) => createReason(exportInfo, identifier))\n        .flatMap((nonFlatted) => nonFlatted);\n    })\n    .flatMap((nonFlatted) => nonFlatted);\n\n  const filePaths = settify(\n    Object.values(duplicateRecord)\n      .map((duplicateRecordElement) => {\n        return duplicateRecordElement.map((element) => element.resolvedFilePath);\n      })\n      .flatMap((nonFlatted) => nonFlatted)\n      .filter((filePath): filePath is string => isNotEmpty(filePath) && filePath !== ''),\n  );\n\n  return {\n    valid: Object.keys(duplicateRecord).length <= 0,\n    filePaths: Array.from(new Set(filePaths)),\n    duplicate: duplicateRecord,\n    reasons,\n  };\n}\n","import IReason from '@cli/interfaces/IReason';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getExtname from '@tools/getExtname';\nimport chalk from 'chalk';\nimport path from 'path';\n\nexport default function validateFileNameDuplication(\n  exportInfos: IExportInfo[],\n  option: TCreateOrSingleOption,\n) {\n  if (option.mode === 'single') {\n    return {\n      valid: true,\n      exportInfos: [],\n      filePaths: [],\n      reasons: [],\n    };\n  }\n\n  const indexFileName = option.keepFileExt\n    ? option.exportFilename\n    : path.basename(option.exportFilename, getExtname(option.exportFilename));\n\n  const duplicate = exportInfos.filter((exportInfo) => {\n    const baseName = option.keepFileExt\n      ? path.basename(exportInfo.resolvedFilePath)\n      : path.basename(exportInfo.resolvedFilePath, getExtname(exportInfo.resolvedFilePath));\n\n    return baseName === indexFileName;\n  });\n\n  const reasons: IReason[] = Object.values(duplicate).map((exportInfo) => {\n    const reason: IReason = {\n      type: 'error',\n      filePath: exportInfo.resolvedFilePath,\n      message: `already exist file: \"${chalk.yellow(exportInfo.resolvedFilePath)}\"`,\n    };\n\n    return reason;\n  });\n\n  return {\n    valid: duplicate.length <= 0,\n    exportInfos: duplicate,\n    filePaths: duplicate.map((exportInfo) => exportInfo.resolvedFilePath),\n    reasons,\n  };\n}\n","import { isNotEmpty } from 'my-easy-fp';\nimport prettier from 'prettier';\n\nexport default async function prettierApply(project: string, contents: string) {\n  try {\n    const option = await prettier.resolveConfig(project, {\n      editorconfig: true,\n    });\n\n    if (isNotEmpty(option) && option.parser === 'typescript') {\n      const prettiered = prettier.format(contents, option);\n      return { apply: true, contents: prettiered };\n    }\n\n    return { apply: false, contents };\n  } catch (catched) {\n    return { apply: false, contents };\n  }\n}\n","import IReason from '@cli/interfaces/IReason';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport prettierApply from '@writes/prettierApply';\nimport chalk from 'chalk';\nimport dayjs from 'dayjs';\nimport fs from 'fs';\nimport { isFalse, isNotEmpty, isTrue } from 'my-easy-fp';\nimport { exists } from 'my-node-fp';\nimport path from 'path';\n\nfunction getFirstLineComment(option: TCreateOrSingleOption): string {\n  const today = dayjs();\n\n  if (option.useComment && option.useTimestamp) {\n    return `// created from ctix ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\n  }\n\n  if (option.useComment) {\n    return `// created from ctix${option.eol}${option.eol}`;\n  }\n\n  if (option.useTimestamp) {\n    return `// ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\n  }\n\n  return '';\n}\n\nexport default async function indexFileWrite(\n  indexInfos: ICreateIndexInfos[],\n  option: TCreateOrSingleOption,\n) {\n  const nullableReasons = await Promise.all(\n    indexInfos.map(async (indexInfo) => {\n      const indexFilePath = path.join(indexInfo.resolvedDirPath, option.exportFilename);\n      const indexFileContent = indexInfo.exportStatements.join(option.eol);\n      const firstLine = getFirstLineComment(option);\n      const prettierApplied = await prettierApply(\n        option.project,\n        `${firstLine}${indexFileContent}${option.eol}`,\n      );\n\n      if (isTrue(option.overwrite ?? false)) {\n        // index.ts file already exist, create backup file\n        if (await exists(indexFilePath)) {\n          await fs.promises.writeFile(\n            `${indexFilePath}.bak`,\n            await fs.promises.readFile(indexFilePath),\n          );\n        }\n\n        await fs.promises.writeFile(\n          indexFilePath,\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\n        );\n\n        return undefined;\n      }\n\n      if (isFalse(await exists(indexFilePath))) {\n        await fs.promises.writeFile(\n          indexFilePath,\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\n        );\n\n        return undefined;\n      }\n\n      const reason: IReason = {\n        type: 'error',\n        filePath: indexFilePath,\n        message: `Already exist \"${option.exportFilename}\": \"${chalk.yellow(indexFilePath)}\"`,\n      };\n\n      return reason;\n    }),\n  );\n\n  const reasons = nullableReasons.filter((reason): reason is IReason => isNotEmpty(reason));\n\n  return reasons;\n}\n","import IReason from '@cli/interfaces/IReason';\nimport progress from '@cli/progress';\nimport reasoner from '@cli/reasoner';\nimport spinner from '@cli/spinner';\nimport getExportInfos from '@compilers/getExportInfos';\nimport getTypeScriptProject from '@compilers/getTypeScriptProject';\nimport initialConfigLiteral from '@configs/initialConfigLiteral';\nimport {\n  TCreateOptionWithDirInfo,\n  TRemoveOptionWithDirInfo,\n  TSingleOptionWithDirInfo,\n  TTInitOptionWithDirInfo,\n} from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getIgnoreConfigFiles from '@ignores/getIgnoreConfigFiles';\nimport createIndexInfos from '@modules/createIndexInfos';\nimport getRemoveFiles from '@modules/getRemoveFiles';\nimport singleIndexInfos from '@modules/singleIndexInfos';\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\nimport validateExportDuplication from '@validations/validateExportDuplication';\nimport validateFileNameDuplication from '@validations/validateFileNameDuplication';\nimport indexFileWrite from '@writes/indexFileWrite';\nimport fs from 'fs';\nimport { applyEdits, FormattingOptions, ModificationOptions, modify } from 'jsonc-parser';\nimport { isFalse, isNotEmpty } from 'my-easy-fp';\nimport { exists, getDirname, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nexport async function createWritor(option: TCreateOptionWithDirInfo, isMessageDisplay?: boolean) {\n  try {\n    progress.isEnable = isMessageDisplay ?? false;\n    spinner.isEnable = isMessageDisplay ?? false;\n    reasoner.isEnable = isMessageDisplay ?? false;\n\n    progress.stream = option.progressStream;\n    spinner.stream = option.spinnerStream;\n    reasoner.stream = option.reasonerStream;\n\n    spinner.start(\"ctix 'create' mode start, ...\");\n\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\n\n    spinner.update('project loading complete');\n\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\n\n    spinner.update('ignore file loading complete');\n\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\n\n    spinner.update('start validation');\n\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\n    const fileNameDuplicationValidateResult = validateFileNameDuplication(\n      totalExportInfos.filter((exportInfo) =>\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\n      ),\n      option,\n    );\n    const exportInfos = totalExportInfos.filter(\n      (exportInfo) =>\n        isFalse(\n          fileNameDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath),\n        ) &&\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\n    );\n\n    if (\n      isFalse(fileNameDuplicationValidateResult.valid) ||\n      isFalse(exportDuplicationValidateResult.valid)\n    ) {\n      process.exitCode = 1;\n    }\n\n    spinner.update(`generate ${option.exportFilename} content`);\n\n    const indexInfos = await createIndexInfos(exportInfos, ignoreContents, option);\n\n    spinner.update(`write each ${option.exportFilename} file`);\n\n    const writeReasons = await indexFileWrite(indexInfos, option);\n\n    spinner.update(`ctix 'create' mode complete!`);\n\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n\nexport async function singleWritor(option: TSingleOptionWithDirInfo, isMessageDisplay?: boolean) {\n  try {\n    progress.isEnable = isMessageDisplay ?? false;\n    spinner.isEnable = isMessageDisplay ?? false;\n    reasoner.isEnable = isMessageDisplay ?? false;\n\n    progress.stream = option.progressStream;\n    spinner.stream = option.spinnerStream;\n    reasoner.stream = option.reasonerStream;\n\n    spinner.start(\"ctix 'single' mode start, ...\");\n\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\n\n    spinner.update('project loading complete');\n\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\n\n    spinner.update('ignore file loading complete');\n\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\n\n    spinner.update('start validation');\n\n    const exportInfos = totalExportInfos.filter((exportInfo) =>\n      isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\n    );\n\n    if (isFalse(exportDuplicationValidateResult.valid)) {\n      process.exitCode = 1;\n    }\n\n    const indexInfos = await singleIndexInfos(exportInfos, ignoreContents, option, project);\n\n    spinner.update(`generate ${option.exportFilename} content`);\n\n    const writeReasons = await indexFileWrite(indexInfos, option);\n\n    spinner.update(`write each ${option.exportFilename} file`);\n\n    spinner.update(`ctix 'single' mode complete!`);\n\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n\nexport async function removeIndexFile(\n  option: TRemoveOptionWithDirInfo,\n  isMessageDisplay?: boolean,\n) {\n  try {\n    progress.isEnable = isMessageDisplay ?? false;\n    spinner.isEnable = isMessageDisplay ?? false;\n    reasoner.isEnable = isMessageDisplay ?? false;\n\n    spinner.start(\"ctix start 'remove' mode\");\n    reasoner.sleep(500);\n\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\n    const filePaths = await getRemoveFiles(project, option);\n\n    spinner.update(`remove each ${option.exportFilename} file`);\n\n    progress.start(filePaths.length, 0);\n\n    await Promise.all(\n      filePaths.map(async (filePath) => {\n        await fs.promises.unlink(filePath);\n\n        if (isMessageDisplay) {\n          progress.increment();\n        }\n      }),\n    );\n\n    reasoner.space();\n    spinner.update(`ctix 'remove' mode complete!`);\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n\nexport async function createInitFile(option: TTInitOptionWithDirInfo, isMessageDisplay?: boolean) {\n  progress.isEnable = isMessageDisplay ?? false;\n  spinner.isEnable = isMessageDisplay ?? false;\n  reasoner.isEnable = isMessageDisplay ?? false;\n\n  try {\n    spinner.start(\"ctix 'init' mode start, ...\");\n\n    const configPath = await getDirname(\n      option.config ?? option.project ?? path.resolve(process.cwd()),\n    );\n\n    const configFilePath = replaceSepToPosix(path.resolve(path.join(configPath, '.ctirc')));\n\n    const formattingOptions: FormattingOptions = {\n      insertSpaces: true,\n      tabSize: 2,\n      eol: '\\n',\n    };\n\n    const options: ModificationOptions = {\n      formattingOptions,\n    };\n\n    let modifiedInitialConfig: string = initialConfigLiteral;\n\n    if (isNotEmpty(option.project)) {\n      const projectFilePath = appendDotDirPrefix(\n        replaceSepToPosix(\n          path.join(\n            path.relative(configPath, await getDirname(option.project)),\n            path.basename(option.project),\n          ),\n        ),\n        path.posix.sep,\n      );\n\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['project'], projectFilePath, options),\n      );\n    }\n\n    if (isNotEmpty(option.output)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(\n          modifiedInitialConfig,\n          ['output'],\n          appendDotDirPrefix(\n            replaceSepToPosix(path.relative(configPath, option.output)),\n            path.posix.sep,\n          ),\n          options,\n        ),\n      );\n    } else if (isNotEmpty(option.project)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(\n          modifiedInitialConfig,\n          ['output'],\n          appendDotDirPrefix(\n            replaceSepToPosix(path.relative(configPath, await getDirname(option.project))),\n            path.posix.sep,\n          ),\n          options,\n        ),\n      );\n    } else {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['output'], configPath, options),\n      );\n    }\n\n    if (isNotEmpty(option.exportFilename)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['exportFilename'], option.exportFilename, options),\n      );\n    }\n\n    if (isNotEmpty(option.startAt)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['startAt'], option.startAt, options),\n      );\n    }\n\n    if (isNotEmpty(option.useSemicolon)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useSemicolon'], option.useSemicolon, options),\n      );\n    }\n\n    if (isNotEmpty(option.useTimestamp)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useTimestamp'], option.useTimestamp, options),\n      );\n    }\n\n    if (isNotEmpty(option.useComment)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useComment'], option.useComment, options),\n      );\n    }\n\n    if (isNotEmpty(option.quote)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['quote'], option.quote, options),\n      );\n    }\n\n    if (isNotEmpty(option.keepFileExt)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['keepFileExt'], option.keepFileExt, options),\n      );\n    }\n\n    if (isNotEmpty(option.skipEmptyDir)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['skipEmptyDir'], option.skipEmptyDir, options),\n      );\n    }\n\n    if (isNotEmpty(option.useRootDir)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useRootDir'], option.useRootDir, options),\n      );\n    }\n\n    if (isNotEmpty(option.includeBackup)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['includeBackup'], option.includeBackup, options),\n      );\n    }\n\n    if (await exists(configFilePath)) {\n      const reason: IReason = {\n        type: 'error',\n        filePath: configFilePath,\n        message: `configuration file(.ctirc) is already exists: ${configFilePath}`,\n      };\n\n      reasoner.start([reason]);\n    } else {\n      await fs.promises.writeFile(configFilePath, modifiedInitialConfig);\n    }\n\n    spinner.update(\"ctix 'init' mode complete!\");\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n"],"names":["__classPrivateFieldSet","SingleBar","chalk","__classPrivateFieldGet","sleepMs","isFalse","isEmpty","path","ora","isNotEmpty","upperCaseFirst","camelCase","tsm","os","replaceSepToPosix","getDirname","getDirnameSync","minimatch","isDescendant","exists","fs","parse","ignore","parseGitignore","fastGlob","isEmptyDir","startSepRemove","settify","prettier","dayjs","isTrue","applyEdits","modify"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"ctix.js","sources":["../../src/cli/progress.ts","../../src/cli/reasoner.ts","../../src/cli/spinner.ts","../../src/tools/getRefinedFilename.ts","../../src/compilers/getExportedName.ts","../../src/compilers/getIsIsolatedModules.ts","../../src/ignores/getRefineIgnorePath.ts","../../src/ignores/getCtiIgnorePattern.ts","../../src/tools/getRelativeDepth.ts","../../src/compilers/getExportInfo.ts","../../src/ignores/isIgnored.ts","../../src/compilers/getExportInfos.ts","../../src/compilers/getTypeScriptProject.ts","../../src/configs/initialConfigLiteral.ts","../../src/tools/misc.ts","../../src/ignores/getCtiignoreFiles.ts","../../src/ignores/getGitignoreFiles.ts","../../src/ignores/getNpmignoreFiles.ts","../../src/ignores/getIgnoreConfigContents.ts","../../src/ignores/getIgnoreConfigFiles.ts","../../src/ignores/defaultIgnore.ts","../../src/modules/getDescendantExportInfo.ts","../../src/tools/appendDotDirPrefix.ts","../../src/tools/extensions.ts","../../src/tools/getExtname.ts","../../src/modules/getFilePathOnIndex.ts","../../src/modules/createDescendantIndex.ts","../../src/modules/createIndexInfo.ts","../../src/modules/getDirPaths.ts","../../src/modules/mergeCreateIndexInfo.ts","../../src/modules/createIndexInfos.ts","../../src/modules/getRemoveFiles.ts","../../src/writes/getOutputDir.ts","../../src/modules/singleIndexInfo.ts","../../src/modules/singleIndexInfos.ts","../../src/validations/validateExportDuplication.ts","../../src/validations/validateFileNameDuplication.ts","../../src/writes/prettierApply.ts","../../src/writes/indexFileWrite.ts","../../src/ctix.ts"],"sourcesContent":["import TStreamType from '@configs/interfaces/TStreamType';\r\nimport chalk from 'chalk';\r\nimport { SingleBar } from 'cli-progress';\r\n\r\nclass CtixProgress {\r\n  #bar: SingleBar;\r\n\r\n  #stream: TStreamType;\r\n\r\n  #isEnable: boolean;\r\n\r\n  constructor() {\r\n    this.#bar = new SingleBar({\r\n      format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\r\n      barCompleteChar: '\\u25A0',\r\n      barIncompleteChar: ' ',\r\n      stopOnComplete: true,\r\n      barsize: 40,\r\n      stream: process.stdout,\r\n    });\r\n\r\n    this.#stream = 'stdout';\r\n\r\n    this.#isEnable = false;\r\n  }\r\n\r\n  set stream(value: TStreamType) {\r\n    if (value === 'stderr' && this.#stream === 'stdout') {\r\n      this.#bar.stop();\r\n\r\n      this.#bar = new SingleBar({\r\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\r\n        barCompleteChar: '\\u25A0',\r\n        barIncompleteChar: ' ',\r\n        stopOnComplete: true,\r\n        barsize: 40,\r\n        stream: process.stderr,\r\n      });\r\n\r\n      this.#stream = 'stderr';\r\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\r\n      this.#bar.stop();\r\n\r\n      this.#bar = new SingleBar({\r\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\r\n        barCompleteChar: '\\u25A0',\r\n        barIncompleteChar: ' ',\r\n        stopOnComplete: true,\r\n        barsize: 40,\r\n        stream: process.stdout,\r\n      });\r\n\r\n      this.#stream = 'stdout';\r\n    }\r\n  }\r\n\r\n  get isEnable() {\r\n    return this.#isEnable;\r\n  }\r\n\r\n  set isEnable(value) {\r\n    this.#isEnable = value;\r\n  }\r\n\r\n  start(max: number, initial: number) {\r\n    if (this.#isEnable) {\r\n      this.#bar.start(max, initial);\r\n    }\r\n  }\r\n\r\n  increment() {\r\n    if (this.#isEnable) {\r\n      this.#bar.increment();\r\n    }\r\n  }\r\n\r\n  update(current: number) {\r\n    if (this.#isEnable) {\r\n      this.#bar.update(current);\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.#bar.stop();\r\n  }\r\n}\r\n\r\nconst progress = new CtixProgress();\r\n\r\nexport default progress;\r\n","/* eslint-disable no-console */\r\nimport IReason from '@cli/interfaces/IReason';\r\nimport TStreamType from '@configs/interfaces/TStreamType';\r\nimport chalk from 'chalk';\r\nimport { isEmpty, isFalse, sleep as sleepMs } from 'my-easy-fp';\r\nimport * as path from 'path';\r\n\r\nclass CtixReasoner {\r\n  #isEnable: boolean;\r\n\r\n  #stream: TStreamType;\r\n\r\n  #streamWrite: typeof console.log;\r\n\r\n  constructor() {\r\n    this.#isEnable = false;\r\n    this.#streamWrite = console.error;\r\n    this.#stream = 'stderr';\r\n  }\r\n\r\n  set stream(value: TStreamType) {\r\n    if (value === 'stderr' && this.#stream === 'stdout') {\r\n      this.#streamWrite = console.error;\r\n      this.#stream = 'stderr';\r\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\r\n      this.#streamWrite = console.log;\r\n      this.#stream = 'stdout';\r\n    }\r\n  }\r\n\r\n  get isEnable() {\r\n    return this.#isEnable;\r\n  }\r\n\r\n  set isEnable(value) {\r\n    this.#isEnable = value;\r\n  }\r\n\r\n  async sleep(ms: number): Promise<void> {\r\n    if (this.#isEnable) {\r\n      await sleepMs(ms);\r\n    }\r\n  }\r\n\r\n  space(): void {\r\n    if (isFalse(this.#isEnable)) {\r\n      return;\r\n    }\r\n\r\n    this.#streamWrite('');\r\n  }\r\n\r\n  start(reasons: IReason[]): void {\r\n    if (isFalse(this.#isEnable)) {\r\n      return;\r\n    }\r\n\r\n    this.#streamWrite('');\r\n\r\n    reasons.forEach((reason) => {\r\n      const typeMessage =\r\n        reason.type === 'error'\r\n          ? chalk.bgRed(`   ${reason.type.toUpperCase()}   `)\r\n          : chalk.bgYellow(`   ${reason.type.toUpperCase()}    `);\r\n\r\n      const { filePath } = reason;\r\n\r\n      const filename = isEmpty(reason.lineAndCharacter)\r\n        ? `${path.basename(filePath)}`\r\n        : `${path.basename(filePath)}:${reason.lineAndCharacter.line}:${\r\n            reason.lineAndCharacter.character\r\n          }`;\r\n\r\n      const chevronRight = reason.type === 'error' ? chalk.red('>') : chalk.yellow('>');\r\n\r\n      this.#streamWrite(typeMessage, filename);\r\n\r\n      if (isEmpty(reason.lineAndCharacter)) {\r\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(`${filePath}`)}`);\r\n      } else {\r\n        this.#streamWrite(\r\n          `   ${chevronRight} ${chalk.gray(\r\n            `${filePath}:${reason.lineAndCharacter.line}:${reason.lineAndCharacter.character}`,\r\n          )}`,\r\n        );\r\n      }\r\n      reason.message.split('\\n').forEach((splittedMessage) => {\r\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(splittedMessage.trim())}`);\r\n      });\r\n\r\n      this.#streamWrite('');\r\n    });\r\n  }\r\n}\r\n\r\nconst reasoner = new CtixReasoner();\r\n\r\nexport default reasoner;\r\n","import TStreamType from '@configs/interfaces/TStreamType';\r\nimport { isNotEmpty } from 'my-easy-fp';\r\nimport ora from 'ora';\r\n\r\nclass CtixSpinner {\r\n  #spinner: ora.Ora;\r\n\r\n  #stream: TStreamType;\r\n\r\n  #isEnable: boolean;\r\n\r\n  constructor() {\r\n    this.#spinner = ora({ text: '', stream: process.stdout });\r\n    this.#isEnable = false;\r\n    this.#stream = 'stdout';\r\n  }\r\n\r\n  set stream(value: TStreamType) {\r\n    if (value === 'stderr' && this.#stream === 'stdout') {\r\n      this.#spinner.stop();\r\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stderr });\r\n\r\n      this.#stream = 'stderr';\r\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\r\n      this.#spinner.stop();\r\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stdout });\r\n\r\n      this.#stream = 'stdout';\r\n    }\r\n  }\r\n\r\n  get isEnable() {\r\n    return this.#isEnable;\r\n  }\r\n\r\n  set isEnable(value) {\r\n    this.#isEnable = value;\r\n  }\r\n\r\n  start(message?: string) {\r\n    if (this.#isEnable && isNotEmpty(message)) {\r\n      this.#spinner.text = message;\r\n      this.#spinner.start();\r\n    } else if (this.#isEnable) {\r\n      this.#spinner.start();\r\n    }\r\n  }\r\n\r\n  update(message: string) {\r\n    if (this.#isEnable) {\r\n      this.#spinner.text = message;\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.#spinner.stopAndPersist();\r\n  }\r\n}\r\n\r\nconst spinner = new CtixSpinner();\r\n\r\nexport default spinner;\r\n","import { camelCase } from 'change-case';\r\nimport path from 'path';\r\nimport { upperCaseFirst } from 'upper-case-first';\r\n\r\nexport default function getRefinedFilename(filename: string): string {\r\n  const basename = path.basename(filename, path.extname(filename));\r\n\r\n  if (/^([A-Z])(.+)/.test(basename)) {\r\n    return upperCaseFirst(camelCase(basename));\r\n  }\r\n\r\n  return camelCase(basename);\r\n}\r\n","import getRefinedFilename from '@tools/getRefinedFilename';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default function getExportedName(exportedDeclarationNode: tsm.ExportedDeclarations): string {\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\r\n    const classDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ClassDeclaration,\r\n    );\r\n\r\n    return classDeclarationNode.getNameOrThrow().toString();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\r\n    const variableDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.VariableDeclaration,\r\n    );\r\n    return variableDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\r\n    const arrowFunctionNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.ArrowFunction);\r\n    const name = arrowFunctionNode.getSymbolOrThrow().getEscapedName();\r\n\r\n    if (name === '__function') {\r\n      const sourceFile = arrowFunctionNode.getSourceFile();\r\n      const filename = sourceFile.getBaseName();\r\n      const basename = getRefinedFilename(filename);\r\n      return basename;\r\n    }\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\r\n    const functionDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.FunctionDeclaration,\r\n    );\r\n\r\n    const name = functionDeclarationNode.getName();\r\n\r\n    if (isEmpty(name)) {\r\n      const sourceFile = functionDeclarationNode.getSourceFile();\r\n      const filename = sourceFile.getBaseName();\r\n      const basename = getRefinedFilename(filename);\r\n      return basename;\r\n    }\r\n\r\n    return functionDeclarationNode.getNameOrThrow().toString();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\r\n    const interfaceDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.InterfaceDeclaration,\r\n    );\r\n    return interfaceDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\r\n    const typeAliasDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.TypeAliasDeclaration,\r\n    );\r\n    return typeAliasDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\r\n    const enumDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.EnumDeclaration,\r\n    );\r\n    return enumDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\r\n    const moduleDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ModuleDeclaration,\r\n    );\r\n    return moduleDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\r\n    const arrayLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ArrayLiteralExpression,\r\n    );\r\n\r\n    const sourceFile = arrayLiteralExpressionNode.getSourceFile();\r\n    const filename = sourceFile.getBaseName();\r\n    const basename = getRefinedFilename(filename);\r\n    return basename;\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\r\n    const objectLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ObjectLiteralExpression,\r\n    );\r\n\r\n    const sourceFile = objectLiteralExpressionNode.getSourceFile();\r\n    const filename = sourceFile.getBaseName();\r\n    const basename = getRefinedFilename(filename);\r\n    return basename;\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\r\n    const bindingElementNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.BindingElement);\r\n    return bindingElementNode.getName();\r\n  }\r\n\r\n  throw new Error(\r\n    `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\r\n  );\r\n}\r\n","import { isNotEmpty } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default function getIsIsolatedModules(\r\n  ...exportedDeclarationNodes: tsm.ExportedDeclarations[]\r\n): boolean {\r\n  return exportedDeclarationNodes\r\n    .map((exportedDeclarationNode) => {\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\r\n        return true;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\r\n        return true;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\r\n        return false;\r\n      }\r\n\r\n      throw new Error(\r\n        `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\r\n      );\r\n    })\r\n    .some(Boolean);\r\n}\r\n","import os from 'os';\r\n\r\nexport default function getRefineIgnorePath(filePath: string): string {\r\n  if (os.platform() === 'win32') {\r\n    const matched = /^([a-zA-Z]:)(\\/|)(.+)$/.exec(filePath.trim());\r\n    if (matched === null || matched === undefined || matched.length < 4) {\r\n      return filePath.startsWith('/') ? filePath.substring(1) : filePath;\r\n    }\r\n    return matched[3];\r\n  }\r\n\r\n  return filePath.startsWith('/') ? filePath.substring(1) : filePath;\r\n}\r\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default function getCtiIgnorePattern(\r\n  ig: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  filePath: string,\r\n) {\r\n  // stage 00. refine filePath\r\n  const refinedFilePath = getRefineIgnorePath(filePath);\r\n\r\n  // stage 03. check ctiignore, if match partial return false\r\n  // ignores function cache match result, so full-match create cache that is enhance performance\r\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\r\n  if (ig.cti.ignores(refinedFilePath)) {\r\n    const detailIgnoreds = ig.data.cti.withValue\r\n      .map((withValue) => ({\r\n        ignored: withValue.ignore.ignores(refinedFilePath),\r\n        pattern: withValue.pattern,\r\n      }))\r\n      .filter((ignored) => ignored.ignored);\r\n\r\n    // detailIgnoreds가 1개 이상이라면 사실 ignore 파일 설계가 잘못된 것이라서 warning을 해주는게 필요하다\r\n    return detailIgnoreds.at(0)?.pattern;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n","import { isEmpty } from 'my-easy-fp';\r\nimport { replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nexport default function getRelativeDepth(basePaths: string | string[], dirPath: string) {\r\n  const basePath = typeof basePaths === 'string' ? basePaths : basePaths.at(0);\r\n\r\n  if (isEmpty(basePath)) {\r\n    throw new Error('[getRelativeDepth] basePaths is empty array');\r\n  }\r\n\r\n  const relativePath = replaceSepToPosix(\r\n    path.relative(replaceSepToPosix(basePath), replaceSepToPosix(dirPath)),\r\n  );\r\n\r\n  if (relativePath === '') {\r\n    return 0;\r\n  }\r\n\r\n  if (relativePath === '.') {\r\n    return 0;\r\n  }\r\n\r\n  const depth = relativePath.split(path.posix.sep);\r\n  return depth.length;\r\n}\r\n","import getExportedName from '@compilers/getExportedName';\r\nimport getIsIsolatedModules from '@compilers/getIsIsolatedModules';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getCtiIgnorePattern from '@ignores/getCtiIgnorePattern';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\r\nimport { getDirname, getDirnameSync, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nfunction getFirstExportName(exportedDeclarations: tsm.ExportedDeclarations[]): string {\r\n  const [exportedDeclaration] = exportedDeclarations;\r\n  const exportedName = getExportedName(exportedDeclaration);\r\n  return exportedName;\r\n}\r\n\r\nfunction isStarExport(ignoreInFile?: string | string[]) {\r\n  if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(ignoreInFile) && ignoreInFile.length <= 0) {\r\n    return true;\r\n  }\r\n\r\n  return isEmpty(ignoreInFile);\r\n}\r\n\r\nexport default async function getExportInfo(\r\n  sourceFile: tsm.SourceFile,\r\n  option: TCreateOrSingleOption,\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n): Promise<IExportInfo> {\r\n  const filePath = sourceFile.getFilePath().toString();\r\n  const dirPath = replaceSepToPosix(path.resolve(await getDirname(filePath)));\r\n  const ignoreInFile = getCtiIgnorePattern(ignores, filePath);\r\n  const exportedDeclarationsMap = sourceFile.getExportedDeclarations();\r\n  const defaultExportedDeclarations = exportedDeclarationsMap.get('default')?.at(0);\r\n  const defaultExportedName = isNotEmpty(defaultExportedDeclarations)\r\n    ? {\r\n        identifier: getExportedName(defaultExportedDeclarations),\r\n        node: defaultExportedDeclarations,\r\n        isIsolatedModules: getIsIsolatedModules(defaultExportedDeclarations),\r\n      }\r\n    : undefined;\r\n\r\n  const namedExports = Array.from(exportedDeclarationsMap.entries())\r\n    .filter(([identifier]) => identifier !== 'default')\r\n    .filter((exportedDeclarationsWithKey) => {\r\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\r\n\r\n      if (typeof ignoreInFile === 'string') {\r\n        if (ignoreInFile === '*') {\r\n          return false;\r\n        }\r\n\r\n        const [firstNode] = exportedDeclarations;\r\n        const name = getExportedName(firstNode);\r\n        return ignoreInFile !== name;\r\n      }\r\n\r\n      if (\r\n        Array.isArray(ignoreInFile) &&\r\n        ignoreInFile.length > 0 &&\r\n        typeof ignoreInFile[0] === 'string'\r\n      ) {\r\n        const name = getFirstExportName(exportedDeclarations);\r\n        return isFalse(ignoreInFile.includes(name));\r\n      }\r\n\r\n      return isEmpty(ignoreInFile);\r\n    })\r\n    .map((exportedDeclarationsWithKey) => {\r\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\r\n      const [exportedDeclaration] = exportedDeclarations;\r\n      return {\r\n        identifier: getExportedName(exportedDeclaration),\r\n        node: exportedDeclaration,\r\n        isIsolatedModules: getIsIsolatedModules(...exportedDeclarations),\r\n      };\r\n    });\r\n\r\n  const relativeFilePath = path.relative(getDirnameSync(option.project), filePath);\r\n  const defaultExport =\r\n    isNotEmpty(defaultExportedName) &&\r\n    isFalse((ignoreInFile ?? []).includes(defaultExportedName.identifier))\r\n      ? defaultExportedName\r\n      : undefined;\r\n\r\n  const exportInfo: IExportInfo = {\r\n    isEmpty: isEmpty(defaultExport) && namedExports.length <= 0,\r\n    resolvedFilePath: replaceSepToPosix(path.resolve(filePath)),\r\n    resolvedDirPath: dirPath,\r\n    relativeFilePath: replaceSepToPosix(relativeFilePath),\r\n    depth: getRelativeDepth(option.startAt, dirPath),\r\n    starExported: isStarExport(ignoreInFile),\r\n    defaultExport,\r\n    namedExports,\r\n  };\r\n\r\n  return exportInfo;\r\n}\r\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\r\nimport minimatch from 'minimatch';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default function isIgnored(\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  filePath: string,\r\n) {\r\n  // stage 00. refine filePath\r\n  const refinedFilePath = getRefineIgnorePath(filePath);\r\n\r\n  // stage 01. check gitignore\r\n  if (ignores.git.ignores(refinedFilePath)) {\r\n    return true;\r\n  }\r\n\r\n  // stage 02. check npmignore\r\n  if (ignores.npm.map((pattern) => minimatch(filePath, pattern)).some((match) => match)) {\r\n    return true;\r\n  }\r\n\r\n  // stage 03. check ctiignore, if match partial return false\r\n  // ignores function cache match result, so full-match create cache that is enhance performance\r\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\r\n  if (ignores.cti.ignores(refinedFilePath)) {\r\n    const detailIgnoreds = ignores.data.cti.withValue\r\n      .map((withValue) => ({\r\n        ignored: withValue.ignore.ignores(refinedFilePath),\r\n        pattern: withValue.pattern,\r\n      }))\r\n      .filter((ignored) => ignored.ignored);\r\n\r\n    return isFalse(detailIgnoreds.some((ignored) => ignored.pattern !== '*'));\r\n  }\r\n\r\n  return false;\r\n}\r\n","import getExportInfo from '@compilers/getExportInfo';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport isIgnored from '@ignores/isIgnored';\r\nimport { isEmpty, isFalse } from 'my-easy-fp';\r\nimport { isDescendant } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function getExportInfos(\r\n  project: tsm.Project,\r\n  option: TCreateOrSingleOption,\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n) {\r\n  const sourceFiles = project\r\n    .getSourceFiles()\r\n    .filter((sourceFile) =>\r\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\r\n    )\r\n    .filter(\r\n      (sourceFile) => path.basename(sourceFile.getFilePath().toString()) !== option.exportFilename,\r\n    )\r\n    .filter((sourceFile) => isFalse(isIgnored(ignores, sourceFile.getFilePath().toString())));\r\n\r\n  const exportInfos = (\r\n    await Promise.all(sourceFiles.map((sourceFile) => getExportInfo(sourceFile, option, ignores)))\r\n  ).filter((exportInfo) => isFalse(exportInfo.isEmpty));\r\n\r\n  const exportRecord = exportInfos.reduce<Record<string, IExportInfo>>(\r\n    (aggregation, exportInfo) => {\r\n      if (isEmpty(aggregation[exportInfo.resolvedFilePath])) {\r\n        return { ...aggregation, [exportInfo.resolvedFilePath]: exportInfo };\r\n      }\r\n\r\n      return aggregation;\r\n    },\r\n    {},\r\n  );\r\n\r\n  return Object.values(exportRecord);\r\n}\r\n","import * as tsm from 'ts-morph';\r\n\r\n/**\r\n * @param param.tsconfig\r\n * @param param.ignore\r\n * @returns\r\n */\r\nexport default function getTypeScriptProject(projectPath: string): tsm.Project {\r\n  // Exclude exclude file in .ctiignore file: more exclude progress\r\n  const project = new tsm.Project({ tsConfigFilePath: projectPath });\r\n  return project;\r\n}\r\n","const initialConfigLiteral = `{\r\n  // common configuration\r\n  // tsconfig.json path: you must pass path with filename, like this \"./tsconfig.json\"\r\n  \"project\": \"\",\r\n  \r\n  // Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"\r\n  \"exportFilename\": \"index.ts\",\r\n\r\n\r\n  // create, single command configuration\r\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\r\n  \"useSemicolon\": true,\r\n\r\n  // timestamp write on ctix comment right-side, only works in useComment option set true\r\n  \"useTimestamp\": false,\r\n  \r\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\r\n  \"useComment\": false,\r\n\r\n  // quote mark \" or '\r\n  \"quote\": \"'\",\r\n  // overwrite index.ts file also index.ts file already exist that create backup file\r\n  \"overwrite\": false,\r\n  // keep file extension in export statement path\r\n  \"keepFileExt\": false,\r\n\r\n  \r\n  // only create command configuration\r\n  // If set true this option, skip empty directory\r\n  \"skipEmptyDir\": true,\r\n\r\n\r\n  // only single command configuration\r\n  // Output directory. It works only single mode.\r\n  \"output\": \"\",\r\n  // Use rootDir or rootDirs configuration in tsconfig.json.\r\n  \"useRootDir\": true,\r\n\r\n  // only remove command configuration\r\n  // remove with backup file\r\n  \"includeBackup\": true\r\n}`;\r\n\r\nexport default initialConfigLiteral;\r\n","import fastGlob from 'fast-glob';\r\nimport fastSafeStringify from 'fast-safe-stringify';\r\nimport { isNotEmpty } from 'my-easy-fp';\r\nimport { replaceSepToPosix } from 'my-node-fp';\r\nimport * as path from 'path';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport function posixJoin(...args: string[]): string {\r\n  return replaceSepToPosix(path.join(...args));\r\n}\r\n\r\nexport async function fastGlobWrap(\r\n  pattern: string | string[],\r\n  options: Parameters<typeof fastGlob>[1],\r\n  sep?: string,\r\n) {\r\n  const patterns = Array.isArray(pattern) ? pattern : [pattern];\r\n  const unixifyPatterns = patterns.map((nonUnixifyPattern) => replaceSepToPosix(nonUnixifyPattern));\r\n  const unixifyFiles = await fastGlob(unixifyPatterns, options);\r\n  const files = isNotEmpty(sep)\r\n    ? unixifyFiles.map((file) => file.replace(/\\//g, sep))\r\n    : unixifyFiles;\r\n  return files;\r\n}\r\n\r\nexport function getTestValue<T>(testData: T) {\r\n  const stringifiedString = fastSafeStringify(\r\n    testData,\r\n    (_key, value) => {\r\n      if (value === '[Circular]') {\r\n        return undefined;\r\n      }\r\n\r\n      if (value instanceof tsm.Node) {\r\n        return undefined;\r\n      }\r\n\r\n      return value;\r\n    },\r\n    2,\r\n  );\r\n\r\n  return JSON.parse(stringifiedString);\r\n}\r\n","import getRefineIgnorePath from '@ignores/getRefineIgnorePath';\r\nimport IGetIgnoredConfigContents from '@ignores/interfaces/IGetIgnoredConfigContents';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fs from 'fs';\r\nimport ignore, { Ignore } from 'ignore';\r\nimport { parse } from 'jsonc-parser';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { exists } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\ntype TWithValue = Array<{ filePath: string; ignore: Ignore; pattern: string | string[] }>;\r\n\r\ninterface IGetCtiignoreFilesReturn {\r\n  origin: IGetIgnoredConfigContents;\r\n  ignore: Ignore;\r\n  withValue: TWithValue;\r\n}\r\n\r\nexport default async function getCtiignoreFiles(\r\n  cwd: string,\r\n  filePath: string,\r\n): Promise<IGetCtiignoreFilesReturn> {\r\n  try {\r\n    if (isFalse(await exists(filePath))) {\r\n      throw new Error(`invalid ignore filePath: ${filePath}`);\r\n    }\r\n\r\n    const fileBuf = await fs.promises.readFile(filePath);\r\n    const ignoreFiles: IGetIgnoredConfigContents = parse(fileBuf.toString());\r\n    const ig: IGetCtiignoreFilesReturn = { origin: ignoreFiles, ignore: ignore(), withValue: [] };\r\n\r\n    ig.ignore.add(\r\n      Object.keys(ignoreFiles)\r\n        .map((ignoreFile) =>\r\n          path.isAbsolute(ignoreFile) ? ignoreFile : posixJoin(cwd, ignoreFile),\r\n        )\r\n        .map((pattern) => getRefineIgnorePath(pattern)),\r\n    );\r\n\r\n    ig.withValue = Object.entries(ignoreFiles).map((ignoreFile) => {\r\n      const [ignoreFilePathKey, pattern] = ignoreFile;\r\n      const subIgnore = ignore().add(\r\n        [ignoreFilePathKey]\r\n          .map((filePathKey) =>\r\n            path.isAbsolute(filePathKey) ? filePathKey : posixJoin(cwd, filePathKey),\r\n          )\r\n          .map((filePathKey) => getRefineIgnorePath(filePathKey)),\r\n      );\r\n\r\n      return { ignore: subIgnore, filePath: ignoreFilePathKey, pattern };\r\n    });\r\n\r\n    return ig;\r\n  } catch {\r\n    return { origin: {}, ignore: ignore(), withValue: [] };\r\n  }\r\n}\r\n","import { posixJoin } from '@tools/misc';\r\nimport fs from 'fs';\r\nimport ignore, { Ignore } from 'ignore';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { exists, getDirname } from 'my-node-fp';\r\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\r\nimport getRefineIgnorePath from './getRefineIgnorePath';\r\n\r\nexport default async function getGitignoreFiles(\r\n  filePath: string,\r\n): Promise<{ patterns: string[]; state?: gitignore.State; ignore: Ignore }> {\r\n  try {\r\n    if (isFalse(await exists(filePath))) {\r\n      throw new Error('invalid .gitignore filepath');\r\n    }\r\n\r\n    const fileBuf = await fs.promises.readFile(filePath);\r\n    const dirPath = await getDirname(filePath);\r\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\r\n    const ig: { patterns: string[]; parsed: gitignore.State; ignore: Ignore } = {\r\n      parsed: parsedIgnoreFile,\r\n      patterns: parsedIgnoreFile.patterns,\r\n      ignore: ignore(),\r\n    };\r\n\r\n    ig.ignore.add(\r\n      parsedIgnoreFile.patterns\r\n        .map((pattern) => posixJoin(dirPath, pattern))\r\n        .map((pattern) => getRefineIgnorePath(pattern)),\r\n    );\r\n\r\n    return ig;\r\n  } catch {\r\n    return { patterns: [], state: undefined, ignore: ignore() };\r\n  }\r\n}\r\n","import { posixJoin } from '@tools/misc';\r\nimport fs from 'fs';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { exists, getDirname } from 'my-node-fp';\r\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\r\nimport path from 'path';\r\n\r\nexport default async function getNpmignoreFiles(\r\n  filePath: string,\r\n): Promise<{ patterns: string[]; origin: string[]; state?: gitignore.State }> {\r\n  try {\r\n    if (isFalse(await exists(filePath))) {\r\n      return { patterns: [], origin: [], state: undefined };\r\n    }\r\n\r\n    const fileBuf = await fs.promises.readFile(filePath);\r\n    const dirPath = await getDirname(filePath);\r\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\r\n    const patterns = parsedIgnoreFile.patterns.map((pattern) =>\r\n      path.isAbsolute(pattern) ? pattern : posixJoin(dirPath, pattern),\r\n    );\r\n\r\n    return { patterns, origin: parsedIgnoreFile.patterns, state: parsedIgnoreFile };\r\n  } catch {\r\n    return { patterns: [], origin: [], state: undefined };\r\n  }\r\n}\r\n","import getCtiignoreFiles from '@ignores/getCtiignoreFiles';\r\nimport getGitignoreFiles from '@ignores/getGitignoreFiles';\r\nimport type { IGetIgnoreConfigFiles } from '@ignores/getIgnoreConfigFiles';\r\nimport getNpmignoreFiles from '@ignores/getNpmignoreFiles';\r\nimport { Ignore } from 'ignore';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\ninterface IGetIgnoreConfigContentsReturn {\r\n  git: Ignore;\r\n  cti: Ignore;\r\n  npm: string[];\r\n\r\n  data: {\r\n    git: AsyncReturnType<typeof getGitignoreFiles>;\r\n    npm: AsyncReturnType<typeof getNpmignoreFiles>;\r\n    cti: AsyncReturnType<typeof getCtiignoreFiles>;\r\n  };\r\n}\r\n\r\nexport default async function getIgnoreConfigContents({\r\n  git,\r\n  npm,\r\n  cti,\r\n  cwd,\r\n}: IGetIgnoreConfigFiles & { cwd: string }): Promise<IGetIgnoreConfigContentsReturn> {\r\n  const gitignoreRecord = await getGitignoreFiles(git);\r\n  const npmignoreRecord = await getNpmignoreFiles(npm);\r\n  const ctiignoreRecord = await getCtiignoreFiles(cwd, cti);\r\n\r\n  return {\r\n    git: gitignoreRecord.ignore,\r\n    cti: ctiignoreRecord.ignore,\r\n    npm: npmignoreRecord.patterns,\r\n\r\n    data: {\r\n      git: gitignoreRecord,\r\n      cti: ctiignoreRecord,\r\n      npm: npmignoreRecord,\r\n    },\r\n  };\r\n}\r\n","import { replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nexport interface IGetIgnoreConfigFiles {\r\n  git: string;\r\n  cti: string;\r\n  npm: string;\r\n}\r\n\r\n/**\r\n * extract create-ts-index ignore file by glob pattern in cwd(current working directory)\r\n *\r\n * @param cwd current working directory\r\n * @returns return value is eithered. string array or error class.\r\n */\r\nexport default async function getIgnoreConfigFiles(\r\n  cwd: string,\r\n  ignoreFilePath: string,\r\n): Promise<IGetIgnoreConfigFiles> {\r\n  const resolvedCWD = path.resolve(cwd); // absolute path\r\n\r\n  // create gitignore glob pattern\r\n  const gitignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.gitignore'));\r\n\r\n  // create npmignore glob pattern\r\n  const npmignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.npmignore'));\r\n\r\n  // create ctiignore glob pattern\r\n  const ctiignorePattern = ignoreFilePath;\r\n\r\n  // ctiignore file have dot charactor at file first so set true dot flag\r\n  const ignoreFiles = {\r\n    git: gitignorePattern,\r\n    cti: ctiignorePattern,\r\n    npm: npmignorePattern,\r\n  };\r\n\r\n  return ignoreFiles;\r\n}\r\n","const defaultIgnore = ['**/node_modules', '**/flow-typed', '**/coverage', '**/.git'];\r\n\r\nexport default defaultIgnore;\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport defaultIgnore from '@ignores/defaultIgnore';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport isIgnored from '@ignores/isIgnored';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fastGlob from 'fast-glob';\r\nimport fs from 'fs';\r\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\r\nimport { getDirname, isEmptyDir, replaceSepToPosix } from 'my-node-fp';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function getDescendantExportInfo(\r\n  parentFilePath: string,\r\n  option: TCreateOrSingleOption,\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n): Promise<IDescendantExportInfo[]> {\r\n  const filePath = replaceSepToPosix(parentFilePath);\r\n  const globPattern = replaceSepToPosix(posixJoin(await getDirname(filePath), '**', '*'));\r\n\r\n  const unIgnoredDirPaths = await fastGlob(globPattern, {\r\n    ignore: defaultIgnore,\r\n    dot: true,\r\n    onlyDirectories: true,\r\n  });\r\n\r\n  const dirPaths = unIgnoredDirPaths.filter((dirPath) => isFalse(isIgnored(ignores, dirPath)));\r\n\r\n  const parentExportInfo = exportInfos.filter(\r\n    (exportInfo) => exportInfo.resolvedDirPath === filePath,\r\n  );\r\n  const descendants = await Promise.all(\r\n    dirPaths.map(async (globDirPath) => {\r\n      const includeExportInfos = exportInfos\r\n        .filter((exportInfo) => exportInfo.resolvedDirPath === globDirPath)\r\n        .filter((exportInfo) => {\r\n          const ignoreInFile = ignores[exportInfo.resolvedFilePath];\r\n          const namedExportIdentifiers = exportInfo.namedExports.map(\r\n            (namedExport) => namedExport.identifier,\r\n          );\r\n\r\n          if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\r\n            return false;\r\n          }\r\n\r\n          if (\r\n            typeof ignoreInFile === 'string' &&\r\n            ignoreInFile === exportInfo.defaultExport?.identifier &&\r\n            namedExportIdentifiers.length <= 0\r\n          ) {\r\n            return false;\r\n          }\r\n\r\n          if (\r\n            isNotEmpty(exportInfo.defaultExport?.identifier) &&\r\n            ignoreInFile !== exportInfo.defaultExport?.identifier\r\n          ) {\r\n            return true;\r\n          }\r\n\r\n          if (namedExportIdentifiers.length > 0) {\r\n            return true;\r\n          }\r\n\r\n          return isEmpty(ignoreInFile);\r\n        });\r\n\r\n      const includeDirFilePaths = await fs.promises.readdir(globDirPath, { withFileTypes: true });\r\n\r\n      return {\r\n        dirPath: globDirPath,\r\n        isTerminal: isFalse(\r\n          includeDirFilePaths.some((includeDirFilePath) => includeDirFilePath.isDirectory()),\r\n        ),\r\n        depth: getRelativeDepth(option.startAt, globDirPath),\r\n        exportInfos: includeExportInfos,\r\n      };\r\n    }),\r\n  );\r\n\r\n  const sortedDescendents = [\r\n    {\r\n      dirPath: filePath,\r\n      isTerminal: await isEmptyDir(filePath),\r\n      depth: getRelativeDepth(option.startAt, filePath),\r\n      exportInfos: parentExportInfo,\r\n    },\r\n    ...descendants,\r\n  ].sort((l, r) => {\r\n    const depthDiff = l.depth - r.depth;\r\n\r\n    if (depthDiff !== 0) {\r\n      return depthDiff;\r\n    }\r\n\r\n    return l.dirPath.localeCompare(r.dirPath);\r\n  });\r\n\r\n  return sortedDescendents;\r\n}\r\n","import path from 'path';\r\n\r\nexport default function appendDotDirPrefix(filePath: string, sep?: string): string {\r\n  const pathSep = sep ?? path.sep;\r\n\r\n  if (filePath.startsWith('.')) {\r\n    return filePath;\r\n  }\r\n\r\n  if (filePath === '') {\r\n    return `.${pathSep}`;\r\n  }\r\n\r\n  return `.${pathSep}${filePath}`;\r\n}\r\n","/*\r\n// valid ext\r\n// '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\r\n\r\n  from checker.js\r\n  src/compiler/checker.ts:\r\n  src/compiler/checker.ts:            [\".mts\", \".mjs\"],\r\n\r\n  tests/baselines/reference/declarationEmitInvalidReferenceAllowJs.errors.txt:\r\n  tests/cases/compiler/declarationEmitInvalidReferenceAllowJs.ts(1,22): \r\n  error TS6231: Could not resolve the path 'tests/cases/compiler/invalid' with the extensions: \r\n  '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\r\n */\r\n\r\nconst extensions = ['.ts', '.tsx', '.d.ts', '.cts', '.d.cts', '.mts', '.d.mts'];\r\n\r\nexport default extensions;\r\n","import extensions from '@tools/extensions';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport path from 'path';\r\n\r\nexport default function getExtname(filePath: string): string {\r\n  if (extensions.every((extension) => isFalse(filePath.endsWith(extension)))) {\r\n    return path.extname(filePath);\r\n  }\r\n\r\n  if (filePath.endsWith('.d.ts')) {\r\n    return '.d.ts';\r\n  }\r\n\r\n  if (filePath.endsWith('.d.cts')) {\r\n    return '.d.cts';\r\n  }\r\n\r\n  if (filePath.endsWith('.d.mts')) {\r\n    return '.d.mts';\r\n  }\r\n\r\n  return path.extname(filePath);\r\n}\r\n","import { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\r\nimport extensions from '@tools/extensions';\r\nimport getExtname from '@tools/getExtname';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport { replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nfunction isKeepExt({\r\n  relativePath,\r\n  declareExtensions,\r\n  extname,\r\n  isIndex,\r\n}: {\r\n  relativePath?: string;\r\n  declareExtensions: string[];\r\n  extname: string;\r\n  isIndex: boolean;\r\n}) {\r\n  if (isNotEmpty(relativePath) && declareExtensions.includes(extname)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNotEmpty(relativePath) && isIndex && extname === '.tsx') {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getRelativePath(filePath: string, option: TCreateOrSingleOption, relativePath?: string) {\r\n  const declareExtensions = extensions.filter((ext) => ext.startsWith('.d'));\r\n  const extname = getExtname(filePath);\r\n  const basename = path.basename(filePath, extname);\r\n  const isIndex = basename.endsWith('index');\r\n\r\n  if (isKeepExt({ relativePath, declareExtensions, extname, isIndex })) {\r\n    if (isEmpty(relativePath)) {\r\n      throw new Error(`empty path: ${relativePath}`);\r\n    }\r\n\r\n    const relativeDirPath = replaceSepToPosix(\r\n      path.posix.relative(relativePath, path.dirname(filePath)),\r\n    );\r\n    const exportPath = `${basename}${extname}`;\r\n    const relativeDirPathWithDot = appendDotDirPrefix(\r\n      path.posix.join(relativeDirPath, exportPath),\r\n      path.posix.sep,\r\n    );\r\n\r\n    return relativeDirPathWithDot;\r\n  }\r\n\r\n  if (isNotEmpty(relativePath) && option.keepFileExt) {\r\n    const relativeDirPath = replaceSepToPosix(\r\n      path.posix.relative(relativePath, path.dirname(filePath)),\r\n    );\r\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\r\n    const relativeDirPathWithDot = appendDotDirPrefix(\r\n      path.posix.join(relativeDirPath, exportPath),\r\n      path.posix.sep,\r\n    );\r\n\r\n    return relativeDirPathWithDot;\r\n  }\r\n\r\n  if (isNotEmpty(relativePath)) {\r\n    const relativeDirPath = replaceSepToPosix(\r\n      path.posix.relative(relativePath, path.dirname(filePath)),\r\n    );\r\n    const exportPath = isIndex ? '' : `${basename}`;\r\n    const relativeDirPathWithDot = appendDotDirPrefix(\r\n      path.posix.join(relativeDirPath, exportPath),\r\n      path.posix.sep,\r\n    );\r\n\r\n    return relativeDirPathWithDot;\r\n  }\r\n\r\n  if (option.keepFileExt || declareExtensions.includes(extname)) {\r\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\r\n    const basenameWithDot = appendDotDirPrefix(exportPath, path.posix.sep);\r\n    return basenameWithDot;\r\n  }\r\n\r\n  const basenameWithDot = appendDotDirPrefix(basename, path.posix.sep);\r\n  return basenameWithDot;\r\n}\r\n\r\nexport default function getFilePathOnIndex(\r\n  filePath: string,\r\n  option: TCreateOrSingleOption,\r\n  relativePath?: string,\r\n) {\r\n  const semicolon = option.useSemicolon ? ';' : '';\r\n  const relativeDirPath = getRelativePath(filePath, option, relativePath);\r\n  return `${option.quote}${relativeDirPath}${option.quote}${semicolon}`;\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getDescendantExportInfo from '@modules/getDescendantExportInfo';\r\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\r\nimport { isDescendant, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\n/*\r\n\r\nb, c는 비어 있다. 그래서 a에 index.ts를 만들 때는 d, e를 바로 링크해야 한다\r\nb, c는 만들면 안됨\r\n\r\na/\r\n>> a/index.ts\r\n\r\na/b/\r\na/b/c/\r\n\r\na/b/c/case01.ts\r\n>> a/b/c/index.ts\r\n\r\na/b/c/d/e/case02.ts\r\na/b/c/d/e/case03.ts\r\n>> a/b/c/index.ts 에 들어간다\r\n\r\na/b/c/f/g/case04.ts\r\n>> a/b/c/index.ts 에 들어간다\r\n */\r\n\r\n/**\r\n *\r\n * @param dirPath base directory for extract descendant directory\r\n * @param exportInfos every exportInfos\r\n * @param option ctix option\r\n * @returns descendant directory index info\r\n */\r\nexport default async function createDescendantIndex(\r\n  dirPath: string,\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TCreateOrSingleOption,\r\n): Promise<ICreateIndexInfo[]> {\r\n  const currentDepth = getRelativeDepth(option.startAt, dirPath);\r\n  const everyDescendants = await getDescendantExportInfo(dirPath, option, exportInfos, ignores);\r\n  const sortedEveryDescendants = everyDescendants.sort((l, r) => {\r\n    const depthDiff = l.depth - r.depth;\r\n    return depthDiff !== 0 ? depthDiff : r.dirPath.localeCompare(l.dirPath);\r\n  });\r\n\r\n  if (option.mode === 'create' && option.skipEmptyDir) {\r\n    const currentDirExportInfos = exportInfos.filter(\r\n      (exportInfo) => exportInfo.resolvedDirPath === dirPath,\r\n    );\r\n\r\n    // 내가 비어있으면 스킵\r\n    // top level 이라면, 비어 있더라도 index를 빌드해야 한다\r\n    // self directory is empty that will be skip\r\n    // If currentDepth is top level of depth that have to build index\r\n    if (currentDirExportInfos.length <= 0 && currentDepth !== 0) {\r\n      return [];\r\n    }\r\n\r\n    const indexNeedExportInfos = sortedEveryDescendants\r\n      .filter((descendent) => descendent.dirPath !== dirPath)\r\n      .reduce<Record<string, IDescendantExportInfo>>((aggregation, sortedEveryDescendant) => {\r\n        const alreadyRegisteredDirPaths = Object.keys(aggregation);\r\n\r\n        if (\r\n          alreadyRegisteredDirPaths.some((alreadyRegisteredDirPath) =>\r\n            isDescendant(alreadyRegisteredDirPath, sortedEveryDescendant.dirPath, path.posix.sep),\r\n          )\r\n        ) {\r\n          return aggregation;\r\n        }\r\n\r\n        if (sortedEveryDescendant.exportInfos.length <= 0) {\r\n          return aggregation;\r\n        }\r\n\r\n        return { ...aggregation, [sortedEveryDescendant.dirPath]: sortedEveryDescendant };\r\n      }, {});\r\n\r\n    const descendantIndexInfos = Object.values(indexNeedExportInfos).map((indexNeedExportInfo) => {\r\n      const filePath = getFilePathOnIndex(indexNeedExportInfo.dirPath, option, dirPath);\r\n\r\n      return {\r\n        depth: currentDepth,\r\n        resolvedDirPath: dirPath,\r\n        resolvedFilePath: undefined,\r\n        exportStatement: `export * from ${filePath}`,\r\n      };\r\n    }, {});\r\n\r\n    return descendantIndexInfos;\r\n  }\r\n\r\n  const descendantIndexInfos = everyDescendants\r\n    .filter((everyDescendant) => everyDescendant.depth === currentDepth + 1)\r\n    .map((exportedDescendant) => {\r\n      const filePath = getFilePathOnIndex(exportedDescendant.dirPath, option, dirPath);\r\n\r\n      return {\r\n        depth: currentDepth,\r\n        resolvedDirPath: replaceSepToPosix(dirPath),\r\n        resolvedFilePath: undefined,\r\n        exportStatement: `export * from ${filePath}`,\r\n      };\r\n    });\r\n\r\n  return descendantIndexInfos;\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\r\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport { getDirnameSync } from 'my-node-fp';\r\n\r\nexport default function createIndexInfo(\r\n  exportInfo: IExportInfo,\r\n  option: TCreateOrSingleOption,\r\n): ICreateIndexInfo[] {\r\n  if (\r\n    exportInfo.starExported &&\r\n    isNotEmpty(exportInfo.defaultExport) &&\r\n    exportInfo.namedExports.length > 0\r\n  ) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [];\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport defaultIgnore from '@ignores/defaultIgnore';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport isIgnored from '@ignores/isIgnored';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fastGlob from 'fast-glob';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { startSepRemove } from 'my-node-fp';\r\nimport path from 'path';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\n/**\r\n *\r\n * @param exportInfos\r\n * @param ignores\r\n * @param option\r\n * @returns\r\n */\r\nexport default async function getDirPaths(\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TCreateOrSingleOption,\r\n): Promise<{ depths: Record<string, number>; dirPaths: Record<string, IExportInfo[]> }> {\r\n  const dirPathsFromExportInfos = await fastGlob(posixJoin(option.startAt, '**', '*'), {\r\n    onlyDirectories: true,\r\n    ignore: defaultIgnore,\r\n    cwd: option.startAt,\r\n  });\r\n\r\n  const filePaths = [option.startAt, ...dirPathsFromExportInfos].filter((dirPath) =>\r\n    isFalse(isIgnored(ignores, dirPath)),\r\n  );\r\n\r\n  const depths = filePaths.reduce<Record<string, number>>((aggregation, filePath) => {\r\n    return { ...aggregation, [filePath]: getRelativeDepth(option.startAt, filePath) };\r\n  }, {});\r\n\r\n  const dirPaths = filePaths.reduce<Record<string, IExportInfo[]>>((aggregation, filePath) => {\r\n    const files = exportInfos.filter((exportInfo) => {\r\n      return (\r\n        exportInfo.resolvedFilePath.indexOf(filePath) >= 0 &&\r\n        startSepRemove(exportInfo.resolvedFilePath.replace(filePath, ''), path.posix.sep).split(\r\n          path.posix.sep,\r\n        ).length <= 1\r\n      );\r\n    });\r\n\r\n    return { ...aggregation, [filePath]: files };\r\n  }, {});\r\n\r\n  return { depths, dirPaths };\r\n}\r\n","import ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\n\r\nexport default function mergeCreateIndexInfo(\r\n  origin: ICreateIndexInfos,\r\n  target: ICreateIndexInfos | ICreateIndexInfo,\r\n) {\r\n  const merged: ICreateIndexInfos = { ...origin };\r\n\r\n  merged.depth = target.depth;\r\n  merged.resolvedDirPath = target.resolvedDirPath;\r\n\r\n  if ('exportStatement' in target) {\r\n    merged.exportStatements = settify(\r\n      [...merged.exportStatements, target.exportStatement].filter(\r\n        (exportStatement): exportStatement is string => isNotEmpty(exportStatement),\r\n      ),\r\n    );\r\n\r\n    merged.resolvedFilePaths = settify(\r\n      [...(merged.resolvedFilePaths ?? []), target.resolvedFilePath].filter(\r\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\r\n      ),\r\n    );\r\n\r\n    merged.resolvedFilePaths =\r\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\r\n  } else {\r\n    merged.exportStatements = settify([\r\n      ...(merged.exportStatements ?? []),\r\n      ...target.exportStatements,\r\n    ]);\r\n\r\n    merged.resolvedFilePaths = settify(\r\n      [...(merged.resolvedFilePaths ?? []), ...(target.resolvedFilePaths ?? [])].filter(\r\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\r\n      ),\r\n    );\r\n    merged.resolvedFilePaths =\r\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\r\n  }\r\n\r\n  return merged;\r\n}\r\n","import progress from '@cli/progress';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport createDescendantIndex from '@modules/createDescendantIndex';\r\nimport createIndexInfo from '@modules/createIndexInfo';\r\nimport getDirPaths from '@modules/getDirPaths';\r\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function createIndexInfos(\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TCreateOrSingleOption,\r\n): Promise<ICreateIndexInfos[]> {\r\n  try {\r\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\r\n\r\n    const depthPairs = Object.keys(dirPaths)\r\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\r\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\r\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\r\n      .sort((l, r) => r.depth - l.depth);\r\n\r\n    progress.start(depthPairs.length * 2, 0);\r\n\r\n    const statementInfos = depthPairs\r\n      .map((depthPair) => {\r\n        if (depthPair.exportInfos.length <= 0) {\r\n          return [];\r\n        }\r\n\r\n        const statements = depthPair.exportInfos\r\n          .map((exportInfo) => {\r\n            const indexInfo = createIndexInfo(exportInfo, option);\r\n            return indexInfo;\r\n          })\r\n          .flat();\r\n\r\n        progress.increment();\r\n\r\n        return statements;\r\n      })\r\n      .flat()\r\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\r\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\r\n          return {\r\n            ...aggregation,\r\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\r\n              aggregation[indexInfo.resolvedDirPath],\r\n              indexInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...aggregation,\r\n          [indexInfo.resolvedDirPath]: {\r\n            depth: indexInfo.depth,\r\n            resolvedDirPath: indexInfo.resolvedDirPath,\r\n            resolvedFilePaths: settify(\r\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\r\n                isNotEmpty(resolvedFilePath),\r\n              ),\r\n            ),\r\n            exportStatements: [indexInfo.exportStatement],\r\n          },\r\n        };\r\n      }, {});\r\n\r\n    const descendantExportInfos = (\r\n      await Promise.all(\r\n        depthPairs.map(async (depthPair) => {\r\n          const indexInfo = await createDescendantIndex(\r\n            depthPair.dirPath,\r\n            exportInfos,\r\n            ignores,\r\n            option,\r\n          );\r\n\r\n          progress.increment();\r\n\r\n          return indexInfo;\r\n        }),\r\n      )\r\n    )\r\n      .flat()\r\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\r\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\r\n          return {\r\n            ...aggregation,\r\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\r\n              aggregation[indexInfo.resolvedDirPath],\r\n              indexInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...aggregation,\r\n          [indexInfo.resolvedDirPath]: {\r\n            depth: indexInfo.depth,\r\n            resolvedDirPath: indexInfo.resolvedDirPath,\r\n            resolvedFilePaths: isNotEmpty(indexInfo.resolvedFilePath)\r\n              ? [indexInfo.resolvedFilePath]\r\n              : indexInfo.resolvedFilePath,\r\n            exportStatements: [indexInfo.exportStatement],\r\n          },\r\n        };\r\n      }, {});\r\n\r\n    const mergedIndexInfos = depthPairs.reduce<Record<string, ICreateIndexInfos>>(\r\n      (aggregation, depthPair) => {\r\n        const statementInfo = statementInfos[depthPair.dirPath];\r\n        const descendantExportInfo = descendantExportInfos[depthPair.dirPath];\r\n\r\n        if (isNotEmpty(statementInfo) && isNotEmpty(descendantExportInfo)) {\r\n          return {\r\n            ...aggregation,\r\n            [depthPair.dirPath]: mergeCreateIndexInfo(\r\n              mergeCreateIndexInfo(aggregation[depthPair.dirPath], statementInfo),\r\n              descendantExportInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        if (isNotEmpty(statementInfo)) {\r\n          return {\r\n            ...aggregation,\r\n            [depthPair.dirPath]: mergeCreateIndexInfo(\r\n              aggregation[depthPair.dirPath],\r\n              statementInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        if (isNotEmpty(descendantExportInfo)) {\r\n          return {\r\n            ...aggregation,\r\n            [depthPair.dirPath]: mergeCreateIndexInfo(\r\n              aggregation[depthPair.dirPath],\r\n              descendantExportInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return { ...aggregation };\r\n      },\r\n      {},\r\n    );\r\n\r\n    progress.update(depthPairs.length * 2);\r\n\r\n    return Object.values(mergedIndexInfos).map((mergedIndexInfo) => {\r\n      return {\r\n        ...mergedIndexInfo,\r\n        exportStatements: mergedIndexInfo.exportStatements.sort((l, r) => l.localeCompare(r)),\r\n      };\r\n    });\r\n  } finally {\r\n    progress.stop();\r\n  }\r\n}\r\n","import { TRemoveOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fastGlob from 'fast-glob';\r\nimport { settify } from 'my-easy-fp';\r\nimport { getDirname, isDescendant, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default async function getRemoveFiles(\r\n  project: tsm.Project,\r\n  option: TRemoveOptionWithDirInfo,\r\n) {\r\n  const filePaths = project\r\n    .getSourceFiles()\r\n    .filter((sourceFile) =>\r\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\r\n    )\r\n    .map((sourceFile) => replaceSepToPosix(sourceFile.getFilePath()));\r\n\r\n  const dirPaths = (await Promise.all(filePaths.map((filePath) => getDirname(filePath)))).map(\r\n    (dirPath) => replaceSepToPosix(dirPath),\r\n  );\r\n\r\n  const globPatterns = option.includeBackup\r\n    ? settify([\r\n        posixJoin(option.startAt, option.exportFilename),\r\n        posixJoin(option.startAt, `${option.exportFilename}.bak`),\r\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\r\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', `${option.exportFilename}.bak`)),\r\n      ])\r\n    : settify([\r\n        posixJoin(option.startAt, option.exportFilename),\r\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\r\n      ]);\r\n\r\n  const files = await fastGlob(globPatterns, { dot: true, cwd: option.startAt });\r\n\r\n  return files;\r\n}\r\n","import { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { getDirnameSync, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\n\r\nfunction getTsconfigRootDir(compilerOptions: tsm.CompilerOptions): string | undefined {\r\n  // If set rootDir, use it\r\n  if (compilerOptions.rootDir !== undefined && compilerOptions.rootDir !== null) {\r\n    const rootDir = path.resolve(compilerOptions.rootDir);\r\n    return replaceSepToPosix(rootDir);\r\n  }\r\n\r\n  // If set rootDirs, use first element of array\r\n  if (compilerOptions.rootDirs !== undefined && compilerOptions.rootDirs !== null) {\r\n    const [head] = compilerOptions.rootDirs;\r\n    const rootDir = path.resolve(head);\r\n    return replaceSepToPosix(rootDir);\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nexport default function getOutputDir(\r\n  project: tsm.Project,\r\n  option: TSingleOptionWithDirInfo,\r\n): string {\r\n  if (isFalse(option.useRootDir ?? false)) {\r\n    return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\r\n  }\r\n\r\n  const compilerOptions = project.getCompilerOptions();\r\n  const rootDir = getTsconfigRootDir(compilerOptions);\r\n\r\n  if (rootDir !== undefined && rootDir !== null) {\r\n    const outputDirConfig = replaceSepToPosix(getDirnameSync(option.output));\r\n\r\n    if (path.relative(rootDir, outputDirConfig).startsWith('..')) {\r\n      return rootDir;\r\n    }\r\n\r\n    return replaceSepToPosix(path.resolve(outputDirConfig));\r\n  }\r\n\r\n  return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\r\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport getOutputDir from '@writes/getOutputDir';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default function singleIndexInfo(\r\n  exportInfo: IExportInfo,\r\n  option: TSingleOptionWithDirInfo,\r\n  project: tsm.Project,\r\n): ICreateIndexInfo[] {\r\n  const outputDir = getOutputDir(project, option);\r\n\r\n  if (\r\n    exportInfo.starExported &&\r\n    isNotEmpty(exportInfo.defaultExport) &&\r\n    exportInfo.namedExports.length > 0\r\n  ) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [];\r\n}\r\n","import progress from '@cli/progress';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getDirPaths from '@modules/getDirPaths';\r\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\r\nimport singleIndexInfo from '@modules/singleIndexInfo';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function singleIndexInfos(\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TSingleOptionWithDirInfo,\r\n  project: tsm.Project,\r\n): Promise<ICreateIndexInfos[]> {\r\n  try {\r\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\r\n\r\n    const depthPairs = Object.keys(dirPaths)\r\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\r\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\r\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\r\n      .sort((l, r) => r.depth - l.depth);\r\n\r\n    progress.start(depthPairs.length, 0);\r\n\r\n    const statementInfos = depthPairs\r\n      .map((depthPair) => {\r\n        if (depthPair.exportInfos.length <= 0) {\r\n          return [];\r\n        }\r\n\r\n        const statements = depthPair.exportInfos\r\n          .map((exportInfo) => singleIndexInfo(exportInfo, option, project))\r\n          .flatMap((nonFlatted) => nonFlatted);\r\n\r\n        progress.increment();\r\n\r\n        return statements;\r\n      })\r\n      .flatMap((nonFlatted) => nonFlatted)\r\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\r\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\r\n          return {\r\n            ...aggregation,\r\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\r\n              aggregation[indexInfo.resolvedDirPath],\r\n              indexInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...aggregation,\r\n          [indexInfo.resolvedDirPath]: {\r\n            depth: indexInfo.depth,\r\n            resolvedDirPath: indexInfo.resolvedDirPath,\r\n            resolvedFilePaths: settify(\r\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\r\n                isNotEmpty(resolvedFilePath),\r\n              ),\r\n            ),\r\n            exportStatements: [indexInfo.exportStatement],\r\n          },\r\n        };\r\n      }, {});\r\n\r\n    progress.update(depthPairs.length);\r\n\r\n    return Object.values(statementInfos);\r\n  } finally {\r\n    progress.stop();\r\n  }\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport IIdentifierWithNode from '@compilers/interfaces/IIdentifierWithNode';\r\nimport chalk from 'chalk';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\n\r\nfunction createReason(exportInfo: IExportInfo, identifier: string) {\r\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.defaultExport.identifier === identifier) {\r\n    const lineAndCharacter = exportInfo.defaultExport.node\r\n      .getSourceFile()\r\n      .getLineAndColumnAtPos(exportInfo.defaultExport.node.getStart(true));\r\n\r\n    const reason: IReason = {\r\n      type: 'error',\r\n      lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\r\n      nodes: [exportInfo.defaultExport.node],\r\n      source: exportInfo.defaultExport.node.getSourceFile(),\r\n      filePath: exportInfo.resolvedFilePath,\r\n      message: `detect same name of default export statement: \"${chalk.yellow(identifier)}\"`,\r\n    };\r\n\r\n    return [reason];\r\n  }\r\n\r\n  return exportInfo.namedExports\r\n    .filter((namedExport) => namedExport.identifier === identifier)\r\n    .map((namedExport) => {\r\n      const lineAndCharacter = namedExport.node\r\n        .getSourceFile()\r\n        .getLineAndColumnAtPos(namedExport.node.getStart(true));\r\n\r\n      const reason: IReason = {\r\n        type: 'error',\r\n        lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\r\n        nodes: [namedExport.node],\r\n        source: namedExport.node.getSourceFile(),\r\n        filePath: exportInfo.resolvedFilePath,\r\n        message: `detect same name of export statement: \"${chalk.yellow(identifier)}\"`,\r\n      };\r\n\r\n      return reason;\r\n    });\r\n}\r\n\r\n/**\r\n * Detect export duplication from every typescript source file.\r\n *\r\n * @param exportInfos export statements from every typescript source file\r\n * @returns\r\n */\r\nexport default function validateExportDuplication(exportInfos: IExportInfo[]) {\r\n  const exportInfoRecord = exportInfos.reduce<Record<string, IExportInfo[]>>(\r\n    (aggregation, exportInfo) => {\r\n      const next = { ...aggregation };\r\n      const exportedNames = [exportInfo.defaultExport, ...exportInfo.namedExports].filter(\r\n        (exportedName): exportedName is IIdentifierWithNode => isNotEmpty(exportedName),\r\n      );\r\n\r\n      exportedNames.forEach((exportedName) => {\r\n        next[exportedName.identifier] = [...(next[exportedName.identifier] ?? []), exportInfo];\r\n      });\r\n\r\n      return next;\r\n    },\r\n    {},\r\n  );\r\n\r\n  const duplicateRecord = Object.entries(exportInfoRecord)\r\n    .filter((exportPair) => {\r\n      const [, exportInfo] = exportPair;\r\n      return exportInfo.length > 1;\r\n    })\r\n    .reduce<Record<string, IExportInfo[]>>((aggregation, exportPair) => {\r\n      const [identifier, exportInfo] = exportPair;\r\n      return { ...aggregation, [identifier]: exportInfo };\r\n    }, {});\r\n\r\n  const reasons: IReason[] = Object.entries(duplicateRecord)\r\n    .map((exportPair) => {\r\n      const [identifier, duplicateExportInfos] = exportPair;\r\n      return duplicateExportInfos\r\n        .map((exportInfo) => createReason(exportInfo, identifier))\r\n        .flatMap((nonFlatted) => nonFlatted);\r\n    })\r\n    .flatMap((nonFlatted) => nonFlatted);\r\n\r\n  const filePaths = settify(\r\n    Object.values(duplicateRecord)\r\n      .map((duplicateRecordElement) => {\r\n        return duplicateRecordElement.map((element) => element.resolvedFilePath);\r\n      })\r\n      .flatMap((nonFlatted) => nonFlatted)\r\n      .filter((filePath): filePath is string => isNotEmpty(filePath) && filePath !== ''),\r\n  );\r\n\r\n  return {\r\n    valid: Object.keys(duplicateRecord).length <= 0,\r\n    filePaths: Array.from(new Set(filePaths)),\r\n    duplicate: duplicateRecord,\r\n    reasons,\r\n  };\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getExtname from '@tools/getExtname';\r\nimport chalk from 'chalk';\r\nimport path from 'path';\r\n\r\nexport default function validateFileNameDuplication(\r\n  exportInfos: IExportInfo[],\r\n  option: TCreateOrSingleOption,\r\n) {\r\n  if (option.mode === 'single') {\r\n    return {\r\n      valid: true,\r\n      exportInfos: [],\r\n      filePaths: [],\r\n      reasons: [],\r\n    };\r\n  }\r\n\r\n  const indexFileName = option.keepFileExt\r\n    ? option.exportFilename\r\n    : path.basename(option.exportFilename, getExtname(option.exportFilename));\r\n\r\n  const duplicate = exportInfos.filter((exportInfo) => {\r\n    const baseName = option.keepFileExt\r\n      ? path.basename(exportInfo.resolvedFilePath)\r\n      : path.basename(exportInfo.resolvedFilePath, getExtname(exportInfo.resolvedFilePath));\r\n\r\n    return baseName === indexFileName;\r\n  });\r\n\r\n  const reasons: IReason[] = Object.values(duplicate).map((exportInfo) => {\r\n    const reason: IReason = {\r\n      type: 'error',\r\n      filePath: exportInfo.resolvedFilePath,\r\n      message: `already exist file: \"${chalk.yellow(exportInfo.resolvedFilePath)}\"`,\r\n    };\r\n\r\n    return reason;\r\n  });\r\n\r\n  return {\r\n    valid: duplicate.length <= 0,\r\n    exportInfos: duplicate,\r\n    filePaths: duplicate.map((exportInfo) => exportInfo.resolvedFilePath),\r\n    reasons,\r\n  };\r\n}\r\n","import { isNotEmpty } from 'my-easy-fp';\r\nimport prettier from 'prettier';\r\n\r\nexport default async function prettierApply(project: string, contents: string) {\r\n  try {\r\n    const option = await prettier.resolveConfig(project, {\r\n      editorconfig: true,\r\n    });\r\n\r\n    if (isNotEmpty(option) && option.parser === 'typescript') {\r\n      const prettiered = prettier.format(contents, option);\r\n      return { apply: true, contents: prettiered };\r\n    }\r\n\r\n    return { apply: false, contents };\r\n  } catch (catched) {\r\n    return { apply: false, contents };\r\n  }\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport prettierApply from '@writes/prettierApply';\r\nimport chalk from 'chalk';\r\nimport dayjs from 'dayjs';\r\nimport fs from 'fs';\r\nimport { isFalse, isNotEmpty, isTrue } from 'my-easy-fp';\r\nimport { exists } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nfunction getFirstLineComment(option: TCreateOrSingleOption): string {\r\n  const today = dayjs();\r\n\r\n  if (option.useComment && option.useTimestamp) {\r\n    return `// created from ctix ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\r\n  }\r\n\r\n  if (option.useComment) {\r\n    return `// created from ctix${option.eol}${option.eol}`;\r\n  }\r\n\r\n  if (option.useTimestamp) {\r\n    return `// ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nexport default async function indexFileWrite(\r\n  indexInfos: ICreateIndexInfos[],\r\n  option: TCreateOrSingleOption,\r\n) {\r\n  const nullableReasons = await Promise.all(\r\n    indexInfos.map(async (indexInfo) => {\r\n      const indexFilePath = path.join(indexInfo.resolvedDirPath, option.exportFilename);\r\n      const indexFileContent = indexInfo.exportStatements.join(option.eol);\r\n      const firstLine = getFirstLineComment(option);\r\n      const prettierApplied = await prettierApply(\r\n        option.project,\r\n        `${firstLine}${indexFileContent}${option.eol}`,\r\n      );\r\n\r\n      if (isTrue(option.overwrite ?? false)) {\r\n        // index.ts file already exist, create backup file\r\n        if (await exists(indexFilePath)) {\r\n          await fs.promises.writeFile(\r\n            `${indexFilePath}.bak`,\r\n            await fs.promises.readFile(indexFilePath),\r\n          );\r\n        }\r\n\r\n        await fs.promises.writeFile(\r\n          indexFilePath,\r\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\r\n        );\r\n\r\n        return undefined;\r\n      }\r\n\r\n      if (isFalse(await exists(indexFilePath))) {\r\n        await fs.promises.writeFile(\r\n          indexFilePath,\r\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\r\n        );\r\n\r\n        return undefined;\r\n      }\r\n\r\n      const reason: IReason = {\r\n        type: 'error',\r\n        filePath: indexFilePath,\r\n        message: `Already exist \"${option.exportFilename}\": \"${chalk.yellow(indexFilePath)}\"`,\r\n      };\r\n\r\n      return reason;\r\n    }),\r\n  );\r\n\r\n  const reasons = nullableReasons.filter((reason): reason is IReason => isNotEmpty(reason));\r\n\r\n  return reasons;\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport progress from '@cli/progress';\r\nimport reasoner from '@cli/reasoner';\r\nimport spinner from '@cli/spinner';\r\nimport getExportInfos from '@compilers/getExportInfos';\r\nimport getTypeScriptProject from '@compilers/getTypeScriptProject';\r\nimport initialConfigLiteral from '@configs/initialConfigLiteral';\r\nimport {\r\n  TCreateOptionWithDirInfo,\r\n  TRemoveOptionWithDirInfo,\r\n  TSingleOptionWithDirInfo,\r\n  TTInitOptionWithDirInfo,\r\n} from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getIgnoreConfigFiles from '@ignores/getIgnoreConfigFiles';\r\nimport createIndexInfos from '@modules/createIndexInfos';\r\nimport getRemoveFiles from '@modules/getRemoveFiles';\r\nimport singleIndexInfos from '@modules/singleIndexInfos';\r\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\r\nimport validateExportDuplication from '@validations/validateExportDuplication';\r\nimport validateFileNameDuplication from '@validations/validateFileNameDuplication';\r\nimport indexFileWrite from '@writes/indexFileWrite';\r\nimport fs from 'fs';\r\nimport { applyEdits, FormattingOptions, ModificationOptions, modify } from 'jsonc-parser';\r\nimport { isFalse, isNotEmpty } from 'my-easy-fp';\r\nimport { exists, getDirname, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nexport async function createWritor(option: TCreateOptionWithDirInfo, isMessageDisplay?: boolean) {\r\n  try {\r\n    progress.isEnable = isMessageDisplay ?? false;\r\n    spinner.isEnable = isMessageDisplay ?? false;\r\n    reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n    progress.stream = option.progressStream;\r\n    spinner.stream = option.spinnerStream;\r\n    reasoner.stream = option.reasonerStream;\r\n\r\n    spinner.start(\"ctix 'create' mode start, ...\");\r\n\r\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\r\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\r\n\r\n    spinner.update('project loading complete');\r\n\r\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\r\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\r\n\r\n    spinner.update('ignore file loading complete');\r\n\r\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\r\n\r\n    spinner.update('start validation');\r\n\r\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\r\n    const fileNameDuplicationValidateResult = validateFileNameDuplication(\r\n      totalExportInfos.filter((exportInfo) =>\r\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\r\n      ),\r\n      option,\r\n    );\r\n    const exportInfos = totalExportInfos.filter(\r\n      (exportInfo) =>\r\n        isFalse(\r\n          fileNameDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath),\r\n        ) &&\r\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\r\n    );\r\n\r\n    if (\r\n      isFalse(fileNameDuplicationValidateResult.valid) ||\r\n      isFalse(exportDuplicationValidateResult.valid)\r\n    ) {\r\n      process.exitCode = 1;\r\n    }\r\n\r\n    spinner.update(`generate ${option.exportFilename} content`);\r\n\r\n    const indexInfos = await createIndexInfos(exportInfos, ignoreContents, option);\r\n\r\n    spinner.update(`write each ${option.exportFilename} file`);\r\n\r\n    const writeReasons = await indexFileWrite(indexInfos, option);\r\n\r\n    spinner.update(`ctix 'create' mode complete!`);\r\n\r\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n\r\nexport async function singleWritor(option: TSingleOptionWithDirInfo, isMessageDisplay?: boolean) {\r\n  try {\r\n    progress.isEnable = isMessageDisplay ?? false;\r\n    spinner.isEnable = isMessageDisplay ?? false;\r\n    reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n    progress.stream = option.progressStream;\r\n    spinner.stream = option.spinnerStream;\r\n    reasoner.stream = option.reasonerStream;\r\n\r\n    spinner.start(\"ctix 'single' mode start, ...\");\r\n\r\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\r\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\r\n\r\n    spinner.update('project loading complete');\r\n\r\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\r\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\r\n\r\n    spinner.update('ignore file loading complete');\r\n\r\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\r\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\r\n\r\n    spinner.update('start validation');\r\n\r\n    const exportInfos = totalExportInfos.filter((exportInfo) =>\r\n      isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\r\n    );\r\n\r\n    if (isFalse(exportDuplicationValidateResult.valid)) {\r\n      process.exitCode = 1;\r\n    }\r\n\r\n    const indexInfos = await singleIndexInfos(exportInfos, ignoreContents, option, project);\r\n\r\n    spinner.update(`generate ${option.exportFilename} content`);\r\n\r\n    const writeReasons = await indexFileWrite(indexInfos, option);\r\n\r\n    spinner.update(`write each ${option.exportFilename} file`);\r\n\r\n    spinner.update(`ctix 'single' mode complete!`);\r\n\r\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n\r\nexport async function removeIndexFile(\r\n  option: TRemoveOptionWithDirInfo,\r\n  isMessageDisplay?: boolean,\r\n) {\r\n  try {\r\n    progress.isEnable = isMessageDisplay ?? false;\r\n    spinner.isEnable = isMessageDisplay ?? false;\r\n    reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n    spinner.start(\"ctix start 'remove' mode\");\r\n    reasoner.sleep(500);\r\n\r\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\r\n    const filePaths = await getRemoveFiles(project, option);\r\n\r\n    spinner.update(`remove each ${option.exportFilename} file`);\r\n\r\n    progress.start(filePaths.length, 0);\r\n\r\n    await Promise.all(\r\n      filePaths.map(async (filePath) => {\r\n        await fs.promises.unlink(filePath);\r\n\r\n        if (isMessageDisplay) {\r\n          progress.increment();\r\n        }\r\n      }),\r\n    );\r\n\r\n    reasoner.space();\r\n    spinner.update(`ctix 'remove' mode complete!`);\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n\r\nexport async function createInitFile(option: TTInitOptionWithDirInfo, isMessageDisplay?: boolean) {\r\n  progress.isEnable = isMessageDisplay ?? false;\r\n  spinner.isEnable = isMessageDisplay ?? false;\r\n  reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n  try {\r\n    spinner.start(\"ctix 'init' mode start, ...\");\r\n\r\n    const configPath = await getDirname(\r\n      option.config ?? option.project ?? path.resolve(process.cwd()),\r\n    );\r\n\r\n    const configFilePath = replaceSepToPosix(path.resolve(path.join(configPath, '.ctirc')));\r\n\r\n    const formattingOptions: FormattingOptions = {\r\n      insertSpaces: true,\r\n      tabSize: 2,\r\n      eol: '\\n',\r\n    };\r\n\r\n    const options: ModificationOptions = {\r\n      formattingOptions,\r\n    };\r\n\r\n    let modifiedInitialConfig: string = initialConfigLiteral;\r\n\r\n    if (isNotEmpty(option.project)) {\r\n      const projectFilePath = appendDotDirPrefix(\r\n        replaceSepToPosix(\r\n          path.join(\r\n            path.relative(configPath, await getDirname(option.project)),\r\n            path.basename(option.project),\r\n          ),\r\n        ),\r\n        path.posix.sep,\r\n      );\r\n\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['project'], projectFilePath, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.output)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(\r\n          modifiedInitialConfig,\r\n          ['output'],\r\n          appendDotDirPrefix(\r\n            replaceSepToPosix(path.relative(configPath, option.output)),\r\n            path.posix.sep,\r\n          ),\r\n          options,\r\n        ),\r\n      );\r\n    } else if (isNotEmpty(option.project)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(\r\n          modifiedInitialConfig,\r\n          ['output'],\r\n          appendDotDirPrefix(\r\n            replaceSepToPosix(path.relative(configPath, await getDirname(option.project))),\r\n            path.posix.sep,\r\n          ),\r\n          options,\r\n        ),\r\n      );\r\n    } else {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['output'], configPath, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.exportFilename)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['exportFilename'], option.exportFilename, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.startAt)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['startAt'], option.startAt, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useSemicolon)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useSemicolon'], option.useSemicolon, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useTimestamp)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useTimestamp'], option.useTimestamp, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useComment)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useComment'], option.useComment, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.quote)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['quote'], option.quote, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.keepFileExt)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['keepFileExt'], option.keepFileExt, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.skipEmptyDir)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['skipEmptyDir'], option.skipEmptyDir, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useRootDir)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useRootDir'], option.useRootDir, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.includeBackup)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['includeBackup'], option.includeBackup, options),\r\n      );\r\n    }\r\n\r\n    if (await exists(configFilePath)) {\r\n      const reason: IReason = {\r\n        type: 'error',\r\n        filePath: configFilePath,\r\n        message: `configuration file(.ctirc) is already exists: ${configFilePath}`,\r\n      };\r\n\r\n      reasoner.start([reason]);\r\n    } else {\r\n      await fs.promises.writeFile(configFilePath, modifiedInitialConfig);\r\n    }\r\n\r\n    spinner.update(\"ctix 'init' mode complete!\");\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n"],"names":["__classPrivateFieldSet","SingleBar","chalk","__classPrivateFieldGet","sleepMs","isFalse","isEmpty","path","ora","isNotEmpty","upperCaseFirst","camelCase","tsm","os","replaceSepToPosix","getDirname","getDirnameSync","minimatch","isDescendant","exists","fs","parse","ignore","parseGitignore","fastGlob","isEmptyDir","startSepRemove","settify","prettier","dayjs","isTrue","applyEdits","modify"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/cli.js b/dist/cli.js
index 056bd3c0ed820a28aa15cb5edeae5b9b2c98d8dd..10a5ea7a7321e658bdf18e9afe581de79dcb31a4 100644
--- a/dist/cli.js
+++ b/dist/cli.js
@@ -886,41 +886,45 @@ function getExportedName(exportedDeclarationNode) {
     throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
 }
 
-function getIsIsolatedModules(exportedDeclarationNode) {
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ClassDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.VariableDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrowFunction))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.FunctionDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.InterfaceDeclaration))) {
-        return true;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.TypeAliasDeclaration))) {
-        return true;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.EnumDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ModuleDeclaration))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrayLiteralExpression))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ObjectLiteralExpression))) {
-        return false;
-    }
-    if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.BindingElement))) {
-        return false;
-    }
-    throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
+function getIsIsolatedModules(...exportedDeclarationNodes) {
+    return exportedDeclarationNodes
+        .map((exportedDeclarationNode) => {
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ClassDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.VariableDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrowFunction))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.FunctionDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.InterfaceDeclaration))) {
+            return true;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.TypeAliasDeclaration))) {
+            return true;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.EnumDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ModuleDeclaration))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ArrayLiteralExpression))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.ObjectLiteralExpression))) {
+            return false;
+        }
+        if (myEasyFp.isNotEmpty(exportedDeclarationNode.asKind(tsm__namespace.SyntaxKind.BindingElement))) {
+            return false;
+        }
+        throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
+    })
+        .some(Boolean);
 }
 
 function getRefineIgnorePath(filePath) {
@@ -1017,7 +1021,7 @@ async function getExportInfo(sourceFile, option, ignores) {
         return {
             identifier: getExportedName(exportedDeclaration),
             node: exportedDeclaration,
-            isIsolatedModules: getIsIsolatedModules(exportedDeclaration),
+            isIsolatedModules: getIsIsolatedModules(...exportedDeclarations),
         };
     });
     const relativeFilePath = path__default["default"].relative(myNodeFp.getDirnameSync(option.project), filePath);
diff --git a/dist/esm/ctix.js b/dist/esm/ctix.js
index d744952ea00572858b228a9ba81174d74f736025..20d1d733ed6b60f8f72cdc357db16af02dabd167 100644
--- a/dist/esm/ctix.js
+++ b/dist/esm/ctix.js
@@ -283,41 +283,45 @@ function getExportedName(exportedDeclarationNode) {
     throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
 }
 
-function getIsIsolatedModules(exportedDeclarationNode) {
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {
-        return true;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {
-        return true;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {
-        return false;
-    }
-    if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {
-        return false;
-    }
-    throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
+function getIsIsolatedModules(...exportedDeclarationNodes) {
+    return exportedDeclarationNodes
+        .map((exportedDeclarationNode) => {
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {
+            return true;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {
+            return true;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {
+            return false;
+        }
+        if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {
+            return false;
+        }
+        throw new Error(`Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`);
+    })
+        .some(Boolean);
 }
 
 function getRefineIgnorePath(filePath) {
@@ -414,7 +418,7 @@ async function getExportInfo(sourceFile, option, ignores) {
         return {
             identifier: getExportedName(exportedDeclaration),
             node: exportedDeclaration,
-            isIsolatedModules: getIsIsolatedModules(exportedDeclaration),
+            isIsolatedModules: getIsIsolatedModules(...exportedDeclarations),
         };
     });
     const relativeFilePath = path__default.relative(getDirnameSync(option.project), filePath);
diff --git a/dist/esm/ctix.js.map b/dist/esm/ctix.js.map
index 71a9fd8b36951d0c0067c851de9c25d83ef2cd78..703443f95b61aa3d0a898084d7517650a40f27ad 100644
--- a/dist/esm/ctix.js.map
+++ b/dist/esm/ctix.js.map
@@ -1 +1 @@
-{"version":3,"file":"ctix.js","sources":["../../src/cli/progress.ts","../../src/cli/reasoner.ts","../../src/cli/spinner.ts","../../src/tools/getRefinedFilename.ts","../../src/compilers/getExportedName.ts","../../src/compilers/getIsIsolatedModules.ts","../../src/ignores/getRefineIgnorePath.ts","../../src/ignores/getCtiIgnorePattern.ts","../../src/tools/getRelativeDepth.ts","../../src/compilers/getExportInfo.ts","../../src/ignores/isIgnored.ts","../../src/compilers/getExportInfos.ts","../../src/compilers/getTypeScriptProject.ts","../../src/configs/initialConfigLiteral.ts","../../src/tools/misc.ts","../../src/ignores/getCtiignoreFiles.ts","../../src/ignores/getGitignoreFiles.ts","../../src/ignores/getNpmignoreFiles.ts","../../src/ignores/getIgnoreConfigContents.ts","../../src/ignores/getIgnoreConfigFiles.ts","../../src/ignores/defaultIgnore.ts","../../src/modules/getDescendantExportInfo.ts","../../src/tools/appendDotDirPrefix.ts","../../src/tools/extensions.ts","../../src/tools/getExtname.ts","../../src/modules/getFilePathOnIndex.ts","../../src/modules/createDescendantIndex.ts","../../src/modules/createIndexInfo.ts","../../src/modules/getDirPaths.ts","../../src/modules/mergeCreateIndexInfo.ts","../../src/modules/createIndexInfos.ts","../../src/modules/getRemoveFiles.ts","../../src/writes/getOutputDir.ts","../../src/modules/singleIndexInfo.ts","../../src/modules/singleIndexInfos.ts","../../src/validations/validateExportDuplication.ts","../../src/validations/validateFileNameDuplication.ts","../../src/writes/prettierApply.ts","../../src/writes/indexFileWrite.ts","../../src/ctix.ts"],"sourcesContent":["import TStreamType from '@configs/interfaces/TStreamType';\nimport chalk from 'chalk';\nimport { SingleBar } from 'cli-progress';\n\nclass CtixProgress {\n  #bar: SingleBar;\n\n  #stream: TStreamType;\n\n  #isEnable: boolean;\n\n  constructor() {\n    this.#bar = new SingleBar({\n      format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n      barCompleteChar: '\\u25A0',\n      barIncompleteChar: ' ',\n      stopOnComplete: true,\n      barsize: 40,\n      stream: process.stdout,\n    });\n\n    this.#stream = 'stdout';\n\n    this.#isEnable = false;\n  }\n\n  set stream(value: TStreamType) {\n    if (value === 'stderr' && this.#stream === 'stdout') {\n      this.#bar.stop();\n\n      this.#bar = new SingleBar({\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n        barCompleteChar: '\\u25A0',\n        barIncompleteChar: ' ',\n        stopOnComplete: true,\n        barsize: 40,\n        stream: process.stderr,\n      });\n\n      this.#stream = 'stderr';\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\n      this.#bar.stop();\n\n      this.#bar = new SingleBar({\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\n        barCompleteChar: '\\u25A0',\n        barIncompleteChar: ' ',\n        stopOnComplete: true,\n        barsize: 40,\n        stream: process.stdout,\n      });\n\n      this.#stream = 'stdout';\n    }\n  }\n\n  get isEnable() {\n    return this.#isEnable;\n  }\n\n  set isEnable(value) {\n    this.#isEnable = value;\n  }\n\n  start(max: number, initial: number) {\n    if (this.#isEnable) {\n      this.#bar.start(max, initial);\n    }\n  }\n\n  increment() {\n    if (this.#isEnable) {\n      this.#bar.increment();\n    }\n  }\n\n  update(current: number) {\n    if (this.#isEnable) {\n      this.#bar.update(current);\n    }\n  }\n\n  stop() {\n    this.#bar.stop();\n  }\n}\n\nconst progress = new CtixProgress();\n\nexport default progress;\n","/* eslint-disable no-console */\nimport IReason from '@cli/interfaces/IReason';\nimport TStreamType from '@configs/interfaces/TStreamType';\nimport chalk from 'chalk';\nimport { isEmpty, isFalse, sleep as sleepMs } from 'my-easy-fp';\nimport * as path from 'path';\n\nclass CtixReasoner {\n  #isEnable: boolean;\n\n  #stream: TStreamType;\n\n  #streamWrite: typeof console.log;\n\n  constructor() {\n    this.#isEnable = false;\n    this.#streamWrite = console.error;\n    this.#stream = 'stderr';\n  }\n\n  set stream(value: TStreamType) {\n    if (value === 'stderr' && this.#stream === 'stdout') {\n      this.#streamWrite = console.error;\n      this.#stream = 'stderr';\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\n      this.#streamWrite = console.log;\n      this.#stream = 'stdout';\n    }\n  }\n\n  get isEnable() {\n    return this.#isEnable;\n  }\n\n  set isEnable(value) {\n    this.#isEnable = value;\n  }\n\n  async sleep(ms: number): Promise<void> {\n    if (this.#isEnable) {\n      await sleepMs(ms);\n    }\n  }\n\n  space(): void {\n    if (isFalse(this.#isEnable)) {\n      return;\n    }\n\n    this.#streamWrite('');\n  }\n\n  start(reasons: IReason[]): void {\n    if (isFalse(this.#isEnable)) {\n      return;\n    }\n\n    this.#streamWrite('');\n\n    reasons.forEach((reason) => {\n      const typeMessage =\n        reason.type === 'error'\n          ? chalk.bgRed(`   ${reason.type.toUpperCase()}   `)\n          : chalk.bgYellow(`   ${reason.type.toUpperCase()}    `);\n\n      const { filePath } = reason;\n\n      const filename = isEmpty(reason.lineAndCharacter)\n        ? `${path.basename(filePath)}`\n        : `${path.basename(filePath)}:${reason.lineAndCharacter.line}:${\n            reason.lineAndCharacter.character\n          }`;\n\n      const chevronRight = reason.type === 'error' ? chalk.red('>') : chalk.yellow('>');\n\n      this.#streamWrite(typeMessage, filename);\n\n      if (isEmpty(reason.lineAndCharacter)) {\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(`${filePath}`)}`);\n      } else {\n        this.#streamWrite(\n          `   ${chevronRight} ${chalk.gray(\n            `${filePath}:${reason.lineAndCharacter.line}:${reason.lineAndCharacter.character}`,\n          )}`,\n        );\n      }\n      reason.message.split('\\n').forEach((splittedMessage) => {\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(splittedMessage.trim())}`);\n      });\n\n      this.#streamWrite('');\n    });\n  }\n}\n\nconst reasoner = new CtixReasoner();\n\nexport default reasoner;\n","import TStreamType from '@configs/interfaces/TStreamType';\nimport { isNotEmpty } from 'my-easy-fp';\nimport ora from 'ora';\n\nclass CtixSpinner {\n  #spinner: ora.Ora;\n\n  #stream: TStreamType;\n\n  #isEnable: boolean;\n\n  constructor() {\n    this.#spinner = ora({ text: '', stream: process.stdout });\n    this.#isEnable = false;\n    this.#stream = 'stdout';\n  }\n\n  set stream(value: TStreamType) {\n    if (value === 'stderr' && this.#stream === 'stdout') {\n      this.#spinner.stop();\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stderr });\n\n      this.#stream = 'stderr';\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\n      this.#spinner.stop();\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stdout });\n\n      this.#stream = 'stdout';\n    }\n  }\n\n  get isEnable() {\n    return this.#isEnable;\n  }\n\n  set isEnable(value) {\n    this.#isEnable = value;\n  }\n\n  start(message?: string) {\n    if (this.#isEnable && isNotEmpty(message)) {\n      this.#spinner.text = message;\n      this.#spinner.start();\n    } else if (this.#isEnable) {\n      this.#spinner.start();\n    }\n  }\n\n  update(message: string) {\n    if (this.#isEnable) {\n      this.#spinner.text = message;\n    }\n  }\n\n  stop() {\n    this.#spinner.stopAndPersist();\n  }\n}\n\nconst spinner = new CtixSpinner();\n\nexport default spinner;\n","import { camelCase } from 'change-case';\nimport path from 'path';\nimport { upperCaseFirst } from 'upper-case-first';\n\nexport default function getRefinedFilename(filename: string): string {\n  const basename = path.basename(filename, path.extname(filename));\n\n  if (/^([A-Z])(.+)/.test(basename)) {\n    return upperCaseFirst(camelCase(basename));\n  }\n\n  return camelCase(basename);\n}\n","import getRefinedFilename from '@tools/getRefinedFilename';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\n\nexport default function getExportedName(exportedDeclarationNode: tsm.ExportedDeclarations): string {\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\n    const classDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ClassDeclaration,\n    );\n\n    return classDeclarationNode.getNameOrThrow().toString();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\n    const variableDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.VariableDeclaration,\n    );\n    return variableDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\n    const arrowFunctionNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.ArrowFunction);\n    const name = arrowFunctionNode.getSymbolOrThrow().getEscapedName();\n\n    if (name === '__function') {\n      const sourceFile = arrowFunctionNode.getSourceFile();\n      const filename = sourceFile.getBaseName();\n      const basename = getRefinedFilename(filename);\n      return basename;\n    }\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\n    const functionDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.FunctionDeclaration,\n    );\n\n    const name = functionDeclarationNode.getName();\n\n    if (isEmpty(name)) {\n      const sourceFile = functionDeclarationNode.getSourceFile();\n      const filename = sourceFile.getBaseName();\n      const basename = getRefinedFilename(filename);\n      return basename;\n    }\n\n    return functionDeclarationNode.getNameOrThrow().toString();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\n    const interfaceDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.InterfaceDeclaration,\n    );\n    return interfaceDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\n    const typeAliasDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.TypeAliasDeclaration,\n    );\n    return typeAliasDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\n    const enumDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.EnumDeclaration,\n    );\n    return enumDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\n    const moduleDeclarationNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ModuleDeclaration,\n    );\n    return moduleDeclarationNode.getName();\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\n    const arrayLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ArrayLiteralExpression,\n    );\n\n    const sourceFile = arrayLiteralExpressionNode.getSourceFile();\n    const filename = sourceFile.getBaseName();\n    const basename = getRefinedFilename(filename);\n    return basename;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\n    const objectLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\n      tsm.SyntaxKind.ObjectLiteralExpression,\n    );\n\n    const sourceFile = objectLiteralExpressionNode.getSourceFile();\n    const filename = sourceFile.getBaseName();\n    const basename = getRefinedFilename(filename);\n    return basename;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\n    const bindingElementNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.BindingElement);\n    return bindingElementNode.getName();\n  }\n\n  throw new Error(\n    `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\n  );\n}\n","import { isNotEmpty } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\n\nexport default function getIsIsolatedModules(\n  exportedDeclarationNode: tsm.ExportedDeclarations,\n): boolean {\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\n    return true;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\n    return true;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\n    return false;\n  }\n\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\n    return false;\n  }\n\n  throw new Error(\n    `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\n  );\n}\n","import os from 'os';\n\nexport default function getRefineIgnorePath(filePath: string): string {\n  if (os.platform() === 'win32') {\n    const matched = /^([a-zA-Z]:)(\\/|)(.+)$/.exec(filePath.trim());\n    if (matched === null || matched === undefined || matched.length < 4) {\n      return filePath.startsWith('/') ? filePath.substring(1) : filePath;\n    }\n    return matched[3];\n  }\n\n  return filePath.startsWith('/') ? filePath.substring(1) : filePath;\n}\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default function getCtiIgnorePattern(\n  ig: AsyncReturnType<typeof getIgnoreConfigContents>,\n  filePath: string,\n) {\n  // stage 00. refine filePath\n  const refinedFilePath = getRefineIgnorePath(filePath);\n\n  // stage 03. check ctiignore, if match partial return false\n  // ignores function cache match result, so full-match create cache that is enhance performance\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\n  if (ig.cti.ignores(refinedFilePath)) {\n    const detailIgnoreds = ig.data.cti.withValue\n      .map((withValue) => ({\n        ignored: withValue.ignore.ignores(refinedFilePath),\n        pattern: withValue.pattern,\n      }))\n      .filter((ignored) => ignored.ignored);\n\n    // detailIgnoreds가 1개 이상이라면 사실 ignore 파일 설계가 잘못된 것이라서 warning을 해주는게 필요하다\n    return detailIgnoreds.at(0)?.pattern;\n  }\n\n  return undefined;\n}\n","import { isEmpty } from 'my-easy-fp';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nexport default function getRelativeDepth(basePaths: string | string[], dirPath: string) {\n  const basePath = typeof basePaths === 'string' ? basePaths : basePaths.at(0);\n\n  if (isEmpty(basePath)) {\n    throw new Error('[getRelativeDepth] basePaths is empty array');\n  }\n\n  const relativePath = replaceSepToPosix(\n    path.relative(replaceSepToPosix(basePath), replaceSepToPosix(dirPath)),\n  );\n\n  if (relativePath === '') {\n    return 0;\n  }\n\n  if (relativePath === '.') {\n    return 0;\n  }\n\n  const depth = relativePath.split(path.posix.sep);\n  return depth.length;\n}\n","import getExportedName from '@compilers/getExportedName';\nimport getIsIsolatedModules from '@compilers/getIsIsolatedModules';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getCtiIgnorePattern from '@ignores/getCtiIgnorePattern';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\nimport { getDirname, getDirnameSync, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\nimport { AsyncReturnType } from 'type-fest';\n\nfunction getFirstExportName(exportedDeclarations: tsm.ExportedDeclarations[]): string {\n  const [exportedDeclaration] = exportedDeclarations;\n  const exportedName = getExportedName(exportedDeclaration);\n  return exportedName;\n}\n\nfunction isStarExport(ignoreInFile?: string | string[]) {\n  if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\n    return false;\n  }\n\n  if (Array.isArray(ignoreInFile) && ignoreInFile.length <= 0) {\n    return true;\n  }\n\n  return isEmpty(ignoreInFile);\n}\n\nexport default async function getExportInfo(\n  sourceFile: tsm.SourceFile,\n  option: TCreateOrSingleOption,\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n): Promise<IExportInfo> {\n  const filePath = sourceFile.getFilePath().toString();\n  const dirPath = replaceSepToPosix(path.resolve(await getDirname(filePath)));\n  const ignoreInFile = getCtiIgnorePattern(ignores, filePath);\n  const exportedDeclarationsMap = sourceFile.getExportedDeclarations();\n  const defaultExportedDeclarations = exportedDeclarationsMap.get('default')?.at(0);\n  const defaultExportedName = isNotEmpty(defaultExportedDeclarations)\n    ? {\n        identifier: getExportedName(defaultExportedDeclarations),\n        node: defaultExportedDeclarations,\n        isIsolatedModules: getIsIsolatedModules(defaultExportedDeclarations),\n      }\n    : undefined;\n\n  const namedExports = Array.from(exportedDeclarationsMap.entries())\n    .filter(([identifier]) => identifier !== 'default')\n    .filter((exportedDeclarationsWithKey) => {\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\n\n      if (typeof ignoreInFile === 'string') {\n        if (ignoreInFile === '*') {\n          return false;\n        }\n\n        const [firstNode] = exportedDeclarations;\n        const name = getExportedName(firstNode);\n        return ignoreInFile !== name;\n      }\n\n      if (\n        Array.isArray(ignoreInFile) &&\n        ignoreInFile.length > 0 &&\n        typeof ignoreInFile[0] === 'string'\n      ) {\n        const name = getFirstExportName(exportedDeclarations);\n        return isFalse(ignoreInFile.includes(name));\n      }\n\n      return isEmpty(ignoreInFile);\n    })\n    .map((exportedDeclarationsWithKey) => {\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\n      const [exportedDeclaration] = exportedDeclarations;\n      return {\n        identifier: getExportedName(exportedDeclaration),\n        node: exportedDeclaration,\n        isIsolatedModules: getIsIsolatedModules(exportedDeclaration),\n      };\n    });\n\n  const relativeFilePath = path.relative(getDirnameSync(option.project), filePath);\n  const defaultExport =\n    isNotEmpty(defaultExportedName) &&\n    isFalse((ignoreInFile ?? []).includes(defaultExportedName.identifier))\n      ? defaultExportedName\n      : undefined;\n\n  const exportInfo: IExportInfo = {\n    isEmpty: isEmpty(defaultExport) && namedExports.length <= 0,\n    resolvedFilePath: replaceSepToPosix(path.resolve(filePath)),\n    resolvedDirPath: dirPath,\n    relativeFilePath: replaceSepToPosix(relativeFilePath),\n    depth: getRelativeDepth(option.startAt, dirPath),\n    starExported: isStarExport(ignoreInFile),\n    defaultExport,\n    namedExports,\n  };\n\n  return exportInfo;\n}\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\nimport minimatch from 'minimatch';\nimport { isFalse } from 'my-easy-fp';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default function isIgnored(\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  filePath: string,\n) {\n  // stage 00. refine filePath\n  const refinedFilePath = getRefineIgnorePath(filePath);\n\n  // stage 01. check gitignore\n  if (ignores.git.ignores(refinedFilePath)) {\n    return true;\n  }\n\n  // stage 02. check npmignore\n  if (ignores.npm.map((pattern) => minimatch(filePath, pattern)).some((match) => match)) {\n    return true;\n  }\n\n  // stage 03. check ctiignore, if match partial return false\n  // ignores function cache match result, so full-match create cache that is enhance performance\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\n  if (ignores.cti.ignores(refinedFilePath)) {\n    const detailIgnoreds = ignores.data.cti.withValue\n      .map((withValue) => ({\n        ignored: withValue.ignore.ignores(refinedFilePath),\n        pattern: withValue.pattern,\n      }))\n      .filter((ignored) => ignored.ignored);\n\n    return isFalse(detailIgnoreds.some((ignored) => ignored.pattern !== '*'));\n  }\n\n  return false;\n}\n","import getExportInfo from '@compilers/getExportInfo';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport isIgnored from '@ignores/isIgnored';\nimport { isEmpty, isFalse } from 'my-easy-fp';\nimport { isDescendant } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function getExportInfos(\n  project: tsm.Project,\n  option: TCreateOrSingleOption,\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n) {\n  const sourceFiles = project\n    .getSourceFiles()\n    .filter((sourceFile) =>\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\n    )\n    .filter(\n      (sourceFile) => path.basename(sourceFile.getFilePath().toString()) !== option.exportFilename,\n    )\n    .filter((sourceFile) => isFalse(isIgnored(ignores, sourceFile.getFilePath().toString())));\n\n  const exportInfos = (\n    await Promise.all(sourceFiles.map((sourceFile) => getExportInfo(sourceFile, option, ignores)))\n  ).filter((exportInfo) => isFalse(exportInfo.isEmpty));\n\n  const exportRecord = exportInfos.reduce<Record<string, IExportInfo>>(\n    (aggregation, exportInfo) => {\n      if (isEmpty(aggregation[exportInfo.resolvedFilePath])) {\n        return { ...aggregation, [exportInfo.resolvedFilePath]: exportInfo };\n      }\n\n      return aggregation;\n    },\n    {},\n  );\n\n  return Object.values(exportRecord);\n}\n","import * as tsm from 'ts-morph';\n\n/**\n * @param param.tsconfig\n * @param param.ignore\n * @returns\n */\nexport default function getTypeScriptProject(projectPath: string): tsm.Project {\n  // Exclude exclude file in .ctiignore file: more exclude progress\n  const project = new tsm.Project({ tsConfigFilePath: projectPath });\n  return project;\n}\n","const initialConfigLiteral = `{\n  // common configuration\n  // tsconfig.json path: you must pass path with filename, like this \"./tsconfig.json\"\n  \"project\": \"\",\n  \n  // Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"\n  \"exportFilename\": \"index.ts\",\n\n\n  // create, single command configuration\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\n  \"useSemicolon\": true,\n\n  // timestamp write on ctix comment right-side, only works in useComment option set true\n  \"useTimestamp\": false,\n  \n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\n  \"useComment\": false,\n\n  // quote mark \" or '\n  \"quote\": \"'\",\n  // overwrite index.ts file also index.ts file already exist that create backup file\n  \"overwrite\": false,\n  // keep file extension in export statement path\n  \"keepFileExt\": false,\n\n  \n  // only create command configuration\n  // If set true this option, skip empty directory\n  \"skipEmptyDir\": true,\n\n\n  // only single command configuration\n  // Output directory. It works only single mode.\n  \"output\": \"\",\n  // Use rootDir or rootDirs configuration in tsconfig.json.\n  \"useRootDir\": true,\n\n  // only remove command configuration\n  // remove with backup file\n  \"includeBackup\": true\n}`;\n\nexport default initialConfigLiteral;\n","import fastGlob from 'fast-glob';\nimport fastSafeStringify from 'fast-safe-stringify';\nimport { isNotEmpty } from 'my-easy-fp';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport * as path from 'path';\nimport * as tsm from 'ts-morph';\n\nexport function posixJoin(...args: string[]): string {\n  return replaceSepToPosix(path.join(...args));\n}\n\nexport async function fastGlobWrap(\n  pattern: string | string[],\n  options: Parameters<typeof fastGlob>[1],\n  sep?: string,\n) {\n  const patterns = Array.isArray(pattern) ? pattern : [pattern];\n  const unixifyPatterns = patterns.map((nonUnixifyPattern) => replaceSepToPosix(nonUnixifyPattern));\n  const unixifyFiles = await fastGlob(unixifyPatterns, options);\n  const files = isNotEmpty(sep)\n    ? unixifyFiles.map((file) => file.replace(/\\//g, sep))\n    : unixifyFiles;\n  return files;\n}\n\nexport function getTestValue<T>(testData: T) {\n  const stringifiedString = fastSafeStringify(\n    testData,\n    (_key, value) => {\n      if (value === '[Circular]') {\n        return undefined;\n      }\n\n      if (value instanceof tsm.Node) {\n        return undefined;\n      }\n\n      return value;\n    },\n    2,\n  );\n\n  return JSON.parse(stringifiedString);\n}\n","import getRefineIgnorePath from '@ignores/getRefineIgnorePath';\nimport IGetIgnoredConfigContents from '@ignores/interfaces/IGetIgnoredConfigContents';\nimport { posixJoin } from '@tools/misc';\nimport fs from 'fs';\nimport ignore, { Ignore } from 'ignore';\nimport { parse } from 'jsonc-parser';\nimport { isFalse } from 'my-easy-fp';\nimport { exists } from 'my-node-fp';\nimport path from 'path';\n\ntype TWithValue = Array<{ filePath: string; ignore: Ignore; pattern: string | string[] }>;\n\ninterface IGetCtiignoreFilesReturn {\n  origin: IGetIgnoredConfigContents;\n  ignore: Ignore;\n  withValue: TWithValue;\n}\n\nexport default async function getCtiignoreFiles(\n  cwd: string,\n  filePath: string,\n): Promise<IGetCtiignoreFilesReturn> {\n  try {\n    if (isFalse(await exists(filePath))) {\n      throw new Error(`invalid ignore filePath: ${filePath}`);\n    }\n\n    const fileBuf = await fs.promises.readFile(filePath);\n    const ignoreFiles: IGetIgnoredConfigContents = parse(fileBuf.toString());\n    const ig: IGetCtiignoreFilesReturn = { origin: ignoreFiles, ignore: ignore(), withValue: [] };\n\n    ig.ignore.add(\n      Object.keys(ignoreFiles)\n        .map((ignoreFile) =>\n          path.isAbsolute(ignoreFile) ? ignoreFile : posixJoin(cwd, ignoreFile),\n        )\n        .map((pattern) => getRefineIgnorePath(pattern)),\n    );\n\n    ig.withValue = Object.entries(ignoreFiles).map((ignoreFile) => {\n      const [ignoreFilePathKey, pattern] = ignoreFile;\n      const subIgnore = ignore().add(\n        [ignoreFilePathKey]\n          .map((filePathKey) =>\n            path.isAbsolute(filePathKey) ? filePathKey : posixJoin(cwd, filePathKey),\n          )\n          .map((filePathKey) => getRefineIgnorePath(filePathKey)),\n      );\n\n      return { ignore: subIgnore, filePath: ignoreFilePathKey, pattern };\n    });\n\n    return ig;\n  } catch {\n    return { origin: {}, ignore: ignore(), withValue: [] };\n  }\n}\n","import { posixJoin } from '@tools/misc';\nimport fs from 'fs';\nimport ignore, { Ignore } from 'ignore';\nimport { isFalse } from 'my-easy-fp';\nimport { exists, getDirname } from 'my-node-fp';\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\nimport getRefineIgnorePath from './getRefineIgnorePath';\n\nexport default async function getGitignoreFiles(\n  filePath: string,\n): Promise<{ patterns: string[]; state?: gitignore.State; ignore: Ignore }> {\n  try {\n    if (isFalse(await exists(filePath))) {\n      throw new Error('invalid .gitignore filepath');\n    }\n\n    const fileBuf = await fs.promises.readFile(filePath);\n    const dirPath = await getDirname(filePath);\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\n    const ig: { patterns: string[]; parsed: gitignore.State; ignore: Ignore } = {\n      parsed: parsedIgnoreFile,\n      patterns: parsedIgnoreFile.patterns,\n      ignore: ignore(),\n    };\n\n    ig.ignore.add(\n      parsedIgnoreFile.patterns\n        .map((pattern) => posixJoin(dirPath, pattern))\n        .map((pattern) => getRefineIgnorePath(pattern)),\n    );\n\n    return ig;\n  } catch {\n    return { patterns: [], state: undefined, ignore: ignore() };\n  }\n}\n","import { posixJoin } from '@tools/misc';\nimport fs from 'fs';\nimport { isFalse } from 'my-easy-fp';\nimport { exists, getDirname } from 'my-node-fp';\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\nimport path from 'path';\n\nexport default async function getNpmignoreFiles(\n  filePath: string,\n): Promise<{ patterns: string[]; origin: string[]; state?: gitignore.State }> {\n  try {\n    if (isFalse(await exists(filePath))) {\n      return { patterns: [], origin: [], state: undefined };\n    }\n\n    const fileBuf = await fs.promises.readFile(filePath);\n    const dirPath = await getDirname(filePath);\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\n    const patterns = parsedIgnoreFile.patterns.map((pattern) =>\n      path.isAbsolute(pattern) ? pattern : posixJoin(dirPath, pattern),\n    );\n\n    return { patterns, origin: parsedIgnoreFile.patterns, state: parsedIgnoreFile };\n  } catch {\n    return { patterns: [], origin: [], state: undefined };\n  }\n}\n","import getCtiignoreFiles from '@ignores/getCtiignoreFiles';\nimport getGitignoreFiles from '@ignores/getGitignoreFiles';\nimport type { IGetIgnoreConfigFiles } from '@ignores/getIgnoreConfigFiles';\nimport getNpmignoreFiles from '@ignores/getNpmignoreFiles';\nimport { Ignore } from 'ignore';\nimport { AsyncReturnType } from 'type-fest';\n\ninterface IGetIgnoreConfigContentsReturn {\n  git: Ignore;\n  cti: Ignore;\n  npm: string[];\n\n  data: {\n    git: AsyncReturnType<typeof getGitignoreFiles>;\n    npm: AsyncReturnType<typeof getNpmignoreFiles>;\n    cti: AsyncReturnType<typeof getCtiignoreFiles>;\n  };\n}\n\nexport default async function getIgnoreConfigContents({\n  git,\n  npm,\n  cti,\n  cwd,\n}: IGetIgnoreConfigFiles & { cwd: string }): Promise<IGetIgnoreConfigContentsReturn> {\n  const gitignoreRecord = await getGitignoreFiles(git);\n  const npmignoreRecord = await getNpmignoreFiles(npm);\n  const ctiignoreRecord = await getCtiignoreFiles(cwd, cti);\n\n  return {\n    git: gitignoreRecord.ignore,\n    cti: ctiignoreRecord.ignore,\n    npm: npmignoreRecord.patterns,\n\n    data: {\n      git: gitignoreRecord,\n      cti: ctiignoreRecord,\n      npm: npmignoreRecord,\n    },\n  };\n}\n","import { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nexport interface IGetIgnoreConfigFiles {\n  git: string;\n  cti: string;\n  npm: string;\n}\n\n/**\n * extract create-ts-index ignore file by glob pattern in cwd(current working directory)\n *\n * @param cwd current working directory\n * @returns return value is eithered. string array or error class.\n */\nexport default async function getIgnoreConfigFiles(\n  cwd: string,\n  ignoreFilePath: string,\n): Promise<IGetIgnoreConfigFiles> {\n  const resolvedCWD = path.resolve(cwd); // absolute path\n\n  // create gitignore glob pattern\n  const gitignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.gitignore'));\n\n  // create npmignore glob pattern\n  const npmignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.npmignore'));\n\n  // create ctiignore glob pattern\n  const ctiignorePattern = ignoreFilePath;\n\n  // ctiignore file have dot charactor at file first so set true dot flag\n  const ignoreFiles = {\n    git: gitignorePattern,\n    cti: ctiignorePattern,\n    npm: npmignorePattern,\n  };\n\n  return ignoreFiles;\n}\n","const defaultIgnore = ['**/node_modules', '**/flow-typed', '**/coverage', '**/.git'];\n\nexport default defaultIgnore;\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport defaultIgnore from '@ignores/defaultIgnore';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport isIgnored from '@ignores/isIgnored';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\nimport { posixJoin } from '@tools/misc';\nimport fastGlob from 'fast-glob';\nimport fs from 'fs';\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\nimport { getDirname, isEmptyDir, replaceSepToPosix } from 'my-node-fp';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function getDescendantExportInfo(\n  parentFilePath: string,\n  option: TCreateOrSingleOption,\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n): Promise<IDescendantExportInfo[]> {\n  const filePath = replaceSepToPosix(parentFilePath);\n  const globPattern = replaceSepToPosix(posixJoin(await getDirname(filePath), '**', '*'));\n\n  const unIgnoredDirPaths = await fastGlob(globPattern, {\n    ignore: defaultIgnore,\n    dot: true,\n    onlyDirectories: true,\n  });\n\n  const dirPaths = unIgnoredDirPaths.filter((dirPath) => isFalse(isIgnored(ignores, dirPath)));\n\n  const parentExportInfo = exportInfos.filter(\n    (exportInfo) => exportInfo.resolvedDirPath === filePath,\n  );\n  const descendants = await Promise.all(\n    dirPaths.map(async (globDirPath) => {\n      const includeExportInfos = exportInfos\n        .filter((exportInfo) => exportInfo.resolvedDirPath === globDirPath)\n        .filter((exportInfo) => {\n          const ignoreInFile = ignores[exportInfo.resolvedFilePath];\n          const namedExportIdentifiers = exportInfo.namedExports.map(\n            (namedExport) => namedExport.identifier,\n          );\n\n          if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\n            return false;\n          }\n\n          if (\n            typeof ignoreInFile === 'string' &&\n            ignoreInFile === exportInfo.defaultExport?.identifier &&\n            namedExportIdentifiers.length <= 0\n          ) {\n            return false;\n          }\n\n          if (\n            isNotEmpty(exportInfo.defaultExport?.identifier) &&\n            ignoreInFile !== exportInfo.defaultExport?.identifier\n          ) {\n            return true;\n          }\n\n          if (namedExportIdentifiers.length > 0) {\n            return true;\n          }\n\n          return isEmpty(ignoreInFile);\n        });\n\n      const includeDirFilePaths = await fs.promises.readdir(globDirPath, { withFileTypes: true });\n\n      return {\n        dirPath: globDirPath,\n        isTerminal: isFalse(\n          includeDirFilePaths.some((includeDirFilePath) => includeDirFilePath.isDirectory()),\n        ),\n        depth: getRelativeDepth(option.startAt, globDirPath),\n        exportInfos: includeExportInfos,\n      };\n    }),\n  );\n\n  const sortedDescendents = [\n    {\n      dirPath: filePath,\n      isTerminal: await isEmptyDir(filePath),\n      depth: getRelativeDepth(option.startAt, filePath),\n      exportInfos: parentExportInfo,\n    },\n    ...descendants,\n  ].sort((l, r) => {\n    const depthDiff = l.depth - r.depth;\n\n    if (depthDiff !== 0) {\n      return depthDiff;\n    }\n\n    return l.dirPath.localeCompare(r.dirPath);\n  });\n\n  return sortedDescendents;\n}\n","import path from 'path';\n\nexport default function appendDotDirPrefix(filePath: string, sep?: string): string {\n  const pathSep = sep ?? path.sep;\n\n  if (filePath.startsWith('.')) {\n    return filePath;\n  }\n\n  if (filePath === '') {\n    return `.${pathSep}`;\n  }\n\n  return `.${pathSep}${filePath}`;\n}\n","/*\n// valid ext\n// '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\n\n  from checker.js\n  src/compiler/checker.ts:\n  src/compiler/checker.ts:            [\".mts\", \".mjs\"],\n\n  tests/baselines/reference/declarationEmitInvalidReferenceAllowJs.errors.txt:\n  tests/cases/compiler/declarationEmitInvalidReferenceAllowJs.ts(1,22): \n  error TS6231: Could not resolve the path 'tests/cases/compiler/invalid' with the extensions: \n  '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\n */\n\nconst extensions = ['.ts', '.tsx', '.d.ts', '.cts', '.d.cts', '.mts', '.d.mts'];\n\nexport default extensions;\n","import extensions from '@tools/extensions';\nimport { isFalse } from 'my-easy-fp';\nimport path from 'path';\n\nexport default function getExtname(filePath: string): string {\n  if (extensions.every((extension) => isFalse(filePath.endsWith(extension)))) {\n    return path.extname(filePath);\n  }\n\n  if (filePath.endsWith('.d.ts')) {\n    return '.d.ts';\n  }\n\n  if (filePath.endsWith('.d.cts')) {\n    return '.d.cts';\n  }\n\n  if (filePath.endsWith('.d.mts')) {\n    return '.d.mts';\n  }\n\n  return path.extname(filePath);\n}\n","import { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\nimport extensions from '@tools/extensions';\nimport getExtname from '@tools/getExtname';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport { replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nfunction isKeepExt({\n  relativePath,\n  declareExtensions,\n  extname,\n  isIndex,\n}: {\n  relativePath?: string;\n  declareExtensions: string[];\n  extname: string;\n  isIndex: boolean;\n}) {\n  if (isNotEmpty(relativePath) && declareExtensions.includes(extname)) {\n    return true;\n  }\n\n  if (isNotEmpty(relativePath) && isIndex && extname === '.tsx') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getRelativePath(filePath: string, option: TCreateOrSingleOption, relativePath?: string) {\n  const declareExtensions = extensions.filter((ext) => ext.startsWith('.d'));\n  const extname = getExtname(filePath);\n  const basename = path.basename(filePath, extname);\n  const isIndex = basename.endsWith('index');\n\n  if (isKeepExt({ relativePath, declareExtensions, extname, isIndex })) {\n    if (isEmpty(relativePath)) {\n      throw new Error(`empty path: ${relativePath}`);\n    }\n\n    const relativeDirPath = replaceSepToPosix(\n      path.posix.relative(relativePath, path.dirname(filePath)),\n    );\n    const exportPath = `${basename}${extname}`;\n    const relativeDirPathWithDot = appendDotDirPrefix(\n      path.posix.join(relativeDirPath, exportPath),\n      path.posix.sep,\n    );\n\n    return relativeDirPathWithDot;\n  }\n\n  if (isNotEmpty(relativePath) && option.keepFileExt) {\n    const relativeDirPath = replaceSepToPosix(\n      path.posix.relative(relativePath, path.dirname(filePath)),\n    );\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\n    const relativeDirPathWithDot = appendDotDirPrefix(\n      path.posix.join(relativeDirPath, exportPath),\n      path.posix.sep,\n    );\n\n    return relativeDirPathWithDot;\n  }\n\n  if (isNotEmpty(relativePath)) {\n    const relativeDirPath = replaceSepToPosix(\n      path.posix.relative(relativePath, path.dirname(filePath)),\n    );\n    const exportPath = isIndex ? '' : `${basename}`;\n    const relativeDirPathWithDot = appendDotDirPrefix(\n      path.posix.join(relativeDirPath, exportPath),\n      path.posix.sep,\n    );\n\n    return relativeDirPathWithDot;\n  }\n\n  if (option.keepFileExt || declareExtensions.includes(extname)) {\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\n    const basenameWithDot = appendDotDirPrefix(exportPath, path.posix.sep);\n    return basenameWithDot;\n  }\n\n  const basenameWithDot = appendDotDirPrefix(basename, path.posix.sep);\n  return basenameWithDot;\n}\n\nexport default function getFilePathOnIndex(\n  filePath: string,\n  option: TCreateOrSingleOption,\n  relativePath?: string,\n) {\n  const semicolon = option.useSemicolon ? ';' : '';\n  const relativeDirPath = getRelativePath(filePath, option, relativePath);\n  return `${option.quote}${relativeDirPath}${option.quote}${semicolon}`;\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getDescendantExportInfo from '@modules/getDescendantExportInfo';\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\nimport { isDescendant, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport { AsyncReturnType } from 'type-fest';\n\n/*\n\nb, c는 비어 있다. 그래서 a에 index.ts를 만들 때는 d, e를 바로 링크해야 한다\nb, c는 만들면 안됨\n\na/\n>> a/index.ts\n\na/b/\na/b/c/\n\na/b/c/case01.ts\n>> a/b/c/index.ts\n\na/b/c/d/e/case02.ts\na/b/c/d/e/case03.ts\n>> a/b/c/index.ts 에 들어간다\n\na/b/c/f/g/case04.ts\n>> a/b/c/index.ts 에 들어간다\n */\n\n/**\n *\n * @param dirPath base directory for extract descendant directory\n * @param exportInfos every exportInfos\n * @param option ctix option\n * @returns descendant directory index info\n */\nexport default async function createDescendantIndex(\n  dirPath: string,\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TCreateOrSingleOption,\n): Promise<ICreateIndexInfo[]> {\n  const currentDepth = getRelativeDepth(option.startAt, dirPath);\n  const everyDescendants = await getDescendantExportInfo(dirPath, option, exportInfos, ignores);\n  const sortedEveryDescendants = everyDescendants.sort((l, r) => {\n    const depthDiff = l.depth - r.depth;\n    return depthDiff !== 0 ? depthDiff : r.dirPath.localeCompare(l.dirPath);\n  });\n\n  if (option.mode === 'create' && option.skipEmptyDir) {\n    const currentDirExportInfos = exportInfos.filter(\n      (exportInfo) => exportInfo.resolvedDirPath === dirPath,\n    );\n\n    // 내가 비어있으면 스킵\n    // top level 이라면, 비어 있더라도 index를 빌드해야 한다\n    // self directory is empty that will be skip\n    // If currentDepth is top level of depth that have to build index\n    if (currentDirExportInfos.length <= 0 && currentDepth !== 0) {\n      return [];\n    }\n\n    const indexNeedExportInfos = sortedEveryDescendants\n      .filter((descendent) => descendent.dirPath !== dirPath)\n      .reduce<Record<string, IDescendantExportInfo>>((aggregation, sortedEveryDescendant) => {\n        const alreadyRegisteredDirPaths = Object.keys(aggregation);\n\n        if (\n          alreadyRegisteredDirPaths.some((alreadyRegisteredDirPath) =>\n            isDescendant(alreadyRegisteredDirPath, sortedEveryDescendant.dirPath, path.posix.sep),\n          )\n        ) {\n          return aggregation;\n        }\n\n        if (sortedEveryDescendant.exportInfos.length <= 0) {\n          return aggregation;\n        }\n\n        return { ...aggregation, [sortedEveryDescendant.dirPath]: sortedEveryDescendant };\n      }, {});\n\n    const descendantIndexInfos = Object.values(indexNeedExportInfos).map((indexNeedExportInfo) => {\n      const filePath = getFilePathOnIndex(indexNeedExportInfo.dirPath, option, dirPath);\n\n      return {\n        depth: currentDepth,\n        resolvedDirPath: dirPath,\n        resolvedFilePath: undefined,\n        exportStatement: `export * from ${filePath}`,\n      };\n    }, {});\n\n    return descendantIndexInfos;\n  }\n\n  const descendantIndexInfos = everyDescendants\n    .filter((everyDescendant) => everyDescendant.depth === currentDepth + 1)\n    .map((exportedDescendant) => {\n      const filePath = getFilePathOnIndex(exportedDescendant.dirPath, option, dirPath);\n\n      return {\n        depth: currentDepth,\n        resolvedDirPath: replaceSepToPosix(dirPath),\n        resolvedFilePath: undefined,\n        exportStatement: `export * from ${filePath}`,\n      };\n    });\n\n  return descendantIndexInfos;\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport { getDirnameSync } from 'my-node-fp';\n\nexport default function createIndexInfo(\n  exportInfo: IExportInfo,\n  option: TCreateOrSingleOption,\n): ICreateIndexInfo[] {\n  if (\n    exportInfo.starExported &&\n    isNotEmpty(exportInfo.defaultExport) &&\n    exportInfo.namedExports.length > 0\n  ) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export * from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export * from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  return [];\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport defaultIgnore from '@ignores/defaultIgnore';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport isIgnored from '@ignores/isIgnored';\nimport getRelativeDepth from '@tools/getRelativeDepth';\nimport { posixJoin } from '@tools/misc';\nimport fastGlob from 'fast-glob';\nimport { isFalse } from 'my-easy-fp';\nimport { startSepRemove } from 'my-node-fp';\nimport path from 'path';\nimport { AsyncReturnType } from 'type-fest';\n\n/**\n *\n * @param exportInfos\n * @param ignores\n * @param option\n * @returns\n */\nexport default async function getDirPaths(\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TCreateOrSingleOption,\n): Promise<{ depths: Record<string, number>; dirPaths: Record<string, IExportInfo[]> }> {\n  const dirPathsFromExportInfos = await fastGlob(posixJoin(option.startAt, '**', '*'), {\n    onlyDirectories: true,\n    ignore: defaultIgnore,\n    cwd: option.startAt,\n  });\n\n  const filePaths = [option.startAt, ...dirPathsFromExportInfos].filter((dirPath) =>\n    isFalse(isIgnored(ignores, dirPath)),\n  );\n\n  const depths = filePaths.reduce<Record<string, number>>((aggregation, filePath) => {\n    return { ...aggregation, [filePath]: getRelativeDepth(option.startAt, filePath) };\n  }, {});\n\n  const dirPaths = filePaths.reduce<Record<string, IExportInfo[]>>((aggregation, filePath) => {\n    const files = exportInfos.filter((exportInfo) => {\n      return (\n        exportInfo.resolvedFilePath.indexOf(filePath) >= 0 &&\n        startSepRemove(exportInfo.resolvedFilePath.replace(filePath, ''), path.posix.sep).split(\n          path.posix.sep,\n        ).length <= 1\n      );\n    });\n\n    return { ...aggregation, [filePath]: files };\n  }, {});\n\n  return { depths, dirPaths };\n}\n","import ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport { isNotEmpty, settify } from 'my-easy-fp';\n\nexport default function mergeCreateIndexInfo(\n  origin: ICreateIndexInfos,\n  target: ICreateIndexInfos | ICreateIndexInfo,\n) {\n  const merged: ICreateIndexInfos = { ...origin };\n\n  merged.depth = target.depth;\n  merged.resolvedDirPath = target.resolvedDirPath;\n\n  if ('exportStatement' in target) {\n    merged.exportStatements = settify(\n      [...merged.exportStatements, target.exportStatement].filter(\n        (exportStatement): exportStatement is string => isNotEmpty(exportStatement),\n      ),\n    );\n\n    merged.resolvedFilePaths = settify(\n      [...(merged.resolvedFilePaths ?? []), target.resolvedFilePath].filter(\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\n      ),\n    );\n\n    merged.resolvedFilePaths =\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\n  } else {\n    merged.exportStatements = settify([\n      ...(merged.exportStatements ?? []),\n      ...target.exportStatements,\n    ]);\n\n    merged.resolvedFilePaths = settify(\n      [...(merged.resolvedFilePaths ?? []), ...(target.resolvedFilePaths ?? [])].filter(\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\n      ),\n    );\n    merged.resolvedFilePaths =\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\n  }\n\n  return merged;\n}\n","import progress from '@cli/progress';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport createDescendantIndex from '@modules/createDescendantIndex';\nimport createIndexInfo from '@modules/createIndexInfo';\nimport getDirPaths from '@modules/getDirPaths';\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport { isNotEmpty, settify } from 'my-easy-fp';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function createIndexInfos(\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TCreateOrSingleOption,\n): Promise<ICreateIndexInfos[]> {\n  try {\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\n\n    const depthPairs = Object.keys(dirPaths)\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\n      .sort((l, r) => r.depth - l.depth);\n\n    progress.start(depthPairs.length * 2, 0);\n\n    const statementInfos = depthPairs\n      .map((depthPair) => {\n        if (depthPair.exportInfos.length <= 0) {\n          return [];\n        }\n\n        const statements = depthPair.exportInfos\n          .map((exportInfo) => {\n            const indexInfo = createIndexInfo(exportInfo, option);\n            return indexInfo;\n          })\n          .flat();\n\n        progress.increment();\n\n        return statements;\n      })\n      .flat()\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\n          return {\n            ...aggregation,\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\n              aggregation[indexInfo.resolvedDirPath],\n              indexInfo,\n            ),\n          };\n        }\n\n        return {\n          ...aggregation,\n          [indexInfo.resolvedDirPath]: {\n            depth: indexInfo.depth,\n            resolvedDirPath: indexInfo.resolvedDirPath,\n            resolvedFilePaths: settify(\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\n                isNotEmpty(resolvedFilePath),\n              ),\n            ),\n            exportStatements: [indexInfo.exportStatement],\n          },\n        };\n      }, {});\n\n    const descendantExportInfos = (\n      await Promise.all(\n        depthPairs.map(async (depthPair) => {\n          const indexInfo = await createDescendantIndex(\n            depthPair.dirPath,\n            exportInfos,\n            ignores,\n            option,\n          );\n\n          progress.increment();\n\n          return indexInfo;\n        }),\n      )\n    )\n      .flat()\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\n          return {\n            ...aggregation,\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\n              aggregation[indexInfo.resolvedDirPath],\n              indexInfo,\n            ),\n          };\n        }\n\n        return {\n          ...aggregation,\n          [indexInfo.resolvedDirPath]: {\n            depth: indexInfo.depth,\n            resolvedDirPath: indexInfo.resolvedDirPath,\n            resolvedFilePaths: isNotEmpty(indexInfo.resolvedFilePath)\n              ? [indexInfo.resolvedFilePath]\n              : indexInfo.resolvedFilePath,\n            exportStatements: [indexInfo.exportStatement],\n          },\n        };\n      }, {});\n\n    const mergedIndexInfos = depthPairs.reduce<Record<string, ICreateIndexInfos>>(\n      (aggregation, depthPair) => {\n        const statementInfo = statementInfos[depthPair.dirPath];\n        const descendantExportInfo = descendantExportInfos[depthPair.dirPath];\n\n        if (isNotEmpty(statementInfo) && isNotEmpty(descendantExportInfo)) {\n          return {\n            ...aggregation,\n            [depthPair.dirPath]: mergeCreateIndexInfo(\n              mergeCreateIndexInfo(aggregation[depthPair.dirPath], statementInfo),\n              descendantExportInfo,\n            ),\n          };\n        }\n\n        if (isNotEmpty(statementInfo)) {\n          return {\n            ...aggregation,\n            [depthPair.dirPath]: mergeCreateIndexInfo(\n              aggregation[depthPair.dirPath],\n              statementInfo,\n            ),\n          };\n        }\n\n        if (isNotEmpty(descendantExportInfo)) {\n          return {\n            ...aggregation,\n            [depthPair.dirPath]: mergeCreateIndexInfo(\n              aggregation[depthPair.dirPath],\n              descendantExportInfo,\n            ),\n          };\n        }\n\n        return { ...aggregation };\n      },\n      {},\n    );\n\n    progress.update(depthPairs.length * 2);\n\n    return Object.values(mergedIndexInfos).map((mergedIndexInfo) => {\n      return {\n        ...mergedIndexInfo,\n        exportStatements: mergedIndexInfo.exportStatements.sort((l, r) => l.localeCompare(r)),\n      };\n    });\n  } finally {\n    progress.stop();\n  }\n}\n","import { TRemoveOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport { posixJoin } from '@tools/misc';\nimport fastGlob from 'fast-glob';\nimport { settify } from 'my-easy-fp';\nimport { getDirname, isDescendant, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\n\nexport default async function getRemoveFiles(\n  project: tsm.Project,\n  option: TRemoveOptionWithDirInfo,\n) {\n  const filePaths = project\n    .getSourceFiles()\n    .filter((sourceFile) =>\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\n    )\n    .map((sourceFile) => replaceSepToPosix(sourceFile.getFilePath()));\n\n  const dirPaths = (await Promise.all(filePaths.map((filePath) => getDirname(filePath)))).map(\n    (dirPath) => replaceSepToPosix(dirPath),\n  );\n\n  const globPatterns = option.includeBackup\n    ? settify([\n        posixJoin(option.startAt, option.exportFilename),\n        posixJoin(option.startAt, `${option.exportFilename}.bak`),\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', `${option.exportFilename}.bak`)),\n      ])\n    : settify([\n        posixJoin(option.startAt, option.exportFilename),\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\n      ]);\n\n  const files = await fastGlob(globPatterns, { dot: true, cwd: option.startAt });\n\n  return files;\n}\n","import { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport { isFalse } from 'my-easy-fp';\nimport { getDirnameSync, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\nimport * as tsm from 'ts-morph';\n\nfunction getTsconfigRootDir(compilerOptions: tsm.CompilerOptions): string | undefined {\n  // If set rootDir, use it\n  if (compilerOptions.rootDir !== undefined && compilerOptions.rootDir !== null) {\n    const rootDir = path.resolve(compilerOptions.rootDir);\n    return replaceSepToPosix(rootDir);\n  }\n\n  // If set rootDirs, use first element of array\n  if (compilerOptions.rootDirs !== undefined && compilerOptions.rootDirs !== null) {\n    const [head] = compilerOptions.rootDirs;\n    const rootDir = path.resolve(head);\n    return replaceSepToPosix(rootDir);\n  }\n\n  return undefined;\n}\n\nexport default function getOutputDir(\n  project: tsm.Project,\n  option: TSingleOptionWithDirInfo,\n): string {\n  if (isFalse(option.useRootDir ?? false)) {\n    return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\n  }\n\n  const compilerOptions = project.getCompilerOptions();\n  const rootDir = getTsconfigRootDir(compilerOptions);\n\n  if (rootDir !== undefined && rootDir !== null) {\n    const outputDirConfig = replaceSepToPosix(getDirnameSync(option.output));\n\n    if (path.relative(rootDir, outputDirConfig).startsWith('..')) {\n      return rootDir;\n    }\n\n    return replaceSepToPosix(path.resolve(outputDirConfig));\n  }\n\n  return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\n}\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\nimport getOutputDir from '@writes/getOutputDir';\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\n\nexport default function singleIndexInfo(\n  exportInfo: IExportInfo,\n  option: TSingleOptionWithDirInfo,\n  project: tsm.Project,\n): ICreateIndexInfo[] {\n  const outputDir = getOutputDir(project, option);\n\n  if (\n    exportInfo.starExported &&\n    isNotEmpty(exportInfo.defaultExport) &&\n    exportInfo.namedExports.length > 0\n  ) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export * from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export * from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n    const statement = exportInfo.namedExports\n      .map((namedExport) =>\n        namedExport.isIsolatedModules\n          ? `type ${namedExport.identifier}`\n          : `${namedExport.identifier}`,\n      )\n      .join(', ');\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: `export { ${statement} } from ${filePath}`,\n      },\n    ];\n  }\n\n  if (isNotEmpty(exportInfo.defaultExport)) {\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\n\n    return [\n      {\n        depth: exportInfo.depth,\n        resolvedFilePath: exportInfo.resolvedFilePath,\n        resolvedDirPath: outputDir,\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\n      },\n    ];\n  }\n\n  return [];\n}\n","import progress from '@cli/progress';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getDirPaths from '@modules/getDirPaths';\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\nimport singleIndexInfo from '@modules/singleIndexInfo';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport { isNotEmpty, settify } from 'my-easy-fp';\nimport * as tsm from 'ts-morph';\nimport { AsyncReturnType } from 'type-fest';\n\nexport default async function singleIndexInfos(\n  exportInfos: IExportInfo[],\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\n  option: TSingleOptionWithDirInfo,\n  project: tsm.Project,\n): Promise<ICreateIndexInfos[]> {\n  try {\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\n\n    const depthPairs = Object.keys(dirPaths)\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\n      .sort((l, r) => r.depth - l.depth);\n\n    progress.start(depthPairs.length, 0);\n\n    const statementInfos = depthPairs\n      .map((depthPair) => {\n        if (depthPair.exportInfos.length <= 0) {\n          return [];\n        }\n\n        const statements = depthPair.exportInfos\n          .map((exportInfo) => singleIndexInfo(exportInfo, option, project))\n          .flatMap((nonFlatted) => nonFlatted);\n\n        progress.increment();\n\n        return statements;\n      })\n      .flatMap((nonFlatted) => nonFlatted)\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\n          return {\n            ...aggregation,\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\n              aggregation[indexInfo.resolvedDirPath],\n              indexInfo,\n            ),\n          };\n        }\n\n        return {\n          ...aggregation,\n          [indexInfo.resolvedDirPath]: {\n            depth: indexInfo.depth,\n            resolvedDirPath: indexInfo.resolvedDirPath,\n            resolvedFilePaths: settify(\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\n                isNotEmpty(resolvedFilePath),\n              ),\n            ),\n            exportStatements: [indexInfo.exportStatement],\n          },\n        };\n      }, {});\n\n    progress.update(depthPairs.length);\n\n    return Object.values(statementInfos);\n  } finally {\n    progress.stop();\n  }\n}\n","import IReason from '@cli/interfaces/IReason';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport IIdentifierWithNode from '@compilers/interfaces/IIdentifierWithNode';\nimport chalk from 'chalk';\nimport { isNotEmpty, settify } from 'my-easy-fp';\n\nfunction createReason(exportInfo: IExportInfo, identifier: string) {\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.defaultExport.identifier === identifier) {\n    const lineAndCharacter = exportInfo.defaultExport.node\n      .getSourceFile()\n      .getLineAndColumnAtPos(exportInfo.defaultExport.node.getStart(true));\n\n    const reason: IReason = {\n      type: 'error',\n      lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\n      nodes: [exportInfo.defaultExport.node],\n      source: exportInfo.defaultExport.node.getSourceFile(),\n      filePath: exportInfo.resolvedFilePath,\n      message: `detect same name of default export statement: \"${chalk.yellow(identifier)}\"`,\n    };\n\n    return [reason];\n  }\n\n  return exportInfo.namedExports\n    .filter((namedExport) => namedExport.identifier === identifier)\n    .map((namedExport) => {\n      const lineAndCharacter = namedExport.node\n        .getSourceFile()\n        .getLineAndColumnAtPos(namedExport.node.getStart(true));\n\n      const reason: IReason = {\n        type: 'error',\n        lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\n        nodes: [namedExport.node],\n        source: namedExport.node.getSourceFile(),\n        filePath: exportInfo.resolvedFilePath,\n        message: `detect same name of export statement: \"${chalk.yellow(identifier)}\"`,\n      };\n\n      return reason;\n    });\n}\n\n/**\n * Detect export duplication from every typescript source file.\n *\n * @param exportInfos export statements from every typescript source file\n * @returns\n */\nexport default function validateExportDuplication(exportInfos: IExportInfo[]) {\n  const exportInfoRecord = exportInfos.reduce<Record<string, IExportInfo[]>>(\n    (aggregation, exportInfo) => {\n      const next = { ...aggregation };\n      const exportedNames = [exportInfo.defaultExport, ...exportInfo.namedExports].filter(\n        (exportedName): exportedName is IIdentifierWithNode => isNotEmpty(exportedName),\n      );\n\n      exportedNames.forEach((exportedName) => {\n        next[exportedName.identifier] = [...(next[exportedName.identifier] ?? []), exportInfo];\n      });\n\n      return next;\n    },\n    {},\n  );\n\n  const duplicateRecord = Object.entries(exportInfoRecord)\n    .filter((exportPair) => {\n      const [, exportInfo] = exportPair;\n      return exportInfo.length > 1;\n    })\n    .reduce<Record<string, IExportInfo[]>>((aggregation, exportPair) => {\n      const [identifier, exportInfo] = exportPair;\n      return { ...aggregation, [identifier]: exportInfo };\n    }, {});\n\n  const reasons: IReason[] = Object.entries(duplicateRecord)\n    .map((exportPair) => {\n      const [identifier, duplicateExportInfos] = exportPair;\n      return duplicateExportInfos\n        .map((exportInfo) => createReason(exportInfo, identifier))\n        .flatMap((nonFlatted) => nonFlatted);\n    })\n    .flatMap((nonFlatted) => nonFlatted);\n\n  const filePaths = settify(\n    Object.values(duplicateRecord)\n      .map((duplicateRecordElement) => {\n        return duplicateRecordElement.map((element) => element.resolvedFilePath);\n      })\n      .flatMap((nonFlatted) => nonFlatted)\n      .filter((filePath): filePath is string => isNotEmpty(filePath) && filePath !== ''),\n  );\n\n  return {\n    valid: Object.keys(duplicateRecord).length <= 0,\n    filePaths: Array.from(new Set(filePaths)),\n    duplicate: duplicateRecord,\n    reasons,\n  };\n}\n","import IReason from '@cli/interfaces/IReason';\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport getExtname from '@tools/getExtname';\nimport chalk from 'chalk';\nimport path from 'path';\n\nexport default function validateFileNameDuplication(\n  exportInfos: IExportInfo[],\n  option: TCreateOrSingleOption,\n) {\n  if (option.mode === 'single') {\n    return {\n      valid: true,\n      exportInfos: [],\n      filePaths: [],\n      reasons: [],\n    };\n  }\n\n  const indexFileName = option.keepFileExt\n    ? option.exportFilename\n    : path.basename(option.exportFilename, getExtname(option.exportFilename));\n\n  const duplicate = exportInfos.filter((exportInfo) => {\n    const baseName = option.keepFileExt\n      ? path.basename(exportInfo.resolvedFilePath)\n      : path.basename(exportInfo.resolvedFilePath, getExtname(exportInfo.resolvedFilePath));\n\n    return baseName === indexFileName;\n  });\n\n  const reasons: IReason[] = Object.values(duplicate).map((exportInfo) => {\n    const reason: IReason = {\n      type: 'error',\n      filePath: exportInfo.resolvedFilePath,\n      message: `already exist file: \"${chalk.yellow(exportInfo.resolvedFilePath)}\"`,\n    };\n\n    return reason;\n  });\n\n  return {\n    valid: duplicate.length <= 0,\n    exportInfos: duplicate,\n    filePaths: duplicate.map((exportInfo) => exportInfo.resolvedFilePath),\n    reasons,\n  };\n}\n","import { isNotEmpty } from 'my-easy-fp';\nimport prettier from 'prettier';\n\nexport default async function prettierApply(project: string, contents: string) {\n  try {\n    const option = await prettier.resolveConfig(project, {\n      editorconfig: true,\n    });\n\n    if (isNotEmpty(option) && option.parser === 'typescript') {\n      const prettiered = prettier.format(contents, option);\n      return { apply: true, contents: prettiered };\n    }\n\n    return { apply: false, contents };\n  } catch (catched) {\n    return { apply: false, contents };\n  }\n}\n","import IReason from '@cli/interfaces/IReason';\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\nimport prettierApply from '@writes/prettierApply';\nimport chalk from 'chalk';\nimport dayjs from 'dayjs';\nimport fs from 'fs';\nimport { isFalse, isNotEmpty, isTrue } from 'my-easy-fp';\nimport { exists } from 'my-node-fp';\nimport path from 'path';\n\nfunction getFirstLineComment(option: TCreateOrSingleOption): string {\n  const today = dayjs();\n\n  if (option.useComment && option.useTimestamp) {\n    return `// created from ctix ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\n  }\n\n  if (option.useComment) {\n    return `// created from ctix${option.eol}${option.eol}`;\n  }\n\n  if (option.useTimestamp) {\n    return `// ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\n  }\n\n  return '';\n}\n\nexport default async function indexFileWrite(\n  indexInfos: ICreateIndexInfos[],\n  option: TCreateOrSingleOption,\n) {\n  const nullableReasons = await Promise.all(\n    indexInfos.map(async (indexInfo) => {\n      const indexFilePath = path.join(indexInfo.resolvedDirPath, option.exportFilename);\n      const indexFileContent = indexInfo.exportStatements.join(option.eol);\n      const firstLine = getFirstLineComment(option);\n      const prettierApplied = await prettierApply(\n        option.project,\n        `${firstLine}${indexFileContent}${option.eol}`,\n      );\n\n      if (isTrue(option.overwrite ?? false)) {\n        // index.ts file already exist, create backup file\n        if (await exists(indexFilePath)) {\n          await fs.promises.writeFile(\n            `${indexFilePath}.bak`,\n            await fs.promises.readFile(indexFilePath),\n          );\n        }\n\n        await fs.promises.writeFile(\n          indexFilePath,\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\n        );\n\n        return undefined;\n      }\n\n      if (isFalse(await exists(indexFilePath))) {\n        await fs.promises.writeFile(\n          indexFilePath,\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\n        );\n\n        return undefined;\n      }\n\n      const reason: IReason = {\n        type: 'error',\n        filePath: indexFilePath,\n        message: `Already exist \"${option.exportFilename}\": \"${chalk.yellow(indexFilePath)}\"`,\n      };\n\n      return reason;\n    }),\n  );\n\n  const reasons = nullableReasons.filter((reason): reason is IReason => isNotEmpty(reason));\n\n  return reasons;\n}\n","import IReason from '@cli/interfaces/IReason';\nimport progress from '@cli/progress';\nimport reasoner from '@cli/reasoner';\nimport spinner from '@cli/spinner';\nimport getExportInfos from '@compilers/getExportInfos';\nimport getTypeScriptProject from '@compilers/getTypeScriptProject';\nimport initialConfigLiteral from '@configs/initialConfigLiteral';\nimport {\n  TCreateOptionWithDirInfo,\n  TRemoveOptionWithDirInfo,\n  TSingleOptionWithDirInfo,\n  TTInitOptionWithDirInfo,\n} from '@configs/interfaces/IOption';\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\nimport getIgnoreConfigFiles from '@ignores/getIgnoreConfigFiles';\nimport createIndexInfos from '@modules/createIndexInfos';\nimport getRemoveFiles from '@modules/getRemoveFiles';\nimport singleIndexInfos from '@modules/singleIndexInfos';\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\nimport validateExportDuplication from '@validations/validateExportDuplication';\nimport validateFileNameDuplication from '@validations/validateFileNameDuplication';\nimport indexFileWrite from '@writes/indexFileWrite';\nimport fs from 'fs';\nimport { applyEdits, FormattingOptions, ModificationOptions, modify } from 'jsonc-parser';\nimport { isFalse, isNotEmpty } from 'my-easy-fp';\nimport { exists, getDirname, replaceSepToPosix } from 'my-node-fp';\nimport path from 'path';\n\nexport async function createWritor(option: TCreateOptionWithDirInfo, isMessageDisplay?: boolean) {\n  try {\n    progress.isEnable = isMessageDisplay ?? false;\n    spinner.isEnable = isMessageDisplay ?? false;\n    reasoner.isEnable = isMessageDisplay ?? false;\n\n    progress.stream = option.progressStream;\n    spinner.stream = option.spinnerStream;\n    reasoner.stream = option.reasonerStream;\n\n    spinner.start(\"ctix 'create' mode start, ...\");\n\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\n\n    spinner.update('project loading complete');\n\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\n\n    spinner.update('ignore file loading complete');\n\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\n\n    spinner.update('start validation');\n\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\n    const fileNameDuplicationValidateResult = validateFileNameDuplication(\n      totalExportInfos.filter((exportInfo) =>\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\n      ),\n      option,\n    );\n    const exportInfos = totalExportInfos.filter(\n      (exportInfo) =>\n        isFalse(\n          fileNameDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath),\n        ) &&\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\n    );\n\n    if (\n      isFalse(fileNameDuplicationValidateResult.valid) ||\n      isFalse(exportDuplicationValidateResult.valid)\n    ) {\n      process.exitCode = 1;\n    }\n\n    spinner.update(`generate ${option.exportFilename} content`);\n\n    const indexInfos = await createIndexInfos(exportInfos, ignoreContents, option);\n\n    spinner.update(`write each ${option.exportFilename} file`);\n\n    const writeReasons = await indexFileWrite(indexInfos, option);\n\n    spinner.update(`ctix 'create' mode complete!`);\n\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n\nexport async function singleWritor(option: TSingleOptionWithDirInfo, isMessageDisplay?: boolean) {\n  try {\n    progress.isEnable = isMessageDisplay ?? false;\n    spinner.isEnable = isMessageDisplay ?? false;\n    reasoner.isEnable = isMessageDisplay ?? false;\n\n    progress.stream = option.progressStream;\n    spinner.stream = option.spinnerStream;\n    reasoner.stream = option.reasonerStream;\n\n    spinner.start(\"ctix 'single' mode start, ...\");\n\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\n\n    spinner.update('project loading complete');\n\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\n\n    spinner.update('ignore file loading complete');\n\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\n\n    spinner.update('start validation');\n\n    const exportInfos = totalExportInfos.filter((exportInfo) =>\n      isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\n    );\n\n    if (isFalse(exportDuplicationValidateResult.valid)) {\n      process.exitCode = 1;\n    }\n\n    const indexInfos = await singleIndexInfos(exportInfos, ignoreContents, option, project);\n\n    spinner.update(`generate ${option.exportFilename} content`);\n\n    const writeReasons = await indexFileWrite(indexInfos, option);\n\n    spinner.update(`write each ${option.exportFilename} file`);\n\n    spinner.update(`ctix 'single' mode complete!`);\n\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n\nexport async function removeIndexFile(\n  option: TRemoveOptionWithDirInfo,\n  isMessageDisplay?: boolean,\n) {\n  try {\n    progress.isEnable = isMessageDisplay ?? false;\n    spinner.isEnable = isMessageDisplay ?? false;\n    reasoner.isEnable = isMessageDisplay ?? false;\n\n    spinner.start(\"ctix start 'remove' mode\");\n    reasoner.sleep(500);\n\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\n    const filePaths = await getRemoveFiles(project, option);\n\n    spinner.update(`remove each ${option.exportFilename} file`);\n\n    progress.start(filePaths.length, 0);\n\n    await Promise.all(\n      filePaths.map(async (filePath) => {\n        await fs.promises.unlink(filePath);\n\n        if (isMessageDisplay) {\n          progress.increment();\n        }\n      }),\n    );\n\n    reasoner.space();\n    spinner.update(`ctix 'remove' mode complete!`);\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n\nexport async function createInitFile(option: TTInitOptionWithDirInfo, isMessageDisplay?: boolean) {\n  progress.isEnable = isMessageDisplay ?? false;\n  spinner.isEnable = isMessageDisplay ?? false;\n  reasoner.isEnable = isMessageDisplay ?? false;\n\n  try {\n    spinner.start(\"ctix 'init' mode start, ...\");\n\n    const configPath = await getDirname(\n      option.config ?? option.project ?? path.resolve(process.cwd()),\n    );\n\n    const configFilePath = replaceSepToPosix(path.resolve(path.join(configPath, '.ctirc')));\n\n    const formattingOptions: FormattingOptions = {\n      insertSpaces: true,\n      tabSize: 2,\n      eol: '\\n',\n    };\n\n    const options: ModificationOptions = {\n      formattingOptions,\n    };\n\n    let modifiedInitialConfig: string = initialConfigLiteral;\n\n    if (isNotEmpty(option.project)) {\n      const projectFilePath = appendDotDirPrefix(\n        replaceSepToPosix(\n          path.join(\n            path.relative(configPath, await getDirname(option.project)),\n            path.basename(option.project),\n          ),\n        ),\n        path.posix.sep,\n      );\n\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['project'], projectFilePath, options),\n      );\n    }\n\n    if (isNotEmpty(option.output)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(\n          modifiedInitialConfig,\n          ['output'],\n          appendDotDirPrefix(\n            replaceSepToPosix(path.relative(configPath, option.output)),\n            path.posix.sep,\n          ),\n          options,\n        ),\n      );\n    } else if (isNotEmpty(option.project)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(\n          modifiedInitialConfig,\n          ['output'],\n          appendDotDirPrefix(\n            replaceSepToPosix(path.relative(configPath, await getDirname(option.project))),\n            path.posix.sep,\n          ),\n          options,\n        ),\n      );\n    } else {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['output'], configPath, options),\n      );\n    }\n\n    if (isNotEmpty(option.exportFilename)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['exportFilename'], option.exportFilename, options),\n      );\n    }\n\n    if (isNotEmpty(option.startAt)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['startAt'], option.startAt, options),\n      );\n    }\n\n    if (isNotEmpty(option.useSemicolon)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useSemicolon'], option.useSemicolon, options),\n      );\n    }\n\n    if (isNotEmpty(option.useTimestamp)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useTimestamp'], option.useTimestamp, options),\n      );\n    }\n\n    if (isNotEmpty(option.useComment)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useComment'], option.useComment, options),\n      );\n    }\n\n    if (isNotEmpty(option.quote)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['quote'], option.quote, options),\n      );\n    }\n\n    if (isNotEmpty(option.keepFileExt)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['keepFileExt'], option.keepFileExt, options),\n      );\n    }\n\n    if (isNotEmpty(option.skipEmptyDir)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['skipEmptyDir'], option.skipEmptyDir, options),\n      );\n    }\n\n    if (isNotEmpty(option.useRootDir)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['useRootDir'], option.useRootDir, options),\n      );\n    }\n\n    if (isNotEmpty(option.includeBackup)) {\n      modifiedInitialConfig = applyEdits(\n        modifiedInitialConfig,\n        modify(modifiedInitialConfig, ['includeBackup'], option.includeBackup, options),\n      );\n    }\n\n    if (await exists(configFilePath)) {\n      const reason: IReason = {\n        type: 'error',\n        filePath: configFilePath,\n        message: `configuration file(.ctirc) is already exists: ${configFilePath}`,\n      };\n\n      reasoner.start([reason]);\n    } else {\n      await fs.promises.writeFile(configFilePath, modifiedInitialConfig);\n    }\n\n    spinner.update(\"ctix 'init' mode complete!\");\n  } catch (catched) {\n    const err =\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\n\n    throw err;\n  } finally {\n    spinner.stop();\n    progress.stop();\n  }\n}\n"],"names":["sleepMs","path","parseGitignore"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"ctix.js","sources":["../../src/cli/progress.ts","../../src/cli/reasoner.ts","../../src/cli/spinner.ts","../../src/tools/getRefinedFilename.ts","../../src/compilers/getExportedName.ts","../../src/compilers/getIsIsolatedModules.ts","../../src/ignores/getRefineIgnorePath.ts","../../src/ignores/getCtiIgnorePattern.ts","../../src/tools/getRelativeDepth.ts","../../src/compilers/getExportInfo.ts","../../src/ignores/isIgnored.ts","../../src/compilers/getExportInfos.ts","../../src/compilers/getTypeScriptProject.ts","../../src/configs/initialConfigLiteral.ts","../../src/tools/misc.ts","../../src/ignores/getCtiignoreFiles.ts","../../src/ignores/getGitignoreFiles.ts","../../src/ignores/getNpmignoreFiles.ts","../../src/ignores/getIgnoreConfigContents.ts","../../src/ignores/getIgnoreConfigFiles.ts","../../src/ignores/defaultIgnore.ts","../../src/modules/getDescendantExportInfo.ts","../../src/tools/appendDotDirPrefix.ts","../../src/tools/extensions.ts","../../src/tools/getExtname.ts","../../src/modules/getFilePathOnIndex.ts","../../src/modules/createDescendantIndex.ts","../../src/modules/createIndexInfo.ts","../../src/modules/getDirPaths.ts","../../src/modules/mergeCreateIndexInfo.ts","../../src/modules/createIndexInfos.ts","../../src/modules/getRemoveFiles.ts","../../src/writes/getOutputDir.ts","../../src/modules/singleIndexInfo.ts","../../src/modules/singleIndexInfos.ts","../../src/validations/validateExportDuplication.ts","../../src/validations/validateFileNameDuplication.ts","../../src/writes/prettierApply.ts","../../src/writes/indexFileWrite.ts","../../src/ctix.ts"],"sourcesContent":["import TStreamType from '@configs/interfaces/TStreamType';\r\nimport chalk from 'chalk';\r\nimport { SingleBar } from 'cli-progress';\r\n\r\nclass CtixProgress {\r\n  #bar: SingleBar;\r\n\r\n  #stream: TStreamType;\r\n\r\n  #isEnable: boolean;\r\n\r\n  constructor() {\r\n    this.#bar = new SingleBar({\r\n      format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\r\n      barCompleteChar: '\\u25A0',\r\n      barIncompleteChar: ' ',\r\n      stopOnComplete: true,\r\n      barsize: 40,\r\n      stream: process.stdout,\r\n    });\r\n\r\n    this.#stream = 'stdout';\r\n\r\n    this.#isEnable = false;\r\n  }\r\n\r\n  set stream(value: TStreamType) {\r\n    if (value === 'stderr' && this.#stream === 'stdout') {\r\n      this.#bar.stop();\r\n\r\n      this.#bar = new SingleBar({\r\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\r\n        barCompleteChar: '\\u25A0',\r\n        barIncompleteChar: ' ',\r\n        stopOnComplete: true,\r\n        barsize: 40,\r\n        stream: process.stderr,\r\n      });\r\n\r\n      this.#stream = 'stderr';\r\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\r\n      this.#bar.stop();\r\n\r\n      this.#bar = new SingleBar({\r\n        format: `Progress [${chalk.green('{bar}')}] {percentage}% | {value}/{total}`,\r\n        barCompleteChar: '\\u25A0',\r\n        barIncompleteChar: ' ',\r\n        stopOnComplete: true,\r\n        barsize: 40,\r\n        stream: process.stdout,\r\n      });\r\n\r\n      this.#stream = 'stdout';\r\n    }\r\n  }\r\n\r\n  get isEnable() {\r\n    return this.#isEnable;\r\n  }\r\n\r\n  set isEnable(value) {\r\n    this.#isEnable = value;\r\n  }\r\n\r\n  start(max: number, initial: number) {\r\n    if (this.#isEnable) {\r\n      this.#bar.start(max, initial);\r\n    }\r\n  }\r\n\r\n  increment() {\r\n    if (this.#isEnable) {\r\n      this.#bar.increment();\r\n    }\r\n  }\r\n\r\n  update(current: number) {\r\n    if (this.#isEnable) {\r\n      this.#bar.update(current);\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.#bar.stop();\r\n  }\r\n}\r\n\r\nconst progress = new CtixProgress();\r\n\r\nexport default progress;\r\n","/* eslint-disable no-console */\r\nimport IReason from '@cli/interfaces/IReason';\r\nimport TStreamType from '@configs/interfaces/TStreamType';\r\nimport chalk from 'chalk';\r\nimport { isEmpty, isFalse, sleep as sleepMs } from 'my-easy-fp';\r\nimport * as path from 'path';\r\n\r\nclass CtixReasoner {\r\n  #isEnable: boolean;\r\n\r\n  #stream: TStreamType;\r\n\r\n  #streamWrite: typeof console.log;\r\n\r\n  constructor() {\r\n    this.#isEnable = false;\r\n    this.#streamWrite = console.error;\r\n    this.#stream = 'stderr';\r\n  }\r\n\r\n  set stream(value: TStreamType) {\r\n    if (value === 'stderr' && this.#stream === 'stdout') {\r\n      this.#streamWrite = console.error;\r\n      this.#stream = 'stderr';\r\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\r\n      this.#streamWrite = console.log;\r\n      this.#stream = 'stdout';\r\n    }\r\n  }\r\n\r\n  get isEnable() {\r\n    return this.#isEnable;\r\n  }\r\n\r\n  set isEnable(value) {\r\n    this.#isEnable = value;\r\n  }\r\n\r\n  async sleep(ms: number): Promise<void> {\r\n    if (this.#isEnable) {\r\n      await sleepMs(ms);\r\n    }\r\n  }\r\n\r\n  space(): void {\r\n    if (isFalse(this.#isEnable)) {\r\n      return;\r\n    }\r\n\r\n    this.#streamWrite('');\r\n  }\r\n\r\n  start(reasons: IReason[]): void {\r\n    if (isFalse(this.#isEnable)) {\r\n      return;\r\n    }\r\n\r\n    this.#streamWrite('');\r\n\r\n    reasons.forEach((reason) => {\r\n      const typeMessage =\r\n        reason.type === 'error'\r\n          ? chalk.bgRed(`   ${reason.type.toUpperCase()}   `)\r\n          : chalk.bgYellow(`   ${reason.type.toUpperCase()}    `);\r\n\r\n      const { filePath } = reason;\r\n\r\n      const filename = isEmpty(reason.lineAndCharacter)\r\n        ? `${path.basename(filePath)}`\r\n        : `${path.basename(filePath)}:${reason.lineAndCharacter.line}:${\r\n            reason.lineAndCharacter.character\r\n          }`;\r\n\r\n      const chevronRight = reason.type === 'error' ? chalk.red('>') : chalk.yellow('>');\r\n\r\n      this.#streamWrite(typeMessage, filename);\r\n\r\n      if (isEmpty(reason.lineAndCharacter)) {\r\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(`${filePath}`)}`);\r\n      } else {\r\n        this.#streamWrite(\r\n          `   ${chevronRight} ${chalk.gray(\r\n            `${filePath}:${reason.lineAndCharacter.line}:${reason.lineAndCharacter.character}`,\r\n          )}`,\r\n        );\r\n      }\r\n      reason.message.split('\\n').forEach((splittedMessage) => {\r\n        this.#streamWrite(`   ${chevronRight} ${chalk.gray(splittedMessage.trim())}`);\r\n      });\r\n\r\n      this.#streamWrite('');\r\n    });\r\n  }\r\n}\r\n\r\nconst reasoner = new CtixReasoner();\r\n\r\nexport default reasoner;\r\n","import TStreamType from '@configs/interfaces/TStreamType';\r\nimport { isNotEmpty } from 'my-easy-fp';\r\nimport ora from 'ora';\r\n\r\nclass CtixSpinner {\r\n  #spinner: ora.Ora;\r\n\r\n  #stream: TStreamType;\r\n\r\n  #isEnable: boolean;\r\n\r\n  constructor() {\r\n    this.#spinner = ora({ text: '', stream: process.stdout });\r\n    this.#isEnable = false;\r\n    this.#stream = 'stdout';\r\n  }\r\n\r\n  set stream(value: TStreamType) {\r\n    if (value === 'stderr' && this.#stream === 'stdout') {\r\n      this.#spinner.stop();\r\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stderr });\r\n\r\n      this.#stream = 'stderr';\r\n    } else if (value === 'stdout' && this.#stream === 'stderr') {\r\n      this.#spinner.stop();\r\n      this.#spinner = ora({ text: this.#spinner.text, stream: process.stdout });\r\n\r\n      this.#stream = 'stdout';\r\n    }\r\n  }\r\n\r\n  get isEnable() {\r\n    return this.#isEnable;\r\n  }\r\n\r\n  set isEnable(value) {\r\n    this.#isEnable = value;\r\n  }\r\n\r\n  start(message?: string) {\r\n    if (this.#isEnable && isNotEmpty(message)) {\r\n      this.#spinner.text = message;\r\n      this.#spinner.start();\r\n    } else if (this.#isEnable) {\r\n      this.#spinner.start();\r\n    }\r\n  }\r\n\r\n  update(message: string) {\r\n    if (this.#isEnable) {\r\n      this.#spinner.text = message;\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.#spinner.stopAndPersist();\r\n  }\r\n}\r\n\r\nconst spinner = new CtixSpinner();\r\n\r\nexport default spinner;\r\n","import { camelCase } from 'change-case';\r\nimport path from 'path';\r\nimport { upperCaseFirst } from 'upper-case-first';\r\n\r\nexport default function getRefinedFilename(filename: string): string {\r\n  const basename = path.basename(filename, path.extname(filename));\r\n\r\n  if (/^([A-Z])(.+)/.test(basename)) {\r\n    return upperCaseFirst(camelCase(basename));\r\n  }\r\n\r\n  return camelCase(basename);\r\n}\r\n","import getRefinedFilename from '@tools/getRefinedFilename';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default function getExportedName(exportedDeclarationNode: tsm.ExportedDeclarations): string {\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\r\n    const classDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ClassDeclaration,\r\n    );\r\n\r\n    return classDeclarationNode.getNameOrThrow().toString();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\r\n    const variableDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.VariableDeclaration,\r\n    );\r\n    return variableDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\r\n    const arrowFunctionNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.ArrowFunction);\r\n    const name = arrowFunctionNode.getSymbolOrThrow().getEscapedName();\r\n\r\n    if (name === '__function') {\r\n      const sourceFile = arrowFunctionNode.getSourceFile();\r\n      const filename = sourceFile.getBaseName();\r\n      const basename = getRefinedFilename(filename);\r\n      return basename;\r\n    }\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\r\n    const functionDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.FunctionDeclaration,\r\n    );\r\n\r\n    const name = functionDeclarationNode.getName();\r\n\r\n    if (isEmpty(name)) {\r\n      const sourceFile = functionDeclarationNode.getSourceFile();\r\n      const filename = sourceFile.getBaseName();\r\n      const basename = getRefinedFilename(filename);\r\n      return basename;\r\n    }\r\n\r\n    return functionDeclarationNode.getNameOrThrow().toString();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\r\n    const interfaceDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.InterfaceDeclaration,\r\n    );\r\n    return interfaceDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\r\n    const typeAliasDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.TypeAliasDeclaration,\r\n    );\r\n    return typeAliasDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\r\n    const enumDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.EnumDeclaration,\r\n    );\r\n    return enumDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\r\n    const moduleDeclarationNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ModuleDeclaration,\r\n    );\r\n    return moduleDeclarationNode.getName();\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\r\n    const arrayLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ArrayLiteralExpression,\r\n    );\r\n\r\n    const sourceFile = arrayLiteralExpressionNode.getSourceFile();\r\n    const filename = sourceFile.getBaseName();\r\n    const basename = getRefinedFilename(filename);\r\n    return basename;\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\r\n    const objectLiteralExpressionNode = exportedDeclarationNode.asKindOrThrow(\r\n      tsm.SyntaxKind.ObjectLiteralExpression,\r\n    );\r\n\r\n    const sourceFile = objectLiteralExpressionNode.getSourceFile();\r\n    const filename = sourceFile.getBaseName();\r\n    const basename = getRefinedFilename(filename);\r\n    return basename;\r\n  }\r\n\r\n  if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\r\n    const bindingElementNode = exportedDeclarationNode.asKindOrThrow(tsm.SyntaxKind.BindingElement);\r\n    return bindingElementNode.getName();\r\n  }\r\n\r\n  throw new Error(\r\n    `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\r\n  );\r\n}\r\n","import { isNotEmpty } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default function getIsIsolatedModules(\r\n  ...exportedDeclarationNodes: tsm.ExportedDeclarations[]\r\n): boolean {\r\n  return exportedDeclarationNodes\r\n    .map((exportedDeclarationNode) => {\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ClassDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.VariableDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrowFunction))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.FunctionDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.InterfaceDeclaration))) {\r\n        return true;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.TypeAliasDeclaration))) {\r\n        return true;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.EnumDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ModuleDeclaration))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ArrayLiteralExpression))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.ObjectLiteralExpression))) {\r\n        return false;\r\n      }\r\n\r\n      if (isNotEmpty(exportedDeclarationNode.asKind(tsm.SyntaxKind.BindingElement))) {\r\n        return false;\r\n      }\r\n\r\n      throw new Error(\r\n        `Cannot support type: (${exportedDeclarationNode.getKind()}) ${exportedDeclarationNode.getText()}`,\r\n      );\r\n    })\r\n    .some(Boolean);\r\n}\r\n","import os from 'os';\r\n\r\nexport default function getRefineIgnorePath(filePath: string): string {\r\n  if (os.platform() === 'win32') {\r\n    const matched = /^([a-zA-Z]:)(\\/|)(.+)$/.exec(filePath.trim());\r\n    if (matched === null || matched === undefined || matched.length < 4) {\r\n      return filePath.startsWith('/') ? filePath.substring(1) : filePath;\r\n    }\r\n    return matched[3];\r\n  }\r\n\r\n  return filePath.startsWith('/') ? filePath.substring(1) : filePath;\r\n}\r\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default function getCtiIgnorePattern(\r\n  ig: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  filePath: string,\r\n) {\r\n  // stage 00. refine filePath\r\n  const refinedFilePath = getRefineIgnorePath(filePath);\r\n\r\n  // stage 03. check ctiignore, if match partial return false\r\n  // ignores function cache match result, so full-match create cache that is enhance performance\r\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\r\n  if (ig.cti.ignores(refinedFilePath)) {\r\n    const detailIgnoreds = ig.data.cti.withValue\r\n      .map((withValue) => ({\r\n        ignored: withValue.ignore.ignores(refinedFilePath),\r\n        pattern: withValue.pattern,\r\n      }))\r\n      .filter((ignored) => ignored.ignored);\r\n\r\n    // detailIgnoreds가 1개 이상이라면 사실 ignore 파일 설계가 잘못된 것이라서 warning을 해주는게 필요하다\r\n    return detailIgnoreds.at(0)?.pattern;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n","import { isEmpty } from 'my-easy-fp';\r\nimport { replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nexport default function getRelativeDepth(basePaths: string | string[], dirPath: string) {\r\n  const basePath = typeof basePaths === 'string' ? basePaths : basePaths.at(0);\r\n\r\n  if (isEmpty(basePath)) {\r\n    throw new Error('[getRelativeDepth] basePaths is empty array');\r\n  }\r\n\r\n  const relativePath = replaceSepToPosix(\r\n    path.relative(replaceSepToPosix(basePath), replaceSepToPosix(dirPath)),\r\n  );\r\n\r\n  if (relativePath === '') {\r\n    return 0;\r\n  }\r\n\r\n  if (relativePath === '.') {\r\n    return 0;\r\n  }\r\n\r\n  const depth = relativePath.split(path.posix.sep);\r\n  return depth.length;\r\n}\r\n","import getExportedName from '@compilers/getExportedName';\r\nimport getIsIsolatedModules from '@compilers/getIsIsolatedModules';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getCtiIgnorePattern from '@ignores/getCtiIgnorePattern';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\r\nimport { getDirname, getDirnameSync, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nfunction getFirstExportName(exportedDeclarations: tsm.ExportedDeclarations[]): string {\r\n  const [exportedDeclaration] = exportedDeclarations;\r\n  const exportedName = getExportedName(exportedDeclaration);\r\n  return exportedName;\r\n}\r\n\r\nfunction isStarExport(ignoreInFile?: string | string[]) {\r\n  if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(ignoreInFile) && ignoreInFile.length <= 0) {\r\n    return true;\r\n  }\r\n\r\n  return isEmpty(ignoreInFile);\r\n}\r\n\r\nexport default async function getExportInfo(\r\n  sourceFile: tsm.SourceFile,\r\n  option: TCreateOrSingleOption,\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n): Promise<IExportInfo> {\r\n  const filePath = sourceFile.getFilePath().toString();\r\n  const dirPath = replaceSepToPosix(path.resolve(await getDirname(filePath)));\r\n  const ignoreInFile = getCtiIgnorePattern(ignores, filePath);\r\n  const exportedDeclarationsMap = sourceFile.getExportedDeclarations();\r\n  const defaultExportedDeclarations = exportedDeclarationsMap.get('default')?.at(0);\r\n  const defaultExportedName = isNotEmpty(defaultExportedDeclarations)\r\n    ? {\r\n        identifier: getExportedName(defaultExportedDeclarations),\r\n        node: defaultExportedDeclarations,\r\n        isIsolatedModules: getIsIsolatedModules(defaultExportedDeclarations),\r\n      }\r\n    : undefined;\r\n\r\n  const namedExports = Array.from(exportedDeclarationsMap.entries())\r\n    .filter(([identifier]) => identifier !== 'default')\r\n    .filter((exportedDeclarationsWithKey) => {\r\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\r\n\r\n      if (typeof ignoreInFile === 'string') {\r\n        if (ignoreInFile === '*') {\r\n          return false;\r\n        }\r\n\r\n        const [firstNode] = exportedDeclarations;\r\n        const name = getExportedName(firstNode);\r\n        return ignoreInFile !== name;\r\n      }\r\n\r\n      if (\r\n        Array.isArray(ignoreInFile) &&\r\n        ignoreInFile.length > 0 &&\r\n        typeof ignoreInFile[0] === 'string'\r\n      ) {\r\n        const name = getFirstExportName(exportedDeclarations);\r\n        return isFalse(ignoreInFile.includes(name));\r\n      }\r\n\r\n      return isEmpty(ignoreInFile);\r\n    })\r\n    .map((exportedDeclarationsWithKey) => {\r\n      const [, exportedDeclarations] = exportedDeclarationsWithKey;\r\n      const [exportedDeclaration] = exportedDeclarations;\r\n      return {\r\n        identifier: getExportedName(exportedDeclaration),\r\n        node: exportedDeclaration,\r\n        isIsolatedModules: getIsIsolatedModules(...exportedDeclarations),\r\n      };\r\n    });\r\n\r\n  const relativeFilePath = path.relative(getDirnameSync(option.project), filePath);\r\n  const defaultExport =\r\n    isNotEmpty(defaultExportedName) &&\r\n    isFalse((ignoreInFile ?? []).includes(defaultExportedName.identifier))\r\n      ? defaultExportedName\r\n      : undefined;\r\n\r\n  const exportInfo: IExportInfo = {\r\n    isEmpty: isEmpty(defaultExport) && namedExports.length <= 0,\r\n    resolvedFilePath: replaceSepToPosix(path.resolve(filePath)),\r\n    resolvedDirPath: dirPath,\r\n    relativeFilePath: replaceSepToPosix(relativeFilePath),\r\n    depth: getRelativeDepth(option.startAt, dirPath),\r\n    starExported: isStarExport(ignoreInFile),\r\n    defaultExport,\r\n    namedExports,\r\n  };\r\n\r\n  return exportInfo;\r\n}\r\n","import getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getRefineIgnorePath from '@ignores/getRefineIgnorePath';\r\nimport minimatch from 'minimatch';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default function isIgnored(\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  filePath: string,\r\n) {\r\n  // stage 00. refine filePath\r\n  const refinedFilePath = getRefineIgnorePath(filePath);\r\n\r\n  // stage 01. check gitignore\r\n  if (ignores.git.ignores(refinedFilePath)) {\r\n    return true;\r\n  }\r\n\r\n  // stage 02. check npmignore\r\n  if (ignores.npm.map((pattern) => minimatch(filePath, pattern)).some((match) => match)) {\r\n    return true;\r\n  }\r\n\r\n  // stage 03. check ctiignore, if match partial return false\r\n  // ignores function cache match result, so full-match create cache that is enhance performance\r\n  // ignores는 매치 결과를 캐시하기 때문에 아래처럼 전체로 결과를 매치해준다\r\n  if (ignores.cti.ignores(refinedFilePath)) {\r\n    const detailIgnoreds = ignores.data.cti.withValue\r\n      .map((withValue) => ({\r\n        ignored: withValue.ignore.ignores(refinedFilePath),\r\n        pattern: withValue.pattern,\r\n      }))\r\n      .filter((ignored) => ignored.ignored);\r\n\r\n    return isFalse(detailIgnoreds.some((ignored) => ignored.pattern !== '*'));\r\n  }\r\n\r\n  return false;\r\n}\r\n","import getExportInfo from '@compilers/getExportInfo';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport isIgnored from '@ignores/isIgnored';\r\nimport { isEmpty, isFalse } from 'my-easy-fp';\r\nimport { isDescendant } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function getExportInfos(\r\n  project: tsm.Project,\r\n  option: TCreateOrSingleOption,\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n) {\r\n  const sourceFiles = project\r\n    .getSourceFiles()\r\n    .filter((sourceFile) =>\r\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\r\n    )\r\n    .filter(\r\n      (sourceFile) => path.basename(sourceFile.getFilePath().toString()) !== option.exportFilename,\r\n    )\r\n    .filter((sourceFile) => isFalse(isIgnored(ignores, sourceFile.getFilePath().toString())));\r\n\r\n  const exportInfos = (\r\n    await Promise.all(sourceFiles.map((sourceFile) => getExportInfo(sourceFile, option, ignores)))\r\n  ).filter((exportInfo) => isFalse(exportInfo.isEmpty));\r\n\r\n  const exportRecord = exportInfos.reduce<Record<string, IExportInfo>>(\r\n    (aggregation, exportInfo) => {\r\n      if (isEmpty(aggregation[exportInfo.resolvedFilePath])) {\r\n        return { ...aggregation, [exportInfo.resolvedFilePath]: exportInfo };\r\n      }\r\n\r\n      return aggregation;\r\n    },\r\n    {},\r\n  );\r\n\r\n  return Object.values(exportRecord);\r\n}\r\n","import * as tsm from 'ts-morph';\r\n\r\n/**\r\n * @param param.tsconfig\r\n * @param param.ignore\r\n * @returns\r\n */\r\nexport default function getTypeScriptProject(projectPath: string): tsm.Project {\r\n  // Exclude exclude file in .ctiignore file: more exclude progress\r\n  const project = new tsm.Project({ tsConfigFilePath: projectPath });\r\n  return project;\r\n}\r\n","const initialConfigLiteral = `{\r\n  // common configuration\r\n  // tsconfig.json path: you must pass path with filename, like this \"./tsconfig.json\"\r\n  \"project\": \"\",\r\n  \r\n  // Export filename, if you not pass this field that use \"index.ts\" or \"index.d.ts\"\r\n  \"exportFilename\": \"index.ts\",\r\n\r\n\r\n  // create, single command configuration\r\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\r\n  \"useSemicolon\": true,\r\n\r\n  // timestamp write on ctix comment right-side, only works in useComment option set true\r\n  \"useTimestamp\": false,\r\n  \r\n  // add ctix comment at first line of creted index.ts file, that remark created from ctix\r\n  \"useComment\": false,\r\n\r\n  // quote mark \" or '\r\n  \"quote\": \"'\",\r\n  // overwrite index.ts file also index.ts file already exist that create backup file\r\n  \"overwrite\": false,\r\n  // keep file extension in export statement path\r\n  \"keepFileExt\": false,\r\n\r\n  \r\n  // only create command configuration\r\n  // If set true this option, skip empty directory\r\n  \"skipEmptyDir\": true,\r\n\r\n\r\n  // only single command configuration\r\n  // Output directory. It works only single mode.\r\n  \"output\": \"\",\r\n  // Use rootDir or rootDirs configuration in tsconfig.json.\r\n  \"useRootDir\": true,\r\n\r\n  // only remove command configuration\r\n  // remove with backup file\r\n  \"includeBackup\": true\r\n}`;\r\n\r\nexport default initialConfigLiteral;\r\n","import fastGlob from 'fast-glob';\r\nimport fastSafeStringify from 'fast-safe-stringify';\r\nimport { isNotEmpty } from 'my-easy-fp';\r\nimport { replaceSepToPosix } from 'my-node-fp';\r\nimport * as path from 'path';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport function posixJoin(...args: string[]): string {\r\n  return replaceSepToPosix(path.join(...args));\r\n}\r\n\r\nexport async function fastGlobWrap(\r\n  pattern: string | string[],\r\n  options: Parameters<typeof fastGlob>[1],\r\n  sep?: string,\r\n) {\r\n  const patterns = Array.isArray(pattern) ? pattern : [pattern];\r\n  const unixifyPatterns = patterns.map((nonUnixifyPattern) => replaceSepToPosix(nonUnixifyPattern));\r\n  const unixifyFiles = await fastGlob(unixifyPatterns, options);\r\n  const files = isNotEmpty(sep)\r\n    ? unixifyFiles.map((file) => file.replace(/\\//g, sep))\r\n    : unixifyFiles;\r\n  return files;\r\n}\r\n\r\nexport function getTestValue<T>(testData: T) {\r\n  const stringifiedString = fastSafeStringify(\r\n    testData,\r\n    (_key, value) => {\r\n      if (value === '[Circular]') {\r\n        return undefined;\r\n      }\r\n\r\n      if (value instanceof tsm.Node) {\r\n        return undefined;\r\n      }\r\n\r\n      return value;\r\n    },\r\n    2,\r\n  );\r\n\r\n  return JSON.parse(stringifiedString);\r\n}\r\n","import getRefineIgnorePath from '@ignores/getRefineIgnorePath';\r\nimport IGetIgnoredConfigContents from '@ignores/interfaces/IGetIgnoredConfigContents';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fs from 'fs';\r\nimport ignore, { Ignore } from 'ignore';\r\nimport { parse } from 'jsonc-parser';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { exists } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\ntype TWithValue = Array<{ filePath: string; ignore: Ignore; pattern: string | string[] }>;\r\n\r\ninterface IGetCtiignoreFilesReturn {\r\n  origin: IGetIgnoredConfigContents;\r\n  ignore: Ignore;\r\n  withValue: TWithValue;\r\n}\r\n\r\nexport default async function getCtiignoreFiles(\r\n  cwd: string,\r\n  filePath: string,\r\n): Promise<IGetCtiignoreFilesReturn> {\r\n  try {\r\n    if (isFalse(await exists(filePath))) {\r\n      throw new Error(`invalid ignore filePath: ${filePath}`);\r\n    }\r\n\r\n    const fileBuf = await fs.promises.readFile(filePath);\r\n    const ignoreFiles: IGetIgnoredConfigContents = parse(fileBuf.toString());\r\n    const ig: IGetCtiignoreFilesReturn = { origin: ignoreFiles, ignore: ignore(), withValue: [] };\r\n\r\n    ig.ignore.add(\r\n      Object.keys(ignoreFiles)\r\n        .map((ignoreFile) =>\r\n          path.isAbsolute(ignoreFile) ? ignoreFile : posixJoin(cwd, ignoreFile),\r\n        )\r\n        .map((pattern) => getRefineIgnorePath(pattern)),\r\n    );\r\n\r\n    ig.withValue = Object.entries(ignoreFiles).map((ignoreFile) => {\r\n      const [ignoreFilePathKey, pattern] = ignoreFile;\r\n      const subIgnore = ignore().add(\r\n        [ignoreFilePathKey]\r\n          .map((filePathKey) =>\r\n            path.isAbsolute(filePathKey) ? filePathKey : posixJoin(cwd, filePathKey),\r\n          )\r\n          .map((filePathKey) => getRefineIgnorePath(filePathKey)),\r\n      );\r\n\r\n      return { ignore: subIgnore, filePath: ignoreFilePathKey, pattern };\r\n    });\r\n\r\n    return ig;\r\n  } catch {\r\n    return { origin: {}, ignore: ignore(), withValue: [] };\r\n  }\r\n}\r\n","import { posixJoin } from '@tools/misc';\r\nimport fs from 'fs';\r\nimport ignore, { Ignore } from 'ignore';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { exists, getDirname } from 'my-node-fp';\r\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\r\nimport getRefineIgnorePath from './getRefineIgnorePath';\r\n\r\nexport default async function getGitignoreFiles(\r\n  filePath: string,\r\n): Promise<{ patterns: string[]; state?: gitignore.State; ignore: Ignore }> {\r\n  try {\r\n    if (isFalse(await exists(filePath))) {\r\n      throw new Error('invalid .gitignore filepath');\r\n    }\r\n\r\n    const fileBuf = await fs.promises.readFile(filePath);\r\n    const dirPath = await getDirname(filePath);\r\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\r\n    const ig: { patterns: string[]; parsed: gitignore.State; ignore: Ignore } = {\r\n      parsed: parsedIgnoreFile,\r\n      patterns: parsedIgnoreFile.patterns,\r\n      ignore: ignore(),\r\n    };\r\n\r\n    ig.ignore.add(\r\n      parsedIgnoreFile.patterns\r\n        .map((pattern) => posixJoin(dirPath, pattern))\r\n        .map((pattern) => getRefineIgnorePath(pattern)),\r\n    );\r\n\r\n    return ig;\r\n  } catch {\r\n    return { patterns: [], state: undefined, ignore: ignore() };\r\n  }\r\n}\r\n","import { posixJoin } from '@tools/misc';\r\nimport fs from 'fs';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { exists, getDirname } from 'my-node-fp';\r\nimport gitignore, { parse as parseGitignore } from 'parse-gitignore';\r\nimport path from 'path';\r\n\r\nexport default async function getNpmignoreFiles(\r\n  filePath: string,\r\n): Promise<{ patterns: string[]; origin: string[]; state?: gitignore.State }> {\r\n  try {\r\n    if (isFalse(await exists(filePath))) {\r\n      return { patterns: [], origin: [], state: undefined };\r\n    }\r\n\r\n    const fileBuf = await fs.promises.readFile(filePath);\r\n    const dirPath = await getDirname(filePath);\r\n    const parsedIgnoreFile = parseGitignore(fileBuf.toString());\r\n    const patterns = parsedIgnoreFile.patterns.map((pattern) =>\r\n      path.isAbsolute(pattern) ? pattern : posixJoin(dirPath, pattern),\r\n    );\r\n\r\n    return { patterns, origin: parsedIgnoreFile.patterns, state: parsedIgnoreFile };\r\n  } catch {\r\n    return { patterns: [], origin: [], state: undefined };\r\n  }\r\n}\r\n","import getCtiignoreFiles from '@ignores/getCtiignoreFiles';\r\nimport getGitignoreFiles from '@ignores/getGitignoreFiles';\r\nimport type { IGetIgnoreConfigFiles } from '@ignores/getIgnoreConfigFiles';\r\nimport getNpmignoreFiles from '@ignores/getNpmignoreFiles';\r\nimport { Ignore } from 'ignore';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\ninterface IGetIgnoreConfigContentsReturn {\r\n  git: Ignore;\r\n  cti: Ignore;\r\n  npm: string[];\r\n\r\n  data: {\r\n    git: AsyncReturnType<typeof getGitignoreFiles>;\r\n    npm: AsyncReturnType<typeof getNpmignoreFiles>;\r\n    cti: AsyncReturnType<typeof getCtiignoreFiles>;\r\n  };\r\n}\r\n\r\nexport default async function getIgnoreConfigContents({\r\n  git,\r\n  npm,\r\n  cti,\r\n  cwd,\r\n}: IGetIgnoreConfigFiles & { cwd: string }): Promise<IGetIgnoreConfigContentsReturn> {\r\n  const gitignoreRecord = await getGitignoreFiles(git);\r\n  const npmignoreRecord = await getNpmignoreFiles(npm);\r\n  const ctiignoreRecord = await getCtiignoreFiles(cwd, cti);\r\n\r\n  return {\r\n    git: gitignoreRecord.ignore,\r\n    cti: ctiignoreRecord.ignore,\r\n    npm: npmignoreRecord.patterns,\r\n\r\n    data: {\r\n      git: gitignoreRecord,\r\n      cti: ctiignoreRecord,\r\n      npm: npmignoreRecord,\r\n    },\r\n  };\r\n}\r\n","import { replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nexport interface IGetIgnoreConfigFiles {\r\n  git: string;\r\n  cti: string;\r\n  npm: string;\r\n}\r\n\r\n/**\r\n * extract create-ts-index ignore file by glob pattern in cwd(current working directory)\r\n *\r\n * @param cwd current working directory\r\n * @returns return value is eithered. string array or error class.\r\n */\r\nexport default async function getIgnoreConfigFiles(\r\n  cwd: string,\r\n  ignoreFilePath: string,\r\n): Promise<IGetIgnoreConfigFiles> {\r\n  const resolvedCWD = path.resolve(cwd); // absolute path\r\n\r\n  // create gitignore glob pattern\r\n  const gitignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.gitignore'));\r\n\r\n  // create npmignore glob pattern\r\n  const npmignorePattern = replaceSepToPosix(path.join(resolvedCWD, '.npmignore'));\r\n\r\n  // create ctiignore glob pattern\r\n  const ctiignorePattern = ignoreFilePath;\r\n\r\n  // ctiignore file have dot charactor at file first so set true dot flag\r\n  const ignoreFiles = {\r\n    git: gitignorePattern,\r\n    cti: ctiignorePattern,\r\n    npm: npmignorePattern,\r\n  };\r\n\r\n  return ignoreFiles;\r\n}\r\n","const defaultIgnore = ['**/node_modules', '**/flow-typed', '**/coverage', '**/.git'];\r\n\r\nexport default defaultIgnore;\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport defaultIgnore from '@ignores/defaultIgnore';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport isIgnored from '@ignores/isIgnored';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fastGlob from 'fast-glob';\r\nimport fs from 'fs';\r\nimport { isEmpty, isFalse, isNotEmpty } from 'my-easy-fp';\r\nimport { getDirname, isEmptyDir, replaceSepToPosix } from 'my-node-fp';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function getDescendantExportInfo(\r\n  parentFilePath: string,\r\n  option: TCreateOrSingleOption,\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n): Promise<IDescendantExportInfo[]> {\r\n  const filePath = replaceSepToPosix(parentFilePath);\r\n  const globPattern = replaceSepToPosix(posixJoin(await getDirname(filePath), '**', '*'));\r\n\r\n  const unIgnoredDirPaths = await fastGlob(globPattern, {\r\n    ignore: defaultIgnore,\r\n    dot: true,\r\n    onlyDirectories: true,\r\n  });\r\n\r\n  const dirPaths = unIgnoredDirPaths.filter((dirPath) => isFalse(isIgnored(ignores, dirPath)));\r\n\r\n  const parentExportInfo = exportInfos.filter(\r\n    (exportInfo) => exportInfo.resolvedDirPath === filePath,\r\n  );\r\n  const descendants = await Promise.all(\r\n    dirPaths.map(async (globDirPath) => {\r\n      const includeExportInfos = exportInfos\r\n        .filter((exportInfo) => exportInfo.resolvedDirPath === globDirPath)\r\n        .filter((exportInfo) => {\r\n          const ignoreInFile = ignores[exportInfo.resolvedFilePath];\r\n          const namedExportIdentifiers = exportInfo.namedExports.map(\r\n            (namedExport) => namedExport.identifier,\r\n          );\r\n\r\n          if (typeof ignoreInFile === 'string' && ignoreInFile === '*') {\r\n            return false;\r\n          }\r\n\r\n          if (\r\n            typeof ignoreInFile === 'string' &&\r\n            ignoreInFile === exportInfo.defaultExport?.identifier &&\r\n            namedExportIdentifiers.length <= 0\r\n          ) {\r\n            return false;\r\n          }\r\n\r\n          if (\r\n            isNotEmpty(exportInfo.defaultExport?.identifier) &&\r\n            ignoreInFile !== exportInfo.defaultExport?.identifier\r\n          ) {\r\n            return true;\r\n          }\r\n\r\n          if (namedExportIdentifiers.length > 0) {\r\n            return true;\r\n          }\r\n\r\n          return isEmpty(ignoreInFile);\r\n        });\r\n\r\n      const includeDirFilePaths = await fs.promises.readdir(globDirPath, { withFileTypes: true });\r\n\r\n      return {\r\n        dirPath: globDirPath,\r\n        isTerminal: isFalse(\r\n          includeDirFilePaths.some((includeDirFilePath) => includeDirFilePath.isDirectory()),\r\n        ),\r\n        depth: getRelativeDepth(option.startAt, globDirPath),\r\n        exportInfos: includeExportInfos,\r\n      };\r\n    }),\r\n  );\r\n\r\n  const sortedDescendents = [\r\n    {\r\n      dirPath: filePath,\r\n      isTerminal: await isEmptyDir(filePath),\r\n      depth: getRelativeDepth(option.startAt, filePath),\r\n      exportInfos: parentExportInfo,\r\n    },\r\n    ...descendants,\r\n  ].sort((l, r) => {\r\n    const depthDiff = l.depth - r.depth;\r\n\r\n    if (depthDiff !== 0) {\r\n      return depthDiff;\r\n    }\r\n\r\n    return l.dirPath.localeCompare(r.dirPath);\r\n  });\r\n\r\n  return sortedDescendents;\r\n}\r\n","import path from 'path';\r\n\r\nexport default function appendDotDirPrefix(filePath: string, sep?: string): string {\r\n  const pathSep = sep ?? path.sep;\r\n\r\n  if (filePath.startsWith('.')) {\r\n    return filePath;\r\n  }\r\n\r\n  if (filePath === '') {\r\n    return `.${pathSep}`;\r\n  }\r\n\r\n  return `.${pathSep}${filePath}`;\r\n}\r\n","/*\r\n// valid ext\r\n// '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\r\n\r\n  from checker.js\r\n  src/compiler/checker.ts:\r\n  src/compiler/checker.ts:            [\".mts\", \".mjs\"],\r\n\r\n  tests/baselines/reference/declarationEmitInvalidReferenceAllowJs.errors.txt:\r\n  tests/cases/compiler/declarationEmitInvalidReferenceAllowJs.ts(1,22): \r\n  error TS6231: Could not resolve the path 'tests/cases/compiler/invalid' with the extensions: \r\n  '.ts', '.tsx', '.d.ts', '.js', '.jsx', '.cts', '.d.cts', '.cjs', '.mts', '.d.mts', '.mjs'.\r\n */\r\n\r\nconst extensions = ['.ts', '.tsx', '.d.ts', '.cts', '.d.cts', '.mts', '.d.mts'];\r\n\r\nexport default extensions;\r\n","import extensions from '@tools/extensions';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport path from 'path';\r\n\r\nexport default function getExtname(filePath: string): string {\r\n  if (extensions.every((extension) => isFalse(filePath.endsWith(extension)))) {\r\n    return path.extname(filePath);\r\n  }\r\n\r\n  if (filePath.endsWith('.d.ts')) {\r\n    return '.d.ts';\r\n  }\r\n\r\n  if (filePath.endsWith('.d.cts')) {\r\n    return '.d.cts';\r\n  }\r\n\r\n  if (filePath.endsWith('.d.mts')) {\r\n    return '.d.mts';\r\n  }\r\n\r\n  return path.extname(filePath);\r\n}\r\n","import { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\r\nimport extensions from '@tools/extensions';\r\nimport getExtname from '@tools/getExtname';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport { replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nfunction isKeepExt({\r\n  relativePath,\r\n  declareExtensions,\r\n  extname,\r\n  isIndex,\r\n}: {\r\n  relativePath?: string;\r\n  declareExtensions: string[];\r\n  extname: string;\r\n  isIndex: boolean;\r\n}) {\r\n  if (isNotEmpty(relativePath) && declareExtensions.includes(extname)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNotEmpty(relativePath) && isIndex && extname === '.tsx') {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getRelativePath(filePath: string, option: TCreateOrSingleOption, relativePath?: string) {\r\n  const declareExtensions = extensions.filter((ext) => ext.startsWith('.d'));\r\n  const extname = getExtname(filePath);\r\n  const basename = path.basename(filePath, extname);\r\n  const isIndex = basename.endsWith('index');\r\n\r\n  if (isKeepExt({ relativePath, declareExtensions, extname, isIndex })) {\r\n    if (isEmpty(relativePath)) {\r\n      throw new Error(`empty path: ${relativePath}`);\r\n    }\r\n\r\n    const relativeDirPath = replaceSepToPosix(\r\n      path.posix.relative(relativePath, path.dirname(filePath)),\r\n    );\r\n    const exportPath = `${basename}${extname}`;\r\n    const relativeDirPathWithDot = appendDotDirPrefix(\r\n      path.posix.join(relativeDirPath, exportPath),\r\n      path.posix.sep,\r\n    );\r\n\r\n    return relativeDirPathWithDot;\r\n  }\r\n\r\n  if (isNotEmpty(relativePath) && option.keepFileExt) {\r\n    const relativeDirPath = replaceSepToPosix(\r\n      path.posix.relative(relativePath, path.dirname(filePath)),\r\n    );\r\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\r\n    const relativeDirPathWithDot = appendDotDirPrefix(\r\n      path.posix.join(relativeDirPath, exportPath),\r\n      path.posix.sep,\r\n    );\r\n\r\n    return relativeDirPathWithDot;\r\n  }\r\n\r\n  if (isNotEmpty(relativePath)) {\r\n    const relativeDirPath = replaceSepToPosix(\r\n      path.posix.relative(relativePath, path.dirname(filePath)),\r\n    );\r\n    const exportPath = isIndex ? '' : `${basename}`;\r\n    const relativeDirPathWithDot = appendDotDirPrefix(\r\n      path.posix.join(relativeDirPath, exportPath),\r\n      path.posix.sep,\r\n    );\r\n\r\n    return relativeDirPathWithDot;\r\n  }\r\n\r\n  if (option.keepFileExt || declareExtensions.includes(extname)) {\r\n    const exportPath = isIndex ? '' : `${basename}${extname}`;\r\n    const basenameWithDot = appendDotDirPrefix(exportPath, path.posix.sep);\r\n    return basenameWithDot;\r\n  }\r\n\r\n  const basenameWithDot = appendDotDirPrefix(basename, path.posix.sep);\r\n  return basenameWithDot;\r\n}\r\n\r\nexport default function getFilePathOnIndex(\r\n  filePath: string,\r\n  option: TCreateOrSingleOption,\r\n  relativePath?: string,\r\n) {\r\n  const semicolon = option.useSemicolon ? ';' : '';\r\n  const relativeDirPath = getRelativePath(filePath, option, relativePath);\r\n  return `${option.quote}${relativeDirPath}${option.quote}${semicolon}`;\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getDescendantExportInfo from '@modules/getDescendantExportInfo';\r\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport IDescendantExportInfo from '@tools/interface/IDescendantExportInfo';\r\nimport { isDescendant, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\n/*\r\n\r\nb, c는 비어 있다. 그래서 a에 index.ts를 만들 때는 d, e를 바로 링크해야 한다\r\nb, c는 만들면 안됨\r\n\r\na/\r\n>> a/index.ts\r\n\r\na/b/\r\na/b/c/\r\n\r\na/b/c/case01.ts\r\n>> a/b/c/index.ts\r\n\r\na/b/c/d/e/case02.ts\r\na/b/c/d/e/case03.ts\r\n>> a/b/c/index.ts 에 들어간다\r\n\r\na/b/c/f/g/case04.ts\r\n>> a/b/c/index.ts 에 들어간다\r\n */\r\n\r\n/**\r\n *\r\n * @param dirPath base directory for extract descendant directory\r\n * @param exportInfos every exportInfos\r\n * @param option ctix option\r\n * @returns descendant directory index info\r\n */\r\nexport default async function createDescendantIndex(\r\n  dirPath: string,\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TCreateOrSingleOption,\r\n): Promise<ICreateIndexInfo[]> {\r\n  const currentDepth = getRelativeDepth(option.startAt, dirPath);\r\n  const everyDescendants = await getDescendantExportInfo(dirPath, option, exportInfos, ignores);\r\n  const sortedEveryDescendants = everyDescendants.sort((l, r) => {\r\n    const depthDiff = l.depth - r.depth;\r\n    return depthDiff !== 0 ? depthDiff : r.dirPath.localeCompare(l.dirPath);\r\n  });\r\n\r\n  if (option.mode === 'create' && option.skipEmptyDir) {\r\n    const currentDirExportInfos = exportInfos.filter(\r\n      (exportInfo) => exportInfo.resolvedDirPath === dirPath,\r\n    );\r\n\r\n    // 내가 비어있으면 스킵\r\n    // top level 이라면, 비어 있더라도 index를 빌드해야 한다\r\n    // self directory is empty that will be skip\r\n    // If currentDepth is top level of depth that have to build index\r\n    if (currentDirExportInfos.length <= 0 && currentDepth !== 0) {\r\n      return [];\r\n    }\r\n\r\n    const indexNeedExportInfos = sortedEveryDescendants\r\n      .filter((descendent) => descendent.dirPath !== dirPath)\r\n      .reduce<Record<string, IDescendantExportInfo>>((aggregation, sortedEveryDescendant) => {\r\n        const alreadyRegisteredDirPaths = Object.keys(aggregation);\r\n\r\n        if (\r\n          alreadyRegisteredDirPaths.some((alreadyRegisteredDirPath) =>\r\n            isDescendant(alreadyRegisteredDirPath, sortedEveryDescendant.dirPath, path.posix.sep),\r\n          )\r\n        ) {\r\n          return aggregation;\r\n        }\r\n\r\n        if (sortedEveryDescendant.exportInfos.length <= 0) {\r\n          return aggregation;\r\n        }\r\n\r\n        return { ...aggregation, [sortedEveryDescendant.dirPath]: sortedEveryDescendant };\r\n      }, {});\r\n\r\n    const descendantIndexInfos = Object.values(indexNeedExportInfos).map((indexNeedExportInfo) => {\r\n      const filePath = getFilePathOnIndex(indexNeedExportInfo.dirPath, option, dirPath);\r\n\r\n      return {\r\n        depth: currentDepth,\r\n        resolvedDirPath: dirPath,\r\n        resolvedFilePath: undefined,\r\n        exportStatement: `export * from ${filePath}`,\r\n      };\r\n    }, {});\r\n\r\n    return descendantIndexInfos;\r\n  }\r\n\r\n  const descendantIndexInfos = everyDescendants\r\n    .filter((everyDescendant) => everyDescendant.depth === currentDepth + 1)\r\n    .map((exportedDescendant) => {\r\n      const filePath = getFilePathOnIndex(exportedDescendant.dirPath, option, dirPath);\r\n\r\n      return {\r\n        depth: currentDepth,\r\n        resolvedDirPath: replaceSepToPosix(dirPath),\r\n        resolvedFilePath: undefined,\r\n        exportStatement: `export * from ${filePath}`,\r\n      };\r\n    });\r\n\r\n  return descendantIndexInfos;\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\r\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport { getDirnameSync } from 'my-node-fp';\r\n\r\nexport default function createIndexInfo(\r\n  exportInfo: IExportInfo,\r\n  option: TCreateOrSingleOption,\r\n): ICreateIndexInfo[] {\r\n  if (\r\n    exportInfo.starExported &&\r\n    isNotEmpty(exportInfo.defaultExport) &&\r\n    exportInfo.namedExports.length > 0\r\n  ) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: getDirnameSync(exportInfo.resolvedFilePath),\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [];\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport defaultIgnore from '@ignores/defaultIgnore';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport isIgnored from '@ignores/isIgnored';\r\nimport getRelativeDepth from '@tools/getRelativeDepth';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fastGlob from 'fast-glob';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { startSepRemove } from 'my-node-fp';\r\nimport path from 'path';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\n/**\r\n *\r\n * @param exportInfos\r\n * @param ignores\r\n * @param option\r\n * @returns\r\n */\r\nexport default async function getDirPaths(\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TCreateOrSingleOption,\r\n): Promise<{ depths: Record<string, number>; dirPaths: Record<string, IExportInfo[]> }> {\r\n  const dirPathsFromExportInfos = await fastGlob(posixJoin(option.startAt, '**', '*'), {\r\n    onlyDirectories: true,\r\n    ignore: defaultIgnore,\r\n    cwd: option.startAt,\r\n  });\r\n\r\n  const filePaths = [option.startAt, ...dirPathsFromExportInfos].filter((dirPath) =>\r\n    isFalse(isIgnored(ignores, dirPath)),\r\n  );\r\n\r\n  const depths = filePaths.reduce<Record<string, number>>((aggregation, filePath) => {\r\n    return { ...aggregation, [filePath]: getRelativeDepth(option.startAt, filePath) };\r\n  }, {});\r\n\r\n  const dirPaths = filePaths.reduce<Record<string, IExportInfo[]>>((aggregation, filePath) => {\r\n    const files = exportInfos.filter((exportInfo) => {\r\n      return (\r\n        exportInfo.resolvedFilePath.indexOf(filePath) >= 0 &&\r\n        startSepRemove(exportInfo.resolvedFilePath.replace(filePath, ''), path.posix.sep).split(\r\n          path.posix.sep,\r\n        ).length <= 1\r\n      );\r\n    });\r\n\r\n    return { ...aggregation, [filePath]: files };\r\n  }, {});\r\n\r\n  return { depths, dirPaths };\r\n}\r\n","import ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\n\r\nexport default function mergeCreateIndexInfo(\r\n  origin: ICreateIndexInfos,\r\n  target: ICreateIndexInfos | ICreateIndexInfo,\r\n) {\r\n  const merged: ICreateIndexInfos = { ...origin };\r\n\r\n  merged.depth = target.depth;\r\n  merged.resolvedDirPath = target.resolvedDirPath;\r\n\r\n  if ('exportStatement' in target) {\r\n    merged.exportStatements = settify(\r\n      [...merged.exportStatements, target.exportStatement].filter(\r\n        (exportStatement): exportStatement is string => isNotEmpty(exportStatement),\r\n      ),\r\n    );\r\n\r\n    merged.resolvedFilePaths = settify(\r\n      [...(merged.resolvedFilePaths ?? []), target.resolvedFilePath].filter(\r\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\r\n      ),\r\n    );\r\n\r\n    merged.resolvedFilePaths =\r\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\r\n  } else {\r\n    merged.exportStatements = settify([\r\n      ...(merged.exportStatements ?? []),\r\n      ...target.exportStatements,\r\n    ]);\r\n\r\n    merged.resolvedFilePaths = settify(\r\n      [...(merged.resolvedFilePaths ?? []), ...(target.resolvedFilePaths ?? [])].filter(\r\n        (resolvedFilePath): resolvedFilePath is string => isNotEmpty(resolvedFilePath),\r\n      ),\r\n    );\r\n    merged.resolvedFilePaths =\r\n      merged.resolvedFilePaths.length <= 0 ? undefined : merged.resolvedFilePaths;\r\n  }\r\n\r\n  return merged;\r\n}\r\n","import progress from '@cli/progress';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport createDescendantIndex from '@modules/createDescendantIndex';\r\nimport createIndexInfo from '@modules/createIndexInfo';\r\nimport getDirPaths from '@modules/getDirPaths';\r\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function createIndexInfos(\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TCreateOrSingleOption,\r\n): Promise<ICreateIndexInfos[]> {\r\n  try {\r\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\r\n\r\n    const depthPairs = Object.keys(dirPaths)\r\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\r\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\r\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\r\n      .sort((l, r) => r.depth - l.depth);\r\n\r\n    progress.start(depthPairs.length * 2, 0);\r\n\r\n    const statementInfos = depthPairs\r\n      .map((depthPair) => {\r\n        if (depthPair.exportInfos.length <= 0) {\r\n          return [];\r\n        }\r\n\r\n        const statements = depthPair.exportInfos\r\n          .map((exportInfo) => {\r\n            const indexInfo = createIndexInfo(exportInfo, option);\r\n            return indexInfo;\r\n          })\r\n          .flat();\r\n\r\n        progress.increment();\r\n\r\n        return statements;\r\n      })\r\n      .flat()\r\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\r\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\r\n          return {\r\n            ...aggregation,\r\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\r\n              aggregation[indexInfo.resolvedDirPath],\r\n              indexInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...aggregation,\r\n          [indexInfo.resolvedDirPath]: {\r\n            depth: indexInfo.depth,\r\n            resolvedDirPath: indexInfo.resolvedDirPath,\r\n            resolvedFilePaths: settify(\r\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\r\n                isNotEmpty(resolvedFilePath),\r\n              ),\r\n            ),\r\n            exportStatements: [indexInfo.exportStatement],\r\n          },\r\n        };\r\n      }, {});\r\n\r\n    const descendantExportInfos = (\r\n      await Promise.all(\r\n        depthPairs.map(async (depthPair) => {\r\n          const indexInfo = await createDescendantIndex(\r\n            depthPair.dirPath,\r\n            exportInfos,\r\n            ignores,\r\n            option,\r\n          );\r\n\r\n          progress.increment();\r\n\r\n          return indexInfo;\r\n        }),\r\n      )\r\n    )\r\n      .flat()\r\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\r\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\r\n          return {\r\n            ...aggregation,\r\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\r\n              aggregation[indexInfo.resolvedDirPath],\r\n              indexInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...aggregation,\r\n          [indexInfo.resolvedDirPath]: {\r\n            depth: indexInfo.depth,\r\n            resolvedDirPath: indexInfo.resolvedDirPath,\r\n            resolvedFilePaths: isNotEmpty(indexInfo.resolvedFilePath)\r\n              ? [indexInfo.resolvedFilePath]\r\n              : indexInfo.resolvedFilePath,\r\n            exportStatements: [indexInfo.exportStatement],\r\n          },\r\n        };\r\n      }, {});\r\n\r\n    const mergedIndexInfos = depthPairs.reduce<Record<string, ICreateIndexInfos>>(\r\n      (aggregation, depthPair) => {\r\n        const statementInfo = statementInfos[depthPair.dirPath];\r\n        const descendantExportInfo = descendantExportInfos[depthPair.dirPath];\r\n\r\n        if (isNotEmpty(statementInfo) && isNotEmpty(descendantExportInfo)) {\r\n          return {\r\n            ...aggregation,\r\n            [depthPair.dirPath]: mergeCreateIndexInfo(\r\n              mergeCreateIndexInfo(aggregation[depthPair.dirPath], statementInfo),\r\n              descendantExportInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        if (isNotEmpty(statementInfo)) {\r\n          return {\r\n            ...aggregation,\r\n            [depthPair.dirPath]: mergeCreateIndexInfo(\r\n              aggregation[depthPair.dirPath],\r\n              statementInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        if (isNotEmpty(descendantExportInfo)) {\r\n          return {\r\n            ...aggregation,\r\n            [depthPair.dirPath]: mergeCreateIndexInfo(\r\n              aggregation[depthPair.dirPath],\r\n              descendantExportInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return { ...aggregation };\r\n      },\r\n      {},\r\n    );\r\n\r\n    progress.update(depthPairs.length * 2);\r\n\r\n    return Object.values(mergedIndexInfos).map((mergedIndexInfo) => {\r\n      return {\r\n        ...mergedIndexInfo,\r\n        exportStatements: mergedIndexInfo.exportStatements.sort((l, r) => l.localeCompare(r)),\r\n      };\r\n    });\r\n  } finally {\r\n    progress.stop();\r\n  }\r\n}\r\n","import { TRemoveOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport { posixJoin } from '@tools/misc';\r\nimport fastGlob from 'fast-glob';\r\nimport { settify } from 'my-easy-fp';\r\nimport { getDirname, isDescendant, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default async function getRemoveFiles(\r\n  project: tsm.Project,\r\n  option: TRemoveOptionWithDirInfo,\r\n) {\r\n  const filePaths = project\r\n    .getSourceFiles()\r\n    .filter((sourceFile) =>\r\n      isDescendant(option.startAt, sourceFile.getFilePath().toString(), path.posix.sep),\r\n    )\r\n    .map((sourceFile) => replaceSepToPosix(sourceFile.getFilePath()));\r\n\r\n  const dirPaths = (await Promise.all(filePaths.map((filePath) => getDirname(filePath)))).map(\r\n    (dirPath) => replaceSepToPosix(dirPath),\r\n  );\r\n\r\n  const globPatterns = option.includeBackup\r\n    ? settify([\r\n        posixJoin(option.startAt, option.exportFilename),\r\n        posixJoin(option.startAt, `${option.exportFilename}.bak`),\r\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\r\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', `${option.exportFilename}.bak`)),\r\n      ])\r\n    : settify([\r\n        posixJoin(option.startAt, option.exportFilename),\r\n        ...dirPaths.map((dirPath) => posixJoin(dirPath, '**', option.exportFilename)),\r\n      ]);\r\n\r\n  const files = await fastGlob(globPatterns, { dot: true, cwd: option.startAt });\r\n\r\n  return files;\r\n}\r\n","import { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport { isFalse } from 'my-easy-fp';\r\nimport { getDirnameSync, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\nimport * as tsm from 'ts-morph';\r\n\r\nfunction getTsconfigRootDir(compilerOptions: tsm.CompilerOptions): string | undefined {\r\n  // If set rootDir, use it\r\n  if (compilerOptions.rootDir !== undefined && compilerOptions.rootDir !== null) {\r\n    const rootDir = path.resolve(compilerOptions.rootDir);\r\n    return replaceSepToPosix(rootDir);\r\n  }\r\n\r\n  // If set rootDirs, use first element of array\r\n  if (compilerOptions.rootDirs !== undefined && compilerOptions.rootDirs !== null) {\r\n    const [head] = compilerOptions.rootDirs;\r\n    const rootDir = path.resolve(head);\r\n    return replaceSepToPosix(rootDir);\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nexport default function getOutputDir(\r\n  project: tsm.Project,\r\n  option: TSingleOptionWithDirInfo,\r\n): string {\r\n  if (isFalse(option.useRootDir ?? false)) {\r\n    return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\r\n  }\r\n\r\n  const compilerOptions = project.getCompilerOptions();\r\n  const rootDir = getTsconfigRootDir(compilerOptions);\r\n\r\n  if (rootDir !== undefined && rootDir !== null) {\r\n    const outputDirConfig = replaceSepToPosix(getDirnameSync(option.output));\r\n\r\n    if (path.relative(rootDir, outputDirConfig).startsWith('..')) {\r\n      return rootDir;\r\n    }\r\n\r\n    return replaceSepToPosix(path.resolve(outputDirConfig));\r\n  }\r\n\r\n  return replaceSepToPosix(path.resolve(getDirnameSync(option.output)));\r\n}\r\n","import IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport getFilePathOnIndex from '@modules/getFilePathOnIndex';\r\nimport ICreateIndexInfo from '@tools/interface/ICreateIndexInfo';\r\nimport getOutputDir from '@writes/getOutputDir';\r\nimport { isEmpty, isNotEmpty } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\n\r\nexport default function singleIndexInfo(\r\n  exportInfo: IExportInfo,\r\n  option: TSingleOptionWithDirInfo,\r\n  project: tsm.Project,\r\n): ICreateIndexInfo[] {\r\n  const outputDir = getOutputDir(project, option);\r\n\r\n  if (\r\n    exportInfo.starExported &&\r\n    isNotEmpty(exportInfo.defaultExport) &&\r\n    exportInfo.namedExports.length > 0\r\n  ) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (exportInfo.starExported && isEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export * from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isEmpty(exportInfo.defaultExport) && exportInfo.namedExports.length > 0) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n    const statement = exportInfo.namedExports\r\n      .map((namedExport) =>\r\n        namedExport.isIsolatedModules\r\n          ? `type ${namedExport.identifier}`\r\n          : `${namedExport.identifier}`,\r\n      )\r\n      .join(', ');\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: `export { ${statement} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  if (isNotEmpty(exportInfo.defaultExport)) {\r\n    const filePath = getFilePathOnIndex(exportInfo.resolvedFilePath, option, outputDir);\r\n\r\n    return [\r\n      {\r\n        depth: exportInfo.depth,\r\n        resolvedFilePath: exportInfo.resolvedFilePath,\r\n        resolvedDirPath: outputDir,\r\n        exportStatement: exportInfo.defaultExport.isIsolatedModules\r\n          ? `export type { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`\r\n          : `export { default as ${exportInfo.defaultExport.identifier} } from ${filePath}`,\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [];\r\n}\r\n","import progress from '@cli/progress';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TSingleOptionWithDirInfo } from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getDirPaths from '@modules/getDirPaths';\r\nimport mergeCreateIndexInfo from '@modules/mergeCreateIndexInfo';\r\nimport singleIndexInfo from '@modules/singleIndexInfo';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\nimport * as tsm from 'ts-morph';\r\nimport { AsyncReturnType } from 'type-fest';\r\n\r\nexport default async function singleIndexInfos(\r\n  exportInfos: IExportInfo[],\r\n  ignores: AsyncReturnType<typeof getIgnoreConfigContents>,\r\n  option: TSingleOptionWithDirInfo,\r\n  project: tsm.Project,\r\n): Promise<ICreateIndexInfos[]> {\r\n  try {\r\n    const { depths, dirPaths } = await getDirPaths(exportInfos, ignores, option);\r\n\r\n    const depthPairs = Object.keys(dirPaths)\r\n      .map((dirPath) => ({ dirPath, depth: depths[dirPath], exportInfos: dirPaths[dirPath] }))\r\n      .filter((depthPair) => isNotEmpty(depthPair.depth))\r\n      .filter((depthPair) => isNotEmpty(depthPair.exportInfos))\r\n      .sort((l, r) => r.depth - l.depth);\r\n\r\n    progress.start(depthPairs.length, 0);\r\n\r\n    const statementInfos = depthPairs\r\n      .map((depthPair) => {\r\n        if (depthPair.exportInfos.length <= 0) {\r\n          return [];\r\n        }\r\n\r\n        const statements = depthPair.exportInfos\r\n          .map((exportInfo) => singleIndexInfo(exportInfo, option, project))\r\n          .flatMap((nonFlatted) => nonFlatted);\r\n\r\n        progress.increment();\r\n\r\n        return statements;\r\n      })\r\n      .flatMap((nonFlatted) => nonFlatted)\r\n      .reduce<Record<string, ICreateIndexInfos>>((aggregation, indexInfo) => {\r\n        if (isNotEmpty(aggregation[indexInfo.resolvedDirPath])) {\r\n          return {\r\n            ...aggregation,\r\n            [indexInfo.resolvedDirPath]: mergeCreateIndexInfo(\r\n              aggregation[indexInfo.resolvedDirPath],\r\n              indexInfo,\r\n            ),\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...aggregation,\r\n          [indexInfo.resolvedDirPath]: {\r\n            depth: indexInfo.depth,\r\n            resolvedDirPath: indexInfo.resolvedDirPath,\r\n            resolvedFilePaths: settify(\r\n              [indexInfo.resolvedFilePath].filter((resolvedFilePath): resolvedFilePath is string =>\r\n                isNotEmpty(resolvedFilePath),\r\n              ),\r\n            ),\r\n            exportStatements: [indexInfo.exportStatement],\r\n          },\r\n        };\r\n      }, {});\r\n\r\n    progress.update(depthPairs.length);\r\n\r\n    return Object.values(statementInfos);\r\n  } finally {\r\n    progress.stop();\r\n  }\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport IIdentifierWithNode from '@compilers/interfaces/IIdentifierWithNode';\r\nimport chalk from 'chalk';\r\nimport { isNotEmpty, settify } from 'my-easy-fp';\r\n\r\nfunction createReason(exportInfo: IExportInfo, identifier: string) {\r\n  if (isNotEmpty(exportInfo.defaultExport) && exportInfo.defaultExport.identifier === identifier) {\r\n    const lineAndCharacter = exportInfo.defaultExport.node\r\n      .getSourceFile()\r\n      .getLineAndColumnAtPos(exportInfo.defaultExport.node.getStart(true));\r\n\r\n    const reason: IReason = {\r\n      type: 'error',\r\n      lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\r\n      nodes: [exportInfo.defaultExport.node],\r\n      source: exportInfo.defaultExport.node.getSourceFile(),\r\n      filePath: exportInfo.resolvedFilePath,\r\n      message: `detect same name of default export statement: \"${chalk.yellow(identifier)}\"`,\r\n    };\r\n\r\n    return [reason];\r\n  }\r\n\r\n  return exportInfo.namedExports\r\n    .filter((namedExport) => namedExport.identifier === identifier)\r\n    .map((namedExport) => {\r\n      const lineAndCharacter = namedExport.node\r\n        .getSourceFile()\r\n        .getLineAndColumnAtPos(namedExport.node.getStart(true));\r\n\r\n      const reason: IReason = {\r\n        type: 'error',\r\n        lineAndCharacter: { line: lineAndCharacter.line, character: lineAndCharacter.column },\r\n        nodes: [namedExport.node],\r\n        source: namedExport.node.getSourceFile(),\r\n        filePath: exportInfo.resolvedFilePath,\r\n        message: `detect same name of export statement: \"${chalk.yellow(identifier)}\"`,\r\n      };\r\n\r\n      return reason;\r\n    });\r\n}\r\n\r\n/**\r\n * Detect export duplication from every typescript source file.\r\n *\r\n * @param exportInfos export statements from every typescript source file\r\n * @returns\r\n */\r\nexport default function validateExportDuplication(exportInfos: IExportInfo[]) {\r\n  const exportInfoRecord = exportInfos.reduce<Record<string, IExportInfo[]>>(\r\n    (aggregation, exportInfo) => {\r\n      const next = { ...aggregation };\r\n      const exportedNames = [exportInfo.defaultExport, ...exportInfo.namedExports].filter(\r\n        (exportedName): exportedName is IIdentifierWithNode => isNotEmpty(exportedName),\r\n      );\r\n\r\n      exportedNames.forEach((exportedName) => {\r\n        next[exportedName.identifier] = [...(next[exportedName.identifier] ?? []), exportInfo];\r\n      });\r\n\r\n      return next;\r\n    },\r\n    {},\r\n  );\r\n\r\n  const duplicateRecord = Object.entries(exportInfoRecord)\r\n    .filter((exportPair) => {\r\n      const [, exportInfo] = exportPair;\r\n      return exportInfo.length > 1;\r\n    })\r\n    .reduce<Record<string, IExportInfo[]>>((aggregation, exportPair) => {\r\n      const [identifier, exportInfo] = exportPair;\r\n      return { ...aggregation, [identifier]: exportInfo };\r\n    }, {});\r\n\r\n  const reasons: IReason[] = Object.entries(duplicateRecord)\r\n    .map((exportPair) => {\r\n      const [identifier, duplicateExportInfos] = exportPair;\r\n      return duplicateExportInfos\r\n        .map((exportInfo) => createReason(exportInfo, identifier))\r\n        .flatMap((nonFlatted) => nonFlatted);\r\n    })\r\n    .flatMap((nonFlatted) => nonFlatted);\r\n\r\n  const filePaths = settify(\r\n    Object.values(duplicateRecord)\r\n      .map((duplicateRecordElement) => {\r\n        return duplicateRecordElement.map((element) => element.resolvedFilePath);\r\n      })\r\n      .flatMap((nonFlatted) => nonFlatted)\r\n      .filter((filePath): filePath is string => isNotEmpty(filePath) && filePath !== ''),\r\n  );\r\n\r\n  return {\r\n    valid: Object.keys(duplicateRecord).length <= 0,\r\n    filePaths: Array.from(new Set(filePaths)),\r\n    duplicate: duplicateRecord,\r\n    reasons,\r\n  };\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport IExportInfo from '@compilers/interfaces/IExportInfo';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport getExtname from '@tools/getExtname';\r\nimport chalk from 'chalk';\r\nimport path from 'path';\r\n\r\nexport default function validateFileNameDuplication(\r\n  exportInfos: IExportInfo[],\r\n  option: TCreateOrSingleOption,\r\n) {\r\n  if (option.mode === 'single') {\r\n    return {\r\n      valid: true,\r\n      exportInfos: [],\r\n      filePaths: [],\r\n      reasons: [],\r\n    };\r\n  }\r\n\r\n  const indexFileName = option.keepFileExt\r\n    ? option.exportFilename\r\n    : path.basename(option.exportFilename, getExtname(option.exportFilename));\r\n\r\n  const duplicate = exportInfos.filter((exportInfo) => {\r\n    const baseName = option.keepFileExt\r\n      ? path.basename(exportInfo.resolvedFilePath)\r\n      : path.basename(exportInfo.resolvedFilePath, getExtname(exportInfo.resolvedFilePath));\r\n\r\n    return baseName === indexFileName;\r\n  });\r\n\r\n  const reasons: IReason[] = Object.values(duplicate).map((exportInfo) => {\r\n    const reason: IReason = {\r\n      type: 'error',\r\n      filePath: exportInfo.resolvedFilePath,\r\n      message: `already exist file: \"${chalk.yellow(exportInfo.resolvedFilePath)}\"`,\r\n    };\r\n\r\n    return reason;\r\n  });\r\n\r\n  return {\r\n    valid: duplicate.length <= 0,\r\n    exportInfos: duplicate,\r\n    filePaths: duplicate.map((exportInfo) => exportInfo.resolvedFilePath),\r\n    reasons,\r\n  };\r\n}\r\n","import { isNotEmpty } from 'my-easy-fp';\r\nimport prettier from 'prettier';\r\n\r\nexport default async function prettierApply(project: string, contents: string) {\r\n  try {\r\n    const option = await prettier.resolveConfig(project, {\r\n      editorconfig: true,\r\n    });\r\n\r\n    if (isNotEmpty(option) && option.parser === 'typescript') {\r\n      const prettiered = prettier.format(contents, option);\r\n      return { apply: true, contents: prettiered };\r\n    }\r\n\r\n    return { apply: false, contents };\r\n  } catch (catched) {\r\n    return { apply: false, contents };\r\n  }\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport { TCreateOrSingleOption } from '@configs/interfaces/IOption';\r\nimport ICreateIndexInfos from '@tools/interface/ICreateIndexInfos';\r\nimport prettierApply from '@writes/prettierApply';\r\nimport chalk from 'chalk';\r\nimport dayjs from 'dayjs';\r\nimport fs from 'fs';\r\nimport { isFalse, isNotEmpty, isTrue } from 'my-easy-fp';\r\nimport { exists } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nfunction getFirstLineComment(option: TCreateOrSingleOption): string {\r\n  const today = dayjs();\r\n\r\n  if (option.useComment && option.useTimestamp) {\r\n    return `// created from ctix ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\r\n  }\r\n\r\n  if (option.useComment) {\r\n    return `// created from ctix${option.eol}${option.eol}`;\r\n  }\r\n\r\n  if (option.useTimestamp) {\r\n    return `// ${today.format('YYYY-MM-DD HH:mm:ss')}${option.eol}${option.eol}`;\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nexport default async function indexFileWrite(\r\n  indexInfos: ICreateIndexInfos[],\r\n  option: TCreateOrSingleOption,\r\n) {\r\n  const nullableReasons = await Promise.all(\r\n    indexInfos.map(async (indexInfo) => {\r\n      const indexFilePath = path.join(indexInfo.resolvedDirPath, option.exportFilename);\r\n      const indexFileContent = indexInfo.exportStatements.join(option.eol);\r\n      const firstLine = getFirstLineComment(option);\r\n      const prettierApplied = await prettierApply(\r\n        option.project,\r\n        `${firstLine}${indexFileContent}${option.eol}`,\r\n      );\r\n\r\n      if (isTrue(option.overwrite ?? false)) {\r\n        // index.ts file already exist, create backup file\r\n        if (await exists(indexFilePath)) {\r\n          await fs.promises.writeFile(\r\n            `${indexFilePath}.bak`,\r\n            await fs.promises.readFile(indexFilePath),\r\n          );\r\n        }\r\n\r\n        await fs.promises.writeFile(\r\n          indexFilePath,\r\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\r\n        );\r\n\r\n        return undefined;\r\n      }\r\n\r\n      if (isFalse(await exists(indexFilePath))) {\r\n        await fs.promises.writeFile(\r\n          indexFilePath,\r\n          `${`${firstLine}${prettierApplied.contents}`.trim()}${option.eol}`,\r\n        );\r\n\r\n        return undefined;\r\n      }\r\n\r\n      const reason: IReason = {\r\n        type: 'error',\r\n        filePath: indexFilePath,\r\n        message: `Already exist \"${option.exportFilename}\": \"${chalk.yellow(indexFilePath)}\"`,\r\n      };\r\n\r\n      return reason;\r\n    }),\r\n  );\r\n\r\n  const reasons = nullableReasons.filter((reason): reason is IReason => isNotEmpty(reason));\r\n\r\n  return reasons;\r\n}\r\n","import IReason from '@cli/interfaces/IReason';\r\nimport progress from '@cli/progress';\r\nimport reasoner from '@cli/reasoner';\r\nimport spinner from '@cli/spinner';\r\nimport getExportInfos from '@compilers/getExportInfos';\r\nimport getTypeScriptProject from '@compilers/getTypeScriptProject';\r\nimport initialConfigLiteral from '@configs/initialConfigLiteral';\r\nimport {\r\n  TCreateOptionWithDirInfo,\r\n  TRemoveOptionWithDirInfo,\r\n  TSingleOptionWithDirInfo,\r\n  TTInitOptionWithDirInfo,\r\n} from '@configs/interfaces/IOption';\r\nimport getIgnoreConfigContents from '@ignores/getIgnoreConfigContents';\r\nimport getIgnoreConfigFiles from '@ignores/getIgnoreConfigFiles';\r\nimport createIndexInfos from '@modules/createIndexInfos';\r\nimport getRemoveFiles from '@modules/getRemoveFiles';\r\nimport singleIndexInfos from '@modules/singleIndexInfos';\r\nimport appendDotDirPrefix from '@tools/appendDotDirPrefix';\r\nimport validateExportDuplication from '@validations/validateExportDuplication';\r\nimport validateFileNameDuplication from '@validations/validateFileNameDuplication';\r\nimport indexFileWrite from '@writes/indexFileWrite';\r\nimport fs from 'fs';\r\nimport { applyEdits, FormattingOptions, ModificationOptions, modify } from 'jsonc-parser';\r\nimport { isFalse, isNotEmpty } from 'my-easy-fp';\r\nimport { exists, getDirname, replaceSepToPosix } from 'my-node-fp';\r\nimport path from 'path';\r\n\r\nexport async function createWritor(option: TCreateOptionWithDirInfo, isMessageDisplay?: boolean) {\r\n  try {\r\n    progress.isEnable = isMessageDisplay ?? false;\r\n    spinner.isEnable = isMessageDisplay ?? false;\r\n    reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n    progress.stream = option.progressStream;\r\n    spinner.stream = option.spinnerStream;\r\n    reasoner.stream = option.reasonerStream;\r\n\r\n    spinner.start(\"ctix 'create' mode start, ...\");\r\n\r\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\r\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\r\n\r\n    spinner.update('project loading complete');\r\n\r\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\r\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\r\n\r\n    spinner.update('ignore file loading complete');\r\n\r\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\r\n\r\n    spinner.update('start validation');\r\n\r\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\r\n    const fileNameDuplicationValidateResult = validateFileNameDuplication(\r\n      totalExportInfos.filter((exportInfo) =>\r\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\r\n      ),\r\n      option,\r\n    );\r\n    const exportInfos = totalExportInfos.filter(\r\n      (exportInfo) =>\r\n        isFalse(\r\n          fileNameDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath),\r\n        ) &&\r\n        isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\r\n    );\r\n\r\n    if (\r\n      isFalse(fileNameDuplicationValidateResult.valid) ||\r\n      isFalse(exportDuplicationValidateResult.valid)\r\n    ) {\r\n      process.exitCode = 1;\r\n    }\r\n\r\n    spinner.update(`generate ${option.exportFilename} content`);\r\n\r\n    const indexInfos = await createIndexInfos(exportInfos, ignoreContents, option);\r\n\r\n    spinner.update(`write each ${option.exportFilename} file`);\r\n\r\n    const writeReasons = await indexFileWrite(indexInfos, option);\r\n\r\n    spinner.update(`ctix 'create' mode complete!`);\r\n\r\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n\r\nexport async function singleWritor(option: TSingleOptionWithDirInfo, isMessageDisplay?: boolean) {\r\n  try {\r\n    progress.isEnable = isMessageDisplay ?? false;\r\n    spinner.isEnable = isMessageDisplay ?? false;\r\n    reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n    progress.stream = option.progressStream;\r\n    spinner.stream = option.spinnerStream;\r\n    reasoner.stream = option.reasonerStream;\r\n\r\n    spinner.start(\"ctix 'single' mode start, ...\");\r\n\r\n    const projectDirPath = await getDirname(option.resolvedProjectFilePath);\r\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\r\n\r\n    spinner.update('project loading complete');\r\n\r\n    const ignoreFiles = await getIgnoreConfigFiles(projectDirPath, option.resolvedIgnoreFilePath);\r\n    const ignoreContents = await getIgnoreConfigContents({ cwd: projectDirPath, ...ignoreFiles });\r\n\r\n    spinner.update('ignore file loading complete');\r\n\r\n    const totalExportInfos = await getExportInfos(project, option, ignoreContents);\r\n    const exportDuplicationValidateResult = validateExportDuplication(totalExportInfos);\r\n\r\n    spinner.update('start validation');\r\n\r\n    const exportInfos = totalExportInfos.filter((exportInfo) =>\r\n      isFalse(exportDuplicationValidateResult.filePaths.includes(exportInfo.resolvedFilePath)),\r\n    );\r\n\r\n    if (isFalse(exportDuplicationValidateResult.valid)) {\r\n      process.exitCode = 1;\r\n    }\r\n\r\n    const indexInfos = await singleIndexInfos(exportInfos, ignoreContents, option, project);\r\n\r\n    spinner.update(`generate ${option.exportFilename} content`);\r\n\r\n    const writeReasons = await indexFileWrite(indexInfos, option);\r\n\r\n    spinner.update(`write each ${option.exportFilename} file`);\r\n\r\n    spinner.update(`ctix 'single' mode complete!`);\r\n\r\n    reasoner.start([...exportDuplicationValidateResult.reasons, ...writeReasons]);\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n\r\nexport async function removeIndexFile(\r\n  option: TRemoveOptionWithDirInfo,\r\n  isMessageDisplay?: boolean,\r\n) {\r\n  try {\r\n    progress.isEnable = isMessageDisplay ?? false;\r\n    spinner.isEnable = isMessageDisplay ?? false;\r\n    reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n    spinner.start(\"ctix start 'remove' mode\");\r\n    reasoner.sleep(500);\r\n\r\n    const project = getTypeScriptProject(option.resolvedProjectFilePath);\r\n    const filePaths = await getRemoveFiles(project, option);\r\n\r\n    spinner.update(`remove each ${option.exportFilename} file`);\r\n\r\n    progress.start(filePaths.length, 0);\r\n\r\n    await Promise.all(\r\n      filePaths.map(async (filePath) => {\r\n        await fs.promises.unlink(filePath);\r\n\r\n        if (isMessageDisplay) {\r\n          progress.increment();\r\n        }\r\n      }),\r\n    );\r\n\r\n    reasoner.space();\r\n    spinner.update(`ctix 'remove' mode complete!`);\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n\r\nexport async function createInitFile(option: TTInitOptionWithDirInfo, isMessageDisplay?: boolean) {\r\n  progress.isEnable = isMessageDisplay ?? false;\r\n  spinner.isEnable = isMessageDisplay ?? false;\r\n  reasoner.isEnable = isMessageDisplay ?? false;\r\n\r\n  try {\r\n    spinner.start(\"ctix 'init' mode start, ...\");\r\n\r\n    const configPath = await getDirname(\r\n      option.config ?? option.project ?? path.resolve(process.cwd()),\r\n    );\r\n\r\n    const configFilePath = replaceSepToPosix(path.resolve(path.join(configPath, '.ctirc')));\r\n\r\n    const formattingOptions: FormattingOptions = {\r\n      insertSpaces: true,\r\n      tabSize: 2,\r\n      eol: '\\n',\r\n    };\r\n\r\n    const options: ModificationOptions = {\r\n      formattingOptions,\r\n    };\r\n\r\n    let modifiedInitialConfig: string = initialConfigLiteral;\r\n\r\n    if (isNotEmpty(option.project)) {\r\n      const projectFilePath = appendDotDirPrefix(\r\n        replaceSepToPosix(\r\n          path.join(\r\n            path.relative(configPath, await getDirname(option.project)),\r\n            path.basename(option.project),\r\n          ),\r\n        ),\r\n        path.posix.sep,\r\n      );\r\n\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['project'], projectFilePath, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.output)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(\r\n          modifiedInitialConfig,\r\n          ['output'],\r\n          appendDotDirPrefix(\r\n            replaceSepToPosix(path.relative(configPath, option.output)),\r\n            path.posix.sep,\r\n          ),\r\n          options,\r\n        ),\r\n      );\r\n    } else if (isNotEmpty(option.project)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(\r\n          modifiedInitialConfig,\r\n          ['output'],\r\n          appendDotDirPrefix(\r\n            replaceSepToPosix(path.relative(configPath, await getDirname(option.project))),\r\n            path.posix.sep,\r\n          ),\r\n          options,\r\n        ),\r\n      );\r\n    } else {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['output'], configPath, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.exportFilename)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['exportFilename'], option.exportFilename, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.startAt)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['startAt'], option.startAt, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useSemicolon)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useSemicolon'], option.useSemicolon, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useTimestamp)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useTimestamp'], option.useTimestamp, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useComment)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useComment'], option.useComment, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.quote)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['quote'], option.quote, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.keepFileExt)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['keepFileExt'], option.keepFileExt, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.skipEmptyDir)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['skipEmptyDir'], option.skipEmptyDir, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.useRootDir)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['useRootDir'], option.useRootDir, options),\r\n      );\r\n    }\r\n\r\n    if (isNotEmpty(option.includeBackup)) {\r\n      modifiedInitialConfig = applyEdits(\r\n        modifiedInitialConfig,\r\n        modify(modifiedInitialConfig, ['includeBackup'], option.includeBackup, options),\r\n      );\r\n    }\r\n\r\n    if (await exists(configFilePath)) {\r\n      const reason: IReason = {\r\n        type: 'error',\r\n        filePath: configFilePath,\r\n        message: `configuration file(.ctirc) is already exists: ${configFilePath}`,\r\n      };\r\n\r\n      reasoner.start([reason]);\r\n    } else {\r\n      await fs.promises.writeFile(configFilePath, modifiedInitialConfig);\r\n    }\r\n\r\n    spinner.update(\"ctix 'init' mode complete!\");\r\n  } catch (catched) {\r\n    const err =\r\n      catched instanceof Error ? catched : new Error('Unknown error raised from createWritor');\r\n\r\n    throw err;\r\n  } finally {\r\n    spinner.stop();\r\n    progress.stop();\r\n  }\r\n}\r\n"],"names":["sleepMs","path","parseGitignore"],"mappings":"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"}
\ No newline at end of file
